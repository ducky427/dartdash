{"dependencies":[{"uri":"sdk/lib/core/core.dart","name":"dart:core","id":"dart.core","children":[{"comment":"\nEverything in Dart is an [Object].\n","uri":"sdk/lib/core/object.dart","name":"Object","id":"Object","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","name":"==","id":"==1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"29","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns a string representation of this object.\n","name":"toString","id":"toString0()","line":"48","kind":"method"},{"comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","name":"noSuchMethod","id":"noSuchMethod1()","children":[{"ref":{"refId":"dart.core/Invocation","name":"Invocation"},"name":"invocation","id":"invocation","kind":"param"}],"line":"60","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","name":"hashCode","id":"hashCode","line":"43","kind":"property"},{"ref":{"refId":"dart.core/Type","name":"Type"},"comment":"\nA representation of the runtime type of the object.\n","name":"runtimeType","id":"runtimeType","line":"65","kind":"property"},{"comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","name":"Object","id":"Object0()","line":"18","kind":"constructor"}],"line":"10","kind":"class"}],"line":"5","kind":"library"}],"uri":"pkg/crypto/lib/crypto.dart","name":"package:crypto/crypto.dart","id":"crypto","children":[{"returnType":{"refId":"dart.core/int","name":"int"},"uri":"pkg/crypto/lib/src/hash_utils.dart","name":"_rotl32","isPrivate":true,"id":"_rotl322()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"val","id":"val","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"shift","id":"shift","kind":"param"}],"line":"16","kind":"method"},{"uri":"pkg/crypto/lib/src/hash_utils.dart","name":"_BYTES_PER_WORD","isPrivate":true,"id":"_BYTES_PER_WORD","line":"11","kind":"variable"},{"uri":"pkg/crypto/lib/src/hash_utils.dart","name":"_BITS_PER_BYTE","isPrivate":true,"id":"_BITS_PER_BYTE","line":"10","kind":"variable"},{"uri":"pkg/crypto/lib/src/hash_utils.dart","name":"_MASK_32","isPrivate":true,"id":"_MASK_32","line":"9","kind":"variable"},{"uri":"pkg/crypto/lib/src/hash_utils.dart","name":"_MASK_8","isPrivate":true,"id":"_MASK_8","line":"8","kind":"variable"},{"superclass":{"refId":"crypto/_HashBase","name":"_HashBase"},"comment":"\nSHA256 hash function implementation.\n","uri":"pkg/crypto/lib/src/sha256.dart","name":"SHA256","id":"SHA256","children":[{"returnType":{"refId":"crypto/SHA256","name":"SHA256"},"name":"newInstance","id":"newInstance0()","line":"26","kind":"method"},{"name":"_rotr32","isPrivate":true,"id":"_rotr322()","children":[{"name":"n","id":"n","kind":"param"},{"name":"x","id":"x","kind":"param"}],"line":"48","kind":"method"},{"name":"_ch","isPrivate":true,"id":"_ch3()","children":[{"name":"x","id":"x","kind":"param"},{"name":"y","id":"y","kind":"param"},{"name":"z","id":"z","kind":"param"}],"line":"49","kind":"method"},{"name":"_maj","isPrivate":true,"id":"_maj3()","children":[{"name":"x","id":"x","kind":"param"},{"name":"y","id":"y","kind":"param"},{"name":"z","id":"z","kind":"param"}],"line":"50","kind":"method"},{"name":"_bsig0","isPrivate":true,"id":"_bsig01()","children":[{"name":"x","id":"x","kind":"param"}],"line":"51","kind":"method"},{"name":"_bsig1","isPrivate":true,"id":"_bsig11()","children":[{"name":"x","id":"x","kind":"param"}],"line":"52","kind":"method"},{"name":"_ssig0","isPrivate":true,"id":"_ssig01()","children":[{"name":"x","id":"x","kind":"param"}],"line":"53","kind":"method"},{"name":"_ssig1","isPrivate":true,"id":"_ssig11()","children":[{"name":"x","id":"x","kind":"param"}],"line":"54","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_updateHash","isPrivate":true,"id":"_updateHash1()","children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"name":"M","id":"M","kind":"param"}],"line":"58","kind":"method"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"isStatic":true,"name":"_K","isPrivate":true,"id":"_K","line":"32","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"name":"_w","isPrivate":true,"id":"_w","line":"106","kind":"variable"},{"name":"SHA256","id":"SHA2560()","line":"12","kind":"constructor"}],"line":"10","kind":"class"},{"superclass":{"refId":"crypto/_HashBase","name":"_HashBase"},"comment":"\nSHA1 hash function implementation.\n","uri":"pkg/crypto/lib/src/sha1.dart","name":"SHA1","id":"SHA1","children":[{"returnType":{"refId":"crypto/SHA1","name":"SHA1"},"name":"newInstance","id":"newInstance0()","line":"21","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_updateHash","isPrivate":true,"id":"_updateHash1()","children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"name":"m","id":"m","kind":"param"}],"line":"27","kind":"method"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"name":"_w","isPrivate":true,"id":"_w","line":"68","kind":"variable"},{"name":"SHA1","id":"SHA10()","line":"12","kind":"constructor"}],"line":"10","kind":"class"},{"superclass":{"refId":"crypto/_HashBase","name":"_HashBase"},"comment":"\nMD5 hash function implementation.\n\nWARNING: MD5 has known collisions and should only be used when\nrequired for backwards compatibility.\n","uri":"pkg/crypto/lib/src/md5.dart","name":"MD5","id":"MD5","children":[{"returnType":{"refId":"crypto/MD5","name":"MD5"},"name":"newInstance","id":"newInstance0()","line":"22","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_updateHash","isPrivate":true,"id":"_updateHash1()","children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"name":"m","id":"m","kind":"param"}],"line":"47","kind":"method"},{"isStatic":true,"name":"_k","isPrivate":true,"id":"_k","line":"26","kind":"variable"},{"isStatic":true,"name":"_r","isPrivate":true,"id":"_r","line":"39","kind":"variable"},{"name":"MD5","id":"MD50()","line":"14","kind":"constructor"}],"line":"13","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nHash-based Message Authentication Code support.\n\nThe [add] method is used to add data to the message. The [digest] and\n[close] methods are used to extract the message authentication code.\n","uri":"pkg/crypto/lib/src/hmac.dart","name":"HMAC","id":"HMAC","children":[{"comment":"\nAdd a list of bytes to the message.\n","name":"add","id":"add1()","children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"name":"data","id":"data","kind":"param"}],"line":"25","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"comment":"\nPerform the actual computation and extract the message digest\nas a list of bytes.\n","name":"close","id":"close0()","line":"81","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"\nVerify that the HMAC computed for the data so far matches the\ngiven message digest.\n\nThis method should be used instead of memcmp-style comparisons\nto avoid leaking information via timing.\n\nThrows an exception if the given digest does not have the same\nsize as the digest computed by this HMAC instance.\n","name":"verify","id":"verify1()","children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"name":"digest","id":"digest","kind":"param"}],"line":"96","kind":"method"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"comment":"\nExtract the message digest as a list of bytes without closing [this].\n","name":"digest","id":"digest","line":"33","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"_isClosed","isPrivate":true,"id":"_isClosed","line":"15","kind":"variable"},{"ref":{"refId":"crypto/Hash","name":"Hash"},"name":"_hash","isPrivate":true,"id":"_hash","line":"111","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"name":"_key","isPrivate":true,"id":"_key","line":"112","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"name":"_message","isPrivate":true,"id":"_message","line":"113","kind":"variable"},{"comment":"\nCreate an [HMAC] object from a [Hash] and a key.\n","name":"HMAC","id":"HMAC2()","children":[{"initializedField":{"refId":"crypto/HMAC/_hash","name":"_hash"},"ref":{"refId":"crypto/Hash","name":"Hash"},"name":"_hash","isPrivate":true,"id":"_hash","kind":"param"},{"initializedField":{"refId":"crypto/HMAC/_key","name":"_key"},"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"name":"_key","isPrivate":true,"id":"_key","kind":"param"}],"line":"20","kind":"constructor"}],"line":"14","kind":"class"},{"isAbstract":true,"interfaces":[{"refId":"crypto/Hash","name":"Hash"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"uri":"pkg/crypto/lib/src/hash_utils.dart","name":"_HashBase","isPrivate":true,"id":"_HashBase","children":[{"name":"add","id":"add1()","children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"name":"data","id":"data","kind":"param"}],"line":"34","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"name":"close","id":"close0()","line":"45","kind":"method"},{"name":"newInstance","id":"newInstance0()","line":"62","kind":"method"},{"name":"_updateHash","isPrivate":true,"id":"_updateHash1()","children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"name":"m","id":"m","kind":"param"}],"line":"65","kind":"method"},{"name":"_add32","isPrivate":true,"id":"_add322()","children":[{"name":"x","id":"x","kind":"param"},{"name":"y","id":"y","kind":"param"}],"line":"68","kind":"method"},{"name":"_roundUp","isPrivate":true,"id":"_roundUp2()","children":[{"name":"val","id":"val","kind":"param"},{"name":"n","id":"n","kind":"param"}],"line":"69","kind":"method"},{"name":"_resultAsBytes","isPrivate":true,"id":"_resultAsBytes0()","line":"72","kind":"method"},{"name":"_bytesToChunk","isPrivate":true,"id":"_bytesToChunk2()","children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"name":"data","id":"data","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"dataIndex","id":"dataIndex","kind":"param"}],"line":"81","kind":"method"},{"name":"_wordToBytes","isPrivate":true,"id":"_wordToBytes1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"word","id":"word","kind":"param"}],"line":"99","kind":"method"},{"name":"_iterate","isPrivate":true,"id":"_iterate0()","line":"110","kind":"method"},{"name":"_finalizeData","isPrivate":true,"id":"_finalizeData0()","line":"125","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"blockSize","id":"blockSize","line":"57","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"name":"_chunkSizeInWords","isPrivate":true,"id":"_chunkSizeInWords","line":"146","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"name":"_digestSizeInWords","isPrivate":true,"id":"_digestSizeInWords","line":"147","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"isFinal":true,"name":"_bigEndianWords","isPrivate":true,"id":"_bigEndianWords","line":"148","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"_lengthInBytes","isPrivate":true,"id":"_lengthInBytes","line":"149","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"name":"_pendingData","isPrivate":true,"id":"_pendingData","line":"150","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"name":"_currentChunk","isPrivate":true,"id":"_currentChunk","line":"151","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"name":"_h","isPrivate":true,"id":"_h","line":"152","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"_digestCalled","isPrivate":true,"id":"_digestCalled","line":"153","kind":"variable"},{"name":"_HashBase","id":"_HashBase3()","children":[{"initializedField":{"refId":"crypto/_HashBase/_chunkSizeInWords","name":"_chunkSizeInWords"},"ref":{"refId":"dart.core/int","name":"int"},"name":"_chunkSizeInWords","isPrivate":true,"id":"_chunkSizeInWords","kind":"param"},{"initializedField":{"refId":"crypto/_HashBase/_digestSizeInWords","name":"_digestSizeInWords"},"ref":{"refId":"dart.core/int","name":"int"},"name":"_digestSizeInWords","isPrivate":true,"id":"_digestSizeInWords","line":"26","kind":"param"},{"initializedField":{"refId":"crypto/_HashBase/_bigEndianWords","name":"_bigEndianWords"},"ref":{"refId":"dart.core/bool","name":"bool"},"name":"_bigEndianWords","isPrivate":true,"id":"_bigEndianWords","line":"27","kind":"param"}],"line":"25","kind":"constructor"}],"line":"24","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"uri":"pkg/crypto/lib/src/crypto_utils.dart","name":"_CryptoUtils","isPrivate":true,"id":"_CryptoUtils","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"isStatic":true,"name":"bytesToHex","id":"bytesToHex1()","children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"name":"bytes","id":"bytes","kind":"param"}],"line":"8","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"isStatic":true,"name":"bytesToBase64","id":"bytesToBase643()","children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"name":"bytes","id":"bytes","kind":"param"},{"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"false","name":"urlSafe","id":"urlSafe","line":"51","kind":"param"},{"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"false","name":"addLineSeparator","id":"addLineSeparator","line":"52","kind":"param"}],"line":"50","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"isStatic":true,"name":"base64StringToBytes","id":"base64StringToBytes1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"input","id":"input","kind":"param"}],"line":"107","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"PAD","id":"PAD","line":"16","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"CR","id":"CR","line":"17","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"LF","id":"LF","line":"18","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"LINE_LENGTH","id":"LINE_LENGTH","line":"19","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isStatic":true,"name":"_encodeTable","isPrivate":true,"id":"_encodeTable","line":"21","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isStatic":true,"name":"_encodeTableUrlSafe","isPrivate":true,"id":"_encodeTableUrlSafe","line":"24","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"isStatic":true,"name":"_decodeTable","isPrivate":true,"id":"_decodeTable","line":"32","kind":"variable"}],"line":"7","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nUtility methods for working with message digests.\n","name":"CryptoUtils","id":"CryptoUtils","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"\nConvert a list of bytes (for example a message digest) into a hex\nstring.\n","name":"bytesToHex","id":"bytesToHex1()","children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"name":"bytes","id":"bytes","kind":"param"}],"line":"64","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"\nConverts a list of bytes into a Base 64 encoded string.\n\nThe list can be any list of integers in the range 0..255,\nfor example a message digest.\n\nIf [addLineSeparator] is true, the resulting string will  be\nbroken into lines of 76 characters, separated by \"\\r\\n\".\n\nIf [urlSafe] is true, the result is URL and filename safe.\n\nBased on [RFC 4648](http://tools.ietf.org/html/rfc4648)\n\n","name":"bytesToBase64","id":"bytesToBase643()","children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"name":"bytes","id":"bytes","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"false","name":"urlSafe","id":"urlSafe","line":"83","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"false","name":"addLineSeparator","id":"addLineSeparator","line":"84","kind":"param"}],"line":"82","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"isStatic":true,"comment":"\nConverts a Base 64 encoded String into list of bytes.\n\nDecoder ignores \"\\r\\n\" sequences from input.\n\nAccepts both URL safe and unsafe Base 64 encoded strings.\n\nThrows a FormatException exception if input contains invalid characters.\n\nBased on [RFC 4648](http://tools.ietf.org/html/rfc4648)\n","name":"base64StringToBytes","id":"base64StringToBytes1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"input","id":"input","kind":"param"}],"line":"102","kind":"method"}],"line":"59","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nInterface for cryptographic hash functions.\n\nThe [add] method is used to add data to the hash. The [close] method\nis used to extract the message digest.\n\nOnce the [close] method has been called no more data can be added using the\n[add] method. If [add] is called after the first call to [close] a\nHashException is thrown.\n\nIf multiple instances of a given Hash is needed the [newInstance]\nmethod can provide a new instance.\n","name":"Hash","id":"Hash","children":[{"comment":"\nAdd a list of bytes to the hash computation.\n","name":"add","id":"add1()","children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"name":"data","id":"data","kind":"param"}],"line":"34","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"comment":"\nFinish the hash computation and extract the message digest as\na list of bytes.\n","name":"close","id":"close0()","line":"40","kind":"method"},{"returnType":{"refId":"crypto/Hash","name":"Hash"},"comment":"\nReturns a new instance of this hash function.\n","name":"newInstance","id":"newInstance0()","line":"45","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nInternal block size of the hash in bytes.\n\nThis is exposed for use by the HMAC class which needs to know the\nblock size for the [Hash] it is using.\n","name":"blockSize","id":"blockSize","line":"53","kind":"property"}],"line":"30","kind":"class"}],"line":"5","kind":"library"}