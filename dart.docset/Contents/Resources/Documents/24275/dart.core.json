{"dependencies":[{"uri":"sdk/lib/collection/collection.dart","name":"dart:collection","id":"dart.collection","children":[{"isAbstract":true,"interfaces":[{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/IterableBase/E","name":"E"}],"name":"Iterable"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nBase class for implementing [Iterable].\n\nThis class implements all methods of [Iterable] except [Iterable.iterator]\nin terms of `iterator`.\n","uri":"sdk/lib/collection/iterable.dart","name":"IterableBase","id":"IterableBase","children":[{"returnType":{"refId":"dart.core/Iterable","name":"Iterable"},"name":"map","id":"map1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"uri":"sdk/lib/collection/iterable.dart","name":"element","id":"element","line":"207","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"207","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/IterableBase/E","name":"E"}],"name":"Iterable"},"name":"where","id":"where1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"uri":"sdk/lib/collection/iterable.dart","name":"element","id":"element","line":"209","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"209","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","name":"Iterable"},"name":"expand","id":"expand1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"returnType":{"refId":"dart.core/Iterable","name":"Iterable"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"uri":"sdk/lib/collection/iterable.dart","name":"element","id":"element","line":"211","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"211","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"contains","id":"contains1()","children":[{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"name":"element","id":"element","kind":"param"}],"line":"214","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"forEach","id":"forEach1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"returnType":{"refId":"void","name":"void"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"uri":"sdk/lib/collection/iterable.dart","name":"element","id":"element","line":"221","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"221","kind":"method"},{"returnType":{"refId":"dart.collection/IterableBase/E","name":"E"},"name":"reduce","id":"reduce1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"combine","id":"combine","children":[{"returnType":{"refId":"dart.collection/IterableBase/E","name":"E"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"uri":"sdk/lib/collection/iterable.dart","name":"value","id":"value","line":"225","kind":"param"},{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"uri":"sdk/lib/collection/iterable.dart","name":"element","id":"element","line":"225","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"225","kind":"method"},{"name":"fold","id":"fold2()","children":[{"name":"initialValue","id":"initialValue","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"combine","id":"combine","children":[{"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"uri":"sdk/lib/collection/iterable.dart","name":"previousValue","id":"previousValue","line":"238","kind":"param"},{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"uri":"sdk/lib/collection/iterable.dart","name":"element","id":"element","line":"238","kind":"param"}],"line":"13","kind":"functiontype"}],"line":"238","kind":"param"}],"line":"237","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"every","id":"every1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"uri":"sdk/lib/collection/iterable.dart","name":"element","id":"element","line":"244","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"244","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"name":"join","id":"join1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"separator","id":"separator","kind":"param"}],"line":"251","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"any","id":"any1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"uri":"sdk/lib/collection/iterable.dart","name":"element","id":"element","line":"269","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"269","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.collection/IterableBase/E","name":"E"}],"name":"List"},"name":"toList","id":"toList1()","children":[{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"true","name":"growable","id":"growable","kind":"param"}],"line":"276","kind":"method"},{"returnType":{"refId":"dart.core/Set","arguments":[{"refId":"dart.collection/IterableBase/E","name":"E"}],"name":"Set"},"name":"toSet","id":"toSet0()","line":"279","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/IterableBase/E","name":"E"}],"name":"Iterable"},"name":"take","id":"take1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"n","id":"n","kind":"param"}],"line":"294","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/IterableBase/E","name":"E"}],"name":"Iterable"},"name":"takeWhile","id":"takeWhile1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"uri":"sdk/lib/collection/iterable.dart","name":"value","id":"value","line":"298","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"298","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/IterableBase/E","name":"E"}],"name":"Iterable"},"name":"skip","id":"skip1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"n","id":"n","kind":"param"}],"line":"302","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/IterableBase/E","name":"E"}],"name":"Iterable"},"name":"skipWhile","id":"skipWhile1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"uri":"sdk/lib/collection/iterable.dart","name":"value","id":"value","line":"306","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"306","kind":"method"},{"returnType":{"refId":"dart.collection/IterableBase/E","name":"E"},"name":"firstWhere","id":"firstWhere2()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"uri":"sdk/lib/collection/iterable.dart","name":"value","id":"value","line":"338","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"orElse","id":"orElse","children":[{"returnType":{"refId":"dart.collection/IterableBase/E","name":"E"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"338","kind":"method"},{"returnType":{"refId":"dart.collection/IterableBase/E","name":"E"},"name":"lastWhere","id":"lastWhere2()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"uri":"sdk/lib/collection/iterable.dart","name":"value","id":"value","line":"347","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"orElse","id":"orElse","children":[{"returnType":{"refId":"dart.collection/IterableBase/E","name":"E"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"347","kind":"method"},{"returnType":{"refId":"dart.collection/IterableBase/E","name":"E"},"name":"singleWhere","id":"singleWhere1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"uri":"sdk/lib/collection/iterable.dart","name":"value","id":"value","line":"362","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"362","kind":"method"},{"returnType":{"refId":"dart.collection/IterableBase/E","name":"E"},"name":"elementAt","id":"elementAt1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"index","id":"index","kind":"param"}],"line":"379","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"length","id":"length","line":"281","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isEmpty","id":"isEmpty","line":"290","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isNotEmpty","id":"isNotEmpty","line":"292","kind":"property"},{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"name":"first","id":"first","line":"310","kind":"property"},{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"name":"last","id":"last","line":"318","kind":"property"},{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"name":"single","id":"single","line":"330","kind":"property"},{"name":"IterableBase","id":"IterableBase0()","line":"205","kind":"constructor"},{"name":"E","id":"E","kind":"typeparam"}],"line":"202","kind":"class"}],"line":"5","kind":"library"}],"uri":"sdk/lib/core/core.dart","name":"dart:core","id":"dart.core","children":[{"returnType":{"refId":"dart.core/int","name":"int"},"uri":"sdk/lib/core/string.dart","name":"_combineSurrogatePair","isPrivate":true,"id":"_combineSurrogatePair2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"start","id":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"end","id":"end","kind":"param"}],"line":"317","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/string.dart","name":"_isTrailSurrogate","isPrivate":true,"id":"_isTrailSurrogate1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"code","id":"code","kind":"param"}],"line":"314","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/string.dart","name":"_isLeadSurrogate","isPrivate":true,"id":"_isLeadSurrogate1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"code","id":"code","kind":"param"}],"line":"311","kind":"method"},{"returnType":{"refId":"void","name":"void"},"uri":"sdk/lib/core/print.dart","name":"print","id":"print1()","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"name":"object","id":"object","kind":"param"}],"line":"7","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"\nCheck whether two references are to the same object.\n","uri":"sdk/lib/core/identical.dart","name":"identical","id":"identical2()","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"name":"a","id":"a","kind":"param"},{"ref":{"refId":"dart.core/Object","name":"Object"},"name":"b","id":"b","kind":"param"}],"line":"10","kind":"method"},{"interfaces":[{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/_UnmodifiableMap/K","name":"K"},{"refId":"dart.core/_UnmodifiableMap/V","name":"V"}],"name":"Map"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"uri":"sdk/lib/core/uri.dart","name":"_UnmodifiableMap","isPrivate":true,"id":"_UnmodifiableMap","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"containsValue","id":"containsValue1()","children":[{"ref":{"refId":"dart.core/_UnmodifiableMap/V","name":"V"},"name":"value","id":"value","kind":"param"}],"line":"1019","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"containsKey","id":"containsKey1()","children":[{"ref":{"refId":"dart.core/_UnmodifiableMap/K","name":"K"},"name":"key","id":"key","kind":"param"}],"line":"1020","kind":"method"},{"returnType":{"refId":"dart.core/_UnmodifiableMap/V","name":"V"},"isOperator":true,"name":"[]","id":"[]1()","children":[{"ref":{"refId":"dart.core/_UnmodifiableMap/K","name":"K"},"name":"key","id":"key","kind":"param"}],"line":"1021","kind":"method"},{"returnType":{"refId":"void","name":"void"},"isOperator":true,"name":"[]=","id":"[]=2()","children":[{"ref":{"refId":"dart.core/_UnmodifiableMap/K","name":"K"},"name":"key","id":"key","kind":"param"},{"ref":{"refId":"dart.core/_UnmodifiableMap/V","name":"V"},"name":"value","id":"value","kind":"param"}],"line":"1022","kind":"method"},{"returnType":{"refId":"dart.core/_UnmodifiableMap/V","name":"V"},"name":"putIfAbsent","id":"putIfAbsent2()","children":[{"ref":{"refId":"dart.core/_UnmodifiableMap/K","name":"K"},"name":"key","id":"key","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"ifAbsent","id":"ifAbsent","children":[{"returnType":{"refId":"dart.core/_UnmodifiableMap/V","name":"V"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"1025","kind":"method"},{"name":"addAll","id":"addAll1()","children":[{"ref":{"refId":"dart.core/Map","name":"Map"},"name":"other","id":"other","kind":"param"}],"line":"1028","kind":"method"},{"returnType":{"refId":"dart.core/_UnmodifiableMap/V","name":"V"},"name":"remove","id":"remove1()","children":[{"ref":{"refId":"dart.core/_UnmodifiableMap/K","name":"K"},"name":"key","id":"key","kind":"param"}],"line":"1031","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"clear","id":"clear0()","line":"1034","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"forEach","id":"forEach1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"returnType":{"refId":"void","name":"void"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/_UnmodifiableMap/K","name":"K"},"uri":"sdk/lib/core/uri.dart","name":"key","id":"key","line":"1037","kind":"param"},{"ref":{"refId":"dart.core/_UnmodifiableMap/V","name":"V"},"uri":"sdk/lib/core/uri.dart","name":"value","id":"value","line":"1037","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"1037","kind":"method"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/_UnmodifiableMap/K","name":"K"}],"name":"Iterable"},"name":"keys","id":"keys","line":"1038","kind":"property"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/_UnmodifiableMap/V","name":"V"}],"name":"Iterable"},"name":"values","id":"values","line":"1039","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"length","id":"length","line":"1040","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isEmpty","id":"isEmpty","line":"1041","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isNotEmpty","id":"isNotEmpty","line":"1042","kind":"property"},{"ref":{"refId":"dart.core/Map","name":"Map"},"isFinal":true,"name":"_map","isPrivate":true,"id":"_map","line":"1016","kind":"variable"},{"name":"_UnmodifiableMap","id":"_UnmodifiableMap1()","children":[{"initializedField":{"refId":"dart.core/_UnmodifiableMap/_map","name":"_map"},"ref":{"refId":"dart.core/Map","name":"Map"},"name":"_map","isPrivate":true,"id":"_map","kind":"param"}],"line":"1017","kind":"constructor"},{"name":"K","id":"K","kind":"typeparam"},{"name":"V","id":"V","kind":"typeparam"}],"line":"1015","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nA parsed URI, as specified by RFC-3986, http://tools.ietf.org/html/rfc3986.\n","uri":"sdk/lib/core/uri.dart","name":"Uri","id":"Uri","children":[{"returnType":{"refId":"dart.core/Uri","name":"Uri"},"isStatic":true,"comment":"\nCreates a new URI object by parsing a URI string.\n","name":"parse","id":"parse1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"uri","id":"uri","kind":"param"}],"line":"98","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"isStatic":true,"name":"_makeScheme","isPrivate":true,"id":"_makeScheme1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"scheme","id":"scheme","kind":"param"}],"line":"223","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"name":"_makePath","isPrivate":true,"id":"_makePath2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"name":"pathSegments","id":"pathSegments","kind":"param"}],"line":"250","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"isStatic":true,"name":"_makeQuery","isPrivate":true,"id":"_makeQuery2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"query","id":"query","kind":"param"},{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"dart.core/String","name":"String"}],"name":"Map"},"name":"queryParameters","id":"queryParameters","kind":"param"}],"line":"268","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"isStatic":true,"name":"_makeFragment","isPrivate":true,"id":"_makeFragment1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"fragment","id":"fragment","kind":"param"}],"line":"291","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"isStatic":true,"name":"_normalize","isPrivate":true,"id":"_normalize1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"component","id":"component","kind":"param"}],"line":"296","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"isStatic":true,"name":"_emptyIfNull","isPrivate":true,"id":"_emptyIfNull1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"val","id":"val","kind":"param"}],"line":"399","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"_parseIntOrZero","isPrivate":true,"id":"_parseIntOrZero1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"val","id":"val","kind":"param"}],"line":"401","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"isStatic":true,"name":"_eitherOf","isPrivate":true,"id":"_eitherOf2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"val1","id":"val1","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"name":"val2","id":"val2","kind":"param"}],"line":"409","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"name":"_merge","isPrivate":true,"id":"_merge2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"base","id":"base","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"name":"reference","id":"reference","kind":"param"}],"line":"456","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"_hasDotSegments","isPrivate":true,"id":"_hasDotSegments1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"461","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"name":"_removeDotSegments","isPrivate":true,"id":"_removeDotSegments1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"path","id":"path","kind":"param"}],"line":"467","kind":"method"},{"returnType":{"refId":"dart.core/Uri","name":"Uri"},"name":"resolve","id":"resolve1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"uri","id":"uri","kind":"param"}],"line":"487","kind":"method"},{"returnType":{"refId":"dart.core/Uri","name":"Uri"},"name":"resolveUri","id":"resolveUri1()","children":[{"ref":{"refId":"dart.core/Uri","name":"Uri"},"name":"reference","id":"reference","kind":"param"}],"line":"491","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_writeAuthority","isPrivate":true,"id":"_writeAuthority1()","children":[{"ref":{"refId":"dart.core/StringSink","name":"StringSink"},"name":"ss","id":"ss","kind":"param"}],"line":"569","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"name":"toString","id":"toString0()","line":"579","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"name":"==","id":"==1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"592","kind":"method"},{"returnType":{"refId":"void","name":"void"},"isStatic":true,"name":"_addIfNonEmpty","isPrivate":true,"id":"_addIfNonEmpty4()","children":[{"ref":{"refId":"dart.core/StringBuffer","name":"StringBuffer"},"name":"sb","id":"sb","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"name":"test","id":"test","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"name":"first","id":"first","line":"614","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"name":"second","id":"second","line":"614","kind":"param"}],"line":"613","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"\nEncode the string [component] using percent-encoding to make it\nsafe for literal use as a URI component.\n\nAll characters except uppercase and lowercase letters, digits and\nthe characters `!$&'()*+,;=:@` are percent-encoded. This is the\nset of characters specified in RFC 2396 and the which is\nspecified for the encodeUriComponent in ECMA-262 version 5.1.\n\nWhen manually encoding path segments or query components remember\nto encode each part separately before building the path or query\nstring.\n\nFor encoding the query part consider using\n[encodeQueryComponent].\n\nTo avoid the need for explicitly encoding use the [pathSegments]\nand [queryParameters] optional named arguments when constructing\na [Uri].\n","name":"encodeComponent","id":"encodeComponent1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"component","id":"component","kind":"param"}],"line":"641","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"\nEncode the string [component] according to the HTML 4.01 rules\nfor encoding the posting of a HTML form as a query string\ncomponent.\n\nSpaces will be replaced with plus and all characters except for\nuppercase and lowercase letters, decimal digits and the\ncharacters `-._~`. Note that the set of characters encoded is a\nsuperset of what HTML 4.01 says as it refers to RFC 1738 for\nreserved characters.\n\nWhen manually encoding query components remember to encode each\npart separately before building the query string.\n\nTo avoid the need for explicitly encoding the query use the\n[queryParameters] optional named arguments when constructing a\n[Uri].\n\nSee http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.2 for more\ndetails.\n","name":"encodeQueryComponent","id":"encodeQueryComponent1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"component","id":"component","kind":"param"}],"line":"666","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"\nDecodes the percent-encoding in [encodedComponent].\n\nNote that decoding a URI component might change its meaning as\nsome of the decoded characters could be characters with are\ndelimiters for a given URI componene type. Always split a URI\ncomponent using the delimiters for the component before decoding\nthe individual parts.\n\nFor handling the [path] and [query] components consider using\n[pathSegments] and [queryParameters] to get the separated and\ndecoded component.\n","name":"decodeComponent","id":"decodeComponent1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"encodedComponent","id":"encodedComponent","kind":"param"}],"line":"683","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"isStatic":true,"name":"decodeQueryComponent","id":"decodeQueryComponent1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"encodedComponent","id":"encodedComponent","kind":"param"}],"line":"687","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"\nEncode the string [uri] using percent-encoding to make it\nsafe for literal use as a full URI.\n\nAll characters except uppercase and lowercase letters, digits and\nthe characters `!#$&'()*+,-./:;=?@_~` are percent-encoded. This\nis the set of characters specified in in ECMA-262 version 5.1 for\nthe encodeURI function .\n","name":"encodeFull","id":"encodeFull1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"uri","id":"uri","kind":"param"}],"line":"700","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"\nDecodes the percent-encoding in [uri].\n\nNote that decoding a full URI might change its meaning as some of\nthe decoded characters could be reserved characters. In most\ncases an encoded URI should be parsed into components using\n[Uri.parse] before decoding the separate components.\n","name":"decodeFull","id":"decodeFull1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"uri","id":"uri","kind":"param"}],"line":"712","kind":"method"},{"returnType":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"dart.core/String","name":"String"}],"name":"Map"},"isStatic":true,"comment":"\nReturns the [query] split into a map according to the rules\nspecified for FORM post in the\n[HTML 4.01 specification section 17.13.4]\n(http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.4\n\"HTML 4.01 section 17.13.4\"). Each key and value in the returned\nmap has been decoded. If the [query]\nis the empty string an empty map is returned.\n\nKeys in the query string that have no value are mapped to the\nempty string.\n","name":"splitQueryString","id":"splitQueryString1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"query","id":"query","kind":"param"}],"line":"728","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"\nThis is the internal implementation of JavaScript's encodeURI function.\nIt encodes all characters in the string [text] except for those\nthat appear in [canonicalTable], and returns the escaped string.\n","name":"_uriEncode","isPrivate":true,"id":"_uriEncode3()","children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"name":"canonicalTable","id":"canonicalTable","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"name":"text","id":"text","line":"760","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"false","name":"spaceToPlus","id":"spaceToPlus","line":"761","kind":"param"}],"line":"759","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"\nConvert a byte (2 character hex sequence) in string [s] starting\nat position [pos] to its ordinal value\n","name":"_hexCharPairToByte","isPrivate":true,"id":"_hexCharPairToByte2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"s","id":"s","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"pos","id":"pos","kind":"param"}],"line":"798","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"\nA JavaScript-like decodeURI function. It unescapes the string [text] and\nreturns the unescaped string.\n","name":"_uriDecode","isPrivate":true,"id":"_uriDecode2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"text","id":"text","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"false","name":"plusToSpace","id":"plusToSpace","kind":"param"}],"line":"821","kind":"method"},{"ref":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns the authority component.\n\nThe authority is formatted from the [userInfo], [host] and [port]\nparts.\n\nReturns the empty string if there is no authority component.\n","name":"authority","id":"authority","line":"29","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nReturns the port part of the authority component.\n\nReturns 0 if there is no port in the authority component.\n","name":"port","id":"port","line":"57","kind":"property"},{"ref":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns the path component.\n\nThe returned path is encoded. To get direct access to the decoded\npath use [pathSegments].\n\nReturns the empty string if there is no path component.\n","name":"path","id":"path","line":"67","kind":"property"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"comment":"\nReturns the URI path split into its segments. Each of the\nsegments in the returned list have been decoded. If the path is\nempty the empty list will be returned. A leading slash `/` does\nnot affect the segments returned.\n\nThe returned list is unmodifiable and will throw [UnsupportedError] on any\ncalls that would mutate it.\n","name":"pathSegments","id":"pathSegments","line":"189","kind":"property"},{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"dart.core/String","name":"String"}],"name":"Map"},"comment":"\nReturns the URI query split into a map according to the rules\nspecified for FORM post in the [HTML 4.01 specification section 17.13.4]\n(http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.4\n\"HTML 4.01 section 17.13.4\"). Each key and value in the returned map\nhas been decoded. If there is no query the empty map is returned.\n\nKeys in the query string that have no value are mapped to the\nempty string.\n\nThe returned map is unmodifiable and will throw [UnsupportedError] on any\ncalls that would mutate it.\n","name":"queryParameters","id":"queryParameters","line":"216","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"\nReturns whether the URI is absolute.\n","name":"isAbsolute","id":"isAbsolute","line":"454","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"\nReturns whether the URI has an [authority] component.\n","name":"hasAuthority","id":"hasAuthority","line":"547","kind":"property"},{"ref":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns the origin of the URI in the form scheme://host:port for the\nschemes http and https.\n\nIt is an error if the scheme is not \"http\" or \"https\".\n\nSee: http://www.w3.org/TR/2011/WD-html5-20110405/origin-0.html#origin\n","name":"origin","id":"origin","line":"557","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"hashCode","id":"hashCode","line":"604","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"_port","isPrivate":true,"id":"_port","line":"11","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"name":"_path","isPrivate":true,"id":"_path","line":"12","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"comment":"\nReturns the scheme component.\n\nReturns the empty string if there is no scheme component.\n","name":"scheme","id":"scheme","line":"19","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"comment":"\nReturns the user info part of the authority component.\n\nReturns the empty string if there is no user info in the\nauthority component.\n","name":"userInfo","id":"userInfo","line":"42","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"comment":"\nReturns the host part of the authority component.\n\nReturns the empty string if there is no authority component and\nhence no host.\n","name":"host","id":"host","line":"50","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"comment":"\nReturns the query component. The returned query is encoded. To get\ndirect access to the decoded query use [queryParameters].\n\nReturns the empty string if there is no query component.\n","name":"query","id":"query","line":"75","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"comment":"\nReturns the fragment identifier component.\n\nReturns the empty string if there is no fragment identifier\ncomponent.\n","name":"fragment","id":"fragment","line":"83","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"comment":"\nCache the computed return value of [pathSegements].\n","name":"_pathSegments","isPrivate":true,"id":"_pathSegments","line":"88","kind":"variable"},{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"dart.core/String","name":"String"}],"name":"Map"},"comment":"\nCache the computed return value of [queryParameters].\n","name":"_queryParameters","isPrivate":true,"id":"_queryParameters","line":"93","kind":"variable"},{"ref":{"refId":"dart.core/RegExp","name":"RegExp"},"isFinal":true,"isStatic":true,"name":"_splitRe","isPrivate":true,"id":"_splitRe","line":"416","kind":"variable"},{"isStatic":true,"name":"_COMPONENT_SCHEME","isPrivate":true,"id":"_COMPONENT_SCHEME","line":"442","kind":"variable"},{"isStatic":true,"name":"_COMPONENT_USER_INFO","isPrivate":true,"id":"_COMPONENT_USER_INFO","line":"443","kind":"variable"},{"isStatic":true,"name":"_COMPONENT_HOST","isPrivate":true,"id":"_COMPONENT_HOST","line":"444","kind":"variable"},{"isStatic":true,"name":"_COMPONENT_HOST_IPV6","isPrivate":true,"id":"_COMPONENT_HOST_IPV6","line":"445","kind":"variable"},{"isStatic":true,"name":"_COMPONENT_PORT","isPrivate":true,"id":"_COMPONENT_PORT","line":"446","kind":"variable"},{"isStatic":true,"name":"_COMPONENT_PATH","isPrivate":true,"id":"_COMPONENT_PATH","line":"447","kind":"variable"},{"isStatic":true,"name":"_COMPONENT_QUERY_DATA","isPrivate":true,"id":"_COMPONENT_QUERY_DATA","line":"448","kind":"variable"},{"isStatic":true,"name":"_COMPONENT_FRAGMENT","isPrivate":true,"id":"_COMPONENT_FRAGMENT","line":"449","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"_PERCENT","isPrivate":true,"id":"_PERCENT","line":"743","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"_PLUS","isPrivate":true,"id":"_PLUS","line":"744","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"_SLASH","isPrivate":true,"id":"_SLASH","line":"745","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"_ZERO","isPrivate":true,"id":"_ZERO","line":"746","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"_NINE","isPrivate":true,"id":"_NINE","line":"747","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"_COLON","isPrivate":true,"id":"_COLON","line":"748","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"_UPPER_CASE_A","isPrivate":true,"id":"_UPPER_CASE_A","line":"749","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"_UPPER_CASE_F","isPrivate":true,"id":"_UPPER_CASE_F","line":"750","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"_LOWER_CASE_A","isPrivate":true,"id":"_LOWER_CASE_A","line":"751","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"_LOWER_CASE_F","isPrivate":true,"id":"_LOWER_CASE_F","line":"752","kind":"variable"},{"isStatic":true,"name":"_unreservedTable","isPrivate":true,"id":"_unreservedTable","line":"855","kind":"variable"},{"isStatic":true,"name":"_unreserved2396Table","isPrivate":true,"id":"_unreserved2396Table","line":"874","kind":"variable"},{"isStatic":true,"name":"_encodeFullTable","isPrivate":true,"id":"_encodeFullTable","line":"893","kind":"variable"},{"isStatic":true,"name":"_schemeTable","isPrivate":true,"id":"_schemeTable","line":"912","kind":"variable"},{"isStatic":true,"name":"_schemeLowerTable","isPrivate":true,"id":"_schemeLowerTable","line":"931","kind":"variable"},{"isStatic":true,"name":"_subDelimitersTable","isPrivate":true,"id":"_subDelimitersTable","line":"954","kind":"variable"},{"isStatic":true,"name":"_pathCharTable","isPrivate":true,"id":"_pathCharTable","line":"975","kind":"variable"},{"isStatic":true,"name":"_queryCharTable","isPrivate":true,"id":"_queryCharTable","line":"996","kind":"variable"},{"name":"Uri._fromMatch","isPrivate":true,"id":"Uri._fromMatch1()","children":[{"ref":{"refId":"dart.core/Match","name":"Match"},"name":"m","id":"m","kind":"param"}],"line":"100","kind":"constructor"},{"comment":"\nCreate a new URI from its components.\n\nEach component is set through a named argument. Any number of\ncomponents can be provided. The default value for the components\nnot provided is the empry string, except for [port] which has a\ndefault value of 0. The [path] and [query] components can be set\nusing two different named arguments.\n\nThe scheme component is set through [scheme]. The scheme is\nnormalized to all lowercase letters.\n\nThe user info part of the authority component is set through\n[userInfo].\n\nThe host part of the authority component is set through\n[host]. The host can either be a hostname, a IPv4 address or an\nIPv6 address, contained in '[' and ']'. If the host contains a\n':' character, the '[' and ']' are added if not already provided.\n\nThe port part of the authority component is set through\n[port]. The port is normalized for scheme http and https where\nport 80 and port 443 respectively is set.\n\nThe path component is set through either [path] or\n[pathSegments]. When [path] is used, the provided string is\nexpected to be fully percent-encoded, and is used in its literal\nform. When [pathSegments] is used, each of the provided segments\nis percent-encoded and joined using the forward slash\nseparator. The percent-encoding of the path segments encodes all\ncharacters except for the unreserved characters and the following\nlist of characters: `!$&'()*+,;=:@`. If the other components\ncalls for an absolute path a leading slash `/` is prepended if\nnot already there.\n\nThe query component is set through either [query] or\n[queryParameters]. When [query] is used the provided string is\nexpected to be fully percent-encoded and is used in its literal\nform. When [queryParameters] is used the query is built from the\nprovided map. Each key and value in the map is percent-encoded\nand joined using equal and ampersand characters. The\npercent-encoding of the keys and values encodes all characters\nexcept for the unreserved characters.\n\nThe fragment component is set through [fragment].\n","name":"Uri","id":"Uri9()","children":[{"isNamed":true,"isOptional":true,"name":"scheme","id":"scheme","kind":"param"},{"initializedField":{"refId":"dart.core/Uri/userInfo","name":"userInfo"},"isNamed":true,"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"defaultValue":"\"\"","name":"userInfo","id":"userInfo","line":"157","kind":"param"},{"initializedField":{"refId":"dart.core/Uri/host","name":"host"},"isNamed":true,"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"defaultValue":"\"\"","name":"host","id":"host","line":"158","kind":"param"},{"isNamed":true,"isOptional":true,"defaultValue":"0","name":"port","id":"port","line":"159","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"path","id":"path","line":"160","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"isOptional":true,"name":"pathSegments","id":"pathSegments","line":"161","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"query","id":"query","line":"162","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"dart.core/String","name":"String"}],"name":"Map"},"isOptional":true,"name":"queryParameters","id":"queryParameters","line":"163","kind":"param"},{"isNamed":true,"isOptional":true,"defaultValue":"\"\"","name":"fragment","id":"fragment","line":"164","kind":"param"}],"line":"156","kind":"constructor"}],"line":"10","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nRuntime representation of a type.\n","uri":"sdk/lib/core/type.dart","name":"Type","id":"Type","line":"10","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"Opaque name used by mirrors, invocations and [Function.apply].","uri":"sdk/lib/core/symbol.dart","name":"Symbol","id":"Symbol","children":[{"returnType":{"refId":"dart.core/Symbol","name":"Symbol"},"comment":"\nConstructs a new Symbol.\n\nAn [ArgumentError] is thrown if [name] starts with an underscore, or if\n[name] is not a [String].  An [ArgumentError] is thrown if [name] is not\nan empty string and is not a valid qualified identifier optionally\nfollowed by [:'=':].\n\nThe following text is non-normative:\n\nCreating non-const Symbol instances may result in larger output.  If\npossible, use [MirrorsUsed] in \"dart:mirrors\" to specify which names might\nbe passed to this constructor.\n","name":"Symbol","id":"Symbol1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"}],"line":"23","kind":"constructor"}],"line":"8","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"uri":"sdk/lib/core/string_sink.dart","name":"StringSink","id":"StringSink","children":[{"returnType":{"refId":"void","name":"void"},"comment":"\nConverts [obj] to a String by invoking `toString` and adds the result to\n`this`.\n","name":"write","id":"write1()","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"name":"obj","id":"obj","kind":"param"}],"line":"13","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nIterates over the given [objects] and [write]s them in sequence.\n","name":"writeAll","id":"writeAll2()","children":[{"ref":{"refId":"dart.core/Iterable","name":"Iterable"},"name":"objects","id":"objects","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"defaultValue":"\"\"","name":"separator","id":"separator","kind":"param"}],"line":"18","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nConverts [obj] to a String by invoking `toString` and adds the result to\n`this`. Then adds a new line.\n","name":"writeln","id":"writeln1()","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"isOptional":true,"defaultValue":"\"\"","name":"obj","id":"obj","kind":"param"}],"line":"24","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nWrites the [charCode] to `this`.\n\nThis method is equivalent to `write(new String.fromCharCode(charCode))`.\n","name":"writeCharCode","id":"writeCharCode1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"charCode","id":"charCode","kind":"param"}],"line":"31","kind":"method"}],"line":"7","kind":"class"},{"interfaces":[{"refId":"dart.core/StringSink","name":"StringSink"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nThe StringBuffer class is useful for concatenating strings\nefficiently. Only on a call to [toString] are the strings\nconcatenated to a single String.\n","uri":"sdk/lib/core/string_buffer.dart","name":"StringBuffer","id":"StringBuffer","children":[{"returnType":{"refId":"void","name":"void"},"comment":"Adds the contents of [obj], converted to a string, to the buffer.","name":"write","id":"write1()","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"name":"obj","id":"obj","kind":"param"}],"line":"33","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Adds the string representation of [charCode] to the buffer.","name":"writeCharCode","id":"writeCharCode1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"charCode","id":"charCode","kind":"param"}],"line":"36","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"writeAll","id":"writeAll2()","children":[{"ref":{"refId":"dart.core/Iterable","name":"Iterable"},"name":"objects","id":"objects","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"defaultValue":"\"\"","name":"separator","id":"separator","kind":"param"}],"line":"38","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"writeln","id":"writeln1()","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"isOptional":true,"defaultValue":"\"\"","name":"obj","id":"obj","kind":"param"}],"line":"54","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nClears the string buffer.\n","name":"clear","id":"clear0()","line":"62","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Returns the contents of buffer as a concatenated string.","name":"toString","id":"toString0()","line":"65","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nReturns the length of the content that has been accumulated so far.\nThis is a constant-time operation.\n","name":"length","id":"length","line":"21","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Returns whether the buffer is empty. This is a constant-time operation. ","name":"isEmpty","id":"isEmpty","line":"24","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"\nReturns whether the buffer is not empty. This is a constant-time\noperation.\n","name":"isNotEmpty","id":"isNotEmpty","line":"30","kind":"property"},{"comment":"Creates the string buffer with an initial content. ","name":"StringBuffer","id":"StringBuffer1()","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"isOptional":true,"defaultValue":"\"\"","name":"content","id":"content","kind":"param"}],"line":"15","kind":"constructor"}],"line":"12","kind":"class"},{"interfaces":[{"refId":"dart.core/BidirectionalIterator","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"BidirectionalIterator"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"[Iterator] for reading runes (integer Unicode code points) out of a Dart\nstring.\n","uri":"sdk/lib/core/string.dart","name":"RuneIterator","id":"RuneIterator","children":[{"returnType":{"refId":"void","name":"void"},"comment":"Throw an error if the index is in the middle of a surrogate pair. ","name":"_checkSplitSurrogate","isPrivate":true,"id":"_checkSplitSurrogate1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"index","id":"index","kind":"param"}],"line":"363","kind":"method"},{"returnType":{"refId":"void","name":"void"},"isSetter":true,"comment":"\nResets the iterator to the rune at the specified index of the string.\n\nSetting a negative [rawIndex], or one greater than or equal to\n[:string.length:],\nis an error. So is setting it in the middle of a surrogate pair.\n\nSetting the position to the end of then string will set [current] to null.\n","name":"rawIndex=","id":"rawIndex=1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"rawIndex","id":"rawIndex","kind":"param"}],"line":"387","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nResets the iterator to the given index into the string.\n\nAfter this the [current] value is unset.\nYou must call [moveNext] make the rune at the position current,\nor [movePrevious] for the last rune before the position.\n\nSetting a negative [rawIndex], or one greater than [:string.length:],\nis an error. So is setting it in the middle of a surrogate pair.\n","name":"reset","id":"reset1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"0","name":"rawIndex","id":"rawIndex","kind":"param"}],"line":"405","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"moveNext","id":"moveNext0()","line":"440","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"movePrevious","id":"movePrevious0()","line":"461","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nReturns the starting position of the current rune in the string.\n\nReturns null if the [current] rune is null.\n","name":"rawIndex","id":"rawIndex","line":"376","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"The rune (integer Unicode code point) starting at the current position in\n the string.\n","name":"current","id":"current","line":"417","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nThe number of code units comprising the current rune.\n\nReturns zero if there is no current rune ([current] is null).\n","name":"currentSize","id":"currentSize","line":"424","kind":"property"},{"ref":{"refId":"dart.core/String","name":"String"},"comment":"\nA string containing the current rune.\n\nFor runes outside the basic multilingual plane, this will be\na String of length 2, containing two code units.\n\nReturns null if [current] is null.\n","name":"currentAsString","id":"currentAsString","line":"434","kind":"property"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"comment":"String being iterated. ","name":"string","id":"string","line":"326","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"Position before the current code point. ","name":"_position","isPrivate":true,"id":"_position","line":"328","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"Position after the current code point. ","name":"_nextPosition","isPrivate":true,"id":"_nextPosition","line":"330","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nCurrent code point.\n\nIf the iterator has hit either end, the [_currentCodePoint] is null\nand [: _position == _nextPosition :].\n","name":"_currentCodePoint","isPrivate":true,"id":"_currentCodePoint","line":"337","kind":"variable"},{"comment":"Create an iterator positioned at the beginning of the string. ","name":"RuneIterator","id":"RuneIterator1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"string","id":"string","kind":"param"}],"line":"340","kind":"constructor"},{"comment":"\nCreate an iterator positioned before the [index]th code unit of the string.\n\nWhen created, there is no [current] value.\nA [moveNext] will use the rune starting at [index] the current value,\nand a [movePrevious] will use the rune ending just before [index] as the\nthe current value.\n\nIt is an error if the [index] position is in the middle of a surrogate\npair.\n","name":"RuneIterator.at","id":"RuneIterator.at2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"string","id":"string","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"index","id":"index","kind":"param"}],"line":"354","kind":"constructor"}],"line":"324","kind":"class"},{"superclass":{"refId":"dart.collection/IterableBase","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"IterableBase"},"comment":"\nThe runes (integer Unicode code points) of a [String].\n","uri":"sdk/lib/core/string.dart","name":"Runes","id":"Runes","children":[{"ref":{"refId":"dart.core/RuneIterator","name":"RuneIterator"},"name":"iterator","id":"iterator","line":"291","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"last","id":"last","line":"293","kind":"property"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"name":"string","id":"string","line":"288","kind":"variable"},{"name":"Runes","id":"Runes1()","children":[{"initializedField":{"refId":"dart.core/Runes/string","name":"string"},"ref":{"refId":"dart.core/String","name":"String"},"name":"string","id":"string","kind":"param"}],"line":"289","kind":"constructor"}],"line":"287","kind":"class"},{"isAbstract":true,"interfaces":[{"refId":"dart.core/Pattern","name":"Pattern"},{"refId":"dart.core/Comparable","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"Comparable"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nThe String class represents sequences of characters. Strings are\nimmutable. A string is represented by a sequence of Unicode UTF-16\ncode units accessible through the [codeUnitAt] or the\n[codeUnits] members. Their string representation is accessible through\nthe index-operator.\n\nThe characters of a string are encoded in UTF-16. Decoding UTF-16, which\ncombines surrogate pairs, yields Unicode code points. Following a similar\nterminology to Go we use the name \"rune\" for an integer representing a\nUnicode code point. The runes of a string are accessible through the [runes]\ngetter.\n","uri":"sdk/lib/core/string.dart","name":"String","id":"String","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"isOperator":true,"comment":"\nGets the character (as a single-code-unit [String]) at the given [index].\n\nThe returned string represents exactly one UTF-16 code unit which may be\nhalf of a surrogate pair. For example the Unicode character for a\nmusical G-clef (\"𝄞\") with rune value 0x1D11E consists of a UTF-16 surrogate\npair: `0xD834` and `0xDD1E`. Using the index-operator on this string yields\na String with half of a surrogate pair:\n\n    var clef = \"\\u{1D11E}\";\n    clef.length;  // => 2\n    clef.runes.first == 0x1D11E;  // => true\n    clef.runes.length;  // => 1\n    clef.codeUnitAt(0);  // => 0xD834\n    clef.codeUnitAt(1);  // => 0xDD1E\n    // The following strings are halves of a UTF-16 surrogate pair and\n    // thus invalid UTF-16 strings:\n    clef[0];  // => a string of length 1 with code-unit value 0xD834.\n    clef[1];  // => a string of length 1 with code-unit value 0xDD1E.\n\nThis method is equivalent to\n`new String.fromCharCode(this.codeUnitAt(index))`.\n","name":"[]","id":"[]1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"index","id":"index","kind":"param"}],"line":"68","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"comment":"\nReturns the 16-bit UTF-16 code unit at the given [index].\n","name":"codeUnitAt","id":"codeUnitAt1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"index","id":"index","kind":"param"}],"line":"73","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"comment":"\nReturns whether the two strings are equal.\n\nThis method compares each individual code unit of the strings.\nEquivalently (for strings that are well-formed UTF-16) it compares each\nindividual rune (code point).  It does not check for Unicode equivalence.\nFor example the two following strings both represent the string \"Amélie\"\nbut, due to their different encoding will not return equal.\n\n    \"Am\\xe9lie\"\n    \"Ame\\u{301}lie\"\n\nIn the first string the \"é\" is encoded as a single unicode code unit (also\na single rune), whereas the second string encodes it as \"e\" with the\ncombining accent character \"◌́\".\n","name":"==","id":"==1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"100","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"\nReturns whether this string ends with [other].\n","name":"endsWith","id":"endsWith1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"other","id":"other","kind":"param"}],"line":"105","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"\nReturns whether this string starts with a match of [pattern].\n","name":"startsWith","id":"startsWith1()","children":[{"ref":{"refId":"dart.core/Pattern","name":"Pattern"},"name":"pattern","id":"pattern","kind":"param"}],"line":"110","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"comment":"\nReturns the first position of a match of [pattern] in this string,\nstarting at [start] (inclusive).\n\nReturns -1 if a match could not be found.\n\nIt is an error if start is negative or greater than [length].\n","name":"indexOf","id":"indexOf2()","children":[{"ref":{"refId":"dart.core/Pattern","name":"Pattern"},"name":"pattern","id":"pattern","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"name":"start","id":"start","kind":"param"}],"line":"120","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"comment":"\nReturns the last position of a match [pattern] in this string, searching\nbackward starting at [start] (inclusive).\n\nReturns -1 if [other] could not be found.\n\nIt is an error if start is negative or greater than [length].\n","name":"lastIndexOf","id":"lastIndexOf2()","children":[{"ref":{"refId":"dart.core/Pattern","name":"Pattern"},"name":"pattern","id":"pattern","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"name":"start","id":"start","kind":"param"}],"line":"130","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"isOperator":true,"comment":"\nCreates a new string by concatenating this string with [other].\n\nA sequence of strings can be concatenated by using [Iterable.join]:\n\n    var strings = ['foo', 'bar', 'geez'];\n    var concatenated = strings.join();\n","name":"+","id":"+1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"other","id":"other","kind":"param"}],"line":"150","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns a substring of this string in the given range.\n[startIndex] is inclusive and [endIndex] is exclusive.\n","name":"substring","id":"substring2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"startIndex","id":"startIndex","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"name":"endIndex","id":"endIndex","kind":"param"}],"line":"156","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nRemoves leading and trailing whitespace from a string.\n\nIf the string contains leading or trailing whitespace a new string with no\nleading and no trailing whitespace is returned. Otherwise, the string\nitself is returned.\n\nWhitespace is defined by the Unicode White_Space property (as defined in\nversion 6.2 or later) and the BOM character, 0xFEFF.\n\nHere is the list of trimmed characters (following version 6.2):\n\n    0009..000D    ; White_Space # Cc   <control-0009>..<control-000D>\n    0020          ; White_Space # Zs   SPACE\n    0085          ; White_Space # Cc   <control-0085>\n    00A0          ; White_Space # Zs   NO-BREAK SPACE\n    1680          ; White_Space # Zs   OGHAM SPACE MARK\n    180E          ; White_Space # Zs   MONGOLIAN VOWEL SEPARATOR\n    2000..200A    ; White_Space # Zs   EN QUAD..HAIR SPACE\n    2028          ; White_Space # Zl   LINE SEPARATOR\n    2029          ; White_Space # Zp   PARAGRAPH SEPARATOR\n    202F          ; White_Space # Zs   NARROW NO-BREAK SPACE\n    205F          ; White_Space # Zs   MEDIUM MATHEMATICAL SPACE\n    3000          ; White_Space # Zs   IDEOGRAPHIC SPACE\n\n    FEFF          ; BOM                ZERO WIDTH NO_BREAK SPACE\n","name":"trim","id":"trim0()","line":"185","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"\nReturns whether this string contains a match of [other].\n\nIf [startIndex] is provided, only matches at or after that index\nare considered.\n\nIt is an error if [startIndex] is negative or greater than [length].\n","name":"contains","id":"contains2()","children":[{"ref":{"refId":"dart.core/Pattern","name":"Pattern"},"name":"other","id":"other","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"0","name":"startIndex","id":"startIndex","kind":"param"}],"line":"195","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns a new string where the first occurence of [from] in this string\nis replaced with [to].\n","name":"replaceFirst","id":"replaceFirst2()","children":[{"ref":{"refId":"dart.core/Pattern","name":"Pattern"},"name":"from","id":"from","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"name":"to","id":"to","kind":"param"}],"line":"201","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns a new string where all occurences of [from] in this string\nare replaced with [replace].\n","name":"replaceAll","id":"replaceAll2()","children":[{"ref":{"refId":"dart.core/Pattern","name":"Pattern"},"name":"from","id":"from","kind":"param"},{"name":"replace","id":"replace","kind":"param"}],"line":"207","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns a new string where all occurences of [from] in this string\nare replaced with a [String] depending on [replace].\n\n\nThe [replace] function is called with the [Match] generated\nby the pattern, and its result is used as replacement.\n","name":"replaceAllMapped","id":"replaceAllMapped2()","children":[{"ref":{"refId":"dart.core/Pattern","name":"Pattern"},"name":"from","id":"from","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"replace","id":"replace","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Match","name":"Match"},"uri":"sdk/lib/core/string.dart","name":"match","id":"match","line":"217","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"217","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"comment":"\nSplits the string around matches of [pattern]. Returns\na list of substrings.\n\nSplitting with an empty string pattern (`\"\"`) splits at UTF-16 code unit\nboundaries and not at rune boundaries. The following two expressions\nare hence equivalent:\n\n    string.split(\"\")\n    string.codeUnits.map((unit) => new String.fromCharCode(unit))\n\nUnless it guaranteed that the string is in the basic multilingual plane\n(meaning that each code unit represents a rune) it is often better to\nmap the runes instead:\n\n    string.runes.map((rune) => new String.fromCharCode(rune))\n","name":"split","id":"split1()","children":[{"ref":{"refId":"dart.core/Pattern","name":"Pattern"},"name":"pattern","id":"pattern","kind":"param"}],"line":"236","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nSplits the string on the [pattern], then converts each part and each match.\n\nThe pattern is used to split the string into parts and separating matches.\n\nEach match is converted to a string by calling [onMatch]. If [onMatch]\nis omitted, the matched string is used.\n\nEach non-matched part is converted by a call to [onNonMatch]. If\n[onNonMatch] is omitted, the non-matching part is used.\n\nThen all the converted parts are combined into the resulting string.\n","name":"splitMapJoin","id":"splitMapJoin3()","children":[{"ref":{"refId":"dart.core/Pattern","name":"Pattern"},"name":"pattern","id":"pattern","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"onMatch","id":"onMatch","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Match","name":"Match"},"uri":"sdk/lib/core/string.dart","name":"match","id":"match","line":"252","kind":"param"}],"line":"13","kind":"functiontype"}],"line":"252","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"onNonMatch","id":"onNonMatch","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/String","name":"String"},"uri":"sdk/lib/core/string.dart","name":"nonMatch","id":"nonMatch","line":"253","kind":"param"}],"line":"13","kind":"functiontype"}],"line":"253","kind":"param"}],"line":"251","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nIf this string is not already all lower case, returns a new string\nwhere all characters are made lower case. Returns [:this:] otherwise.\n","name":"toLowerCase","id":"toLowerCase0()","line":"274","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nIf this string is not already all upper case, returns a new string\nwhere all characters are made upper case. Returns [:this:] otherwise.\n","name":"toUpperCase","id":"toUpperCase0()","line":"281","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nThe length of the string.\n\nReturns the number of UTF-16 code units in this string. The number\nof [runes] might be less, if the string contains characters outside\nthe basic multilingual plane (plane 0).\n","name":"length","id":"length","line":"82","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"\nReturns whether this string is empty.\n","name":"isEmpty","id":"isEmpty","line":"135","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"\nReturns whether this string is not empty.\n","name":"isNotEmpty","id":"isNotEmpty","line":"140","kind":"property"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"comment":"\nReturns an unmodifiable list of the UTF-16 code units of this string.\n","name":"codeUnits","id":"codeUnits","line":"258","kind":"property"},{"ref":{"refId":"dart.core/Runes","name":"Runes"},"comment":"\nReturns an iterable of Unicode code-points of this string.\n\nIf the string contains surrogate pairs, they will be combined and returned\nas one integer by this iterator. Unmatched surrogate halves are treated\nlike valid 16-bit code-units.\n","name":"runes","id":"runes","line":"267","kind":"property"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nAllocates a new String for the specified [charCodes].\n\nThe [charCodes] can be UTF-16 code units or runes. If a char-code value is\n16-bit it is copied verbatim. If it is greater than 16 bits it is\ndecomposed into a surrogate pair.\n","name":"String.fromCharCodes","id":"String.fromCharCodes1()","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"Iterable"},"name":"charCodes","id":"charCodes","kind":"param"}],"line":"28","kind":"constructor"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nAllocates a new String for the specified [charCode].\n\nThe new string contains a single code unit if the [charCode] can be\nrepresented by a single UTF-16 code unit. Otherwise the [length] is 2 and\nthe code units form a surrogate pair.\n\nIt is allowed (though generally discouraged) to create a String with only\none half of a surrogate pair.\n","name":"String.fromCharCode","id":"String.fromCharCode1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"charCode","id":"charCode","kind":"param"}],"line":"40","kind":"constructor"}],"line":"20","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nA simple [Stopwatch] interface to measure elapsed time.\n","uri":"sdk/lib/core/stopwatch.dart","name":"Stopwatch","id":"Stopwatch","children":[{"returnType":{"refId":"void","name":"void"},"comment":"\nStarts the [Stopwatch].\n\nThe [elapsed] count is increasing monotonically. If the [Stopwatch] has\nbeen stopped, then calling start again restarts it without resetting the\n[elapsed] count.\n\nIf the [Stopwatch] is currently running, then calling start does nothing.\n","name":"start","id":"start0()","line":"38","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nStops the [Stopwatch].\n\nThe [elapsedTicks] count stops increasing after this call. If the\n[Stopwatch] is currently not running, then calling this method has no\neffect.\n","name":"stop","id":"stop0()","line":"58","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nResets the [elapsed] count to zero.\n\nThis method does not stop or start the [Stopwatch].\n","name":"reset","id":"reset0()","line":"68","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"_frequency","isPrivate":true,"id":"_frequency0()","line":"129","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"_now","isPrivate":true,"id":"_now0()","line":"130","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nReturns the elapsed number of clock ticks since calling [start] while the\n[Stopwatch] is running.\n\nReturns the elapsed number of clock ticks between calling [start] and\ncalling [stop].\n\nReturns 0 if the [Stopwatch] has never been started.\n\nThe elapsed number of clock ticks increases by [frequency] every second.\n","name":"elapsedTicks","id":"elapsedTicks","line":"91","kind":"property"},{"ref":{"refId":"dart.core/Duration","name":"Duration"},"comment":"\nReturns the [elapsedTicks] counter converted to a [Duration].\n","name":"elapsed","id":"elapsed","line":"101","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nReturns the [elapsedTicks] counter converted to microseconds.\n","name":"elapsedMicroseconds","id":"elapsedMicroseconds","line":"108","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nReturns the [elapsedTicks] counter converted to milliseconds.\n","name":"elapsedMilliseconds","id":"elapsedMilliseconds","line":"115","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nReturns the frequency of the elapsed counter in Hz.\n","name":"frequency","id":"frequency","line":"122","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"\nReturns wether the [StopWatch] is currently running.\n","name":"isRunning","id":"isRunning","line":"127","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"_start","isPrivate":true,"id":"_start","line":"16","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"_stop","isPrivate":true,"id":"_stop","line":"17","kind":"variable"},{"comment":"\nCreates a [Stopwatch] in stopped state with a zero elapsed count.\n\nThe following example shows how to start a [Stopwatch]\nimmediately after allocation.\n\n    Stopwatch stopwatch = new Stopwatch()..start();\n","name":"Stopwatch","id":"Stopwatch0()","line":"27","kind":"constructor"}],"line":"10","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nAn interface implemented by all stack trace objects.\n\nA [StackTrace] is intended to convey information to the user about the call\nsequence that triggered an exception.\n\nThese objects are created by the runtime, it is not possible to create\nthem programmatically.\n","uri":"sdk/lib/core/stacktrace.dart","name":"StackTrace","id":"StackTrace","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns a [String] representation of the stack trace.\n\nThe string represents the full stack trace starting from\nthe point where a throw ocurred to the top of the current call sequence.\n\nThe exact format of the string representation is not final.\n","name":"toString","id":"toString0()","line":"25","kind":"method"}],"line":"16","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.collection/IterableBase","arguments":[{"refId":"dart.core/Set/E","name":"E"}],"name":"IterableBase"},"comment":"\nA `Set` is a collection of elements where each element can occur only once.\n\nThat is, for each object of the element type, the object is either considered\nto be in the set, or it is not in the set.\n\nSet implementations may consider some elements indistinguishable. These\nobjects will be treated as being the same for any operation on the set.\n\nThe default `Set` implementation, [HashSet], considers objects\nindistinguishable if they are equal with regard to [Object.operator==].\n\nSets may be either ordered or unordered. [HashSet] is unordered and doesn't\nguarantee anything about the order that elements are accessed in by\niteration. [LinkedHashSet] iterates in the insertion order of its elements.\n","uri":"sdk/lib/core/set.dart","name":"Set","id":"Set","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"\nReturns true if [value] is in the set.\n","name":"contains","id":"contains1()","children":[{"ref":{"refId":"dart.core/Set/E","name":"E"},"name":"value","id":"value","kind":"param"}],"line":"45","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nAdds [value] into the set.\n\nThe method has no effect if [value] is already in the set.\n","name":"add","id":"add1()","children":[{"ref":{"refId":"dart.core/Set/E","name":"E"},"name":"value","id":"value","kind":"param"}],"line":"52","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nAdds all of [elements] to this Set.\n\nEquivalent to adding each element in [elements] using [add],\nbut some collections may be able to optimize it.\n","name":"addAll","id":"addAll1()","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Set/E","name":"E"}],"name":"Iterable"},"name":"elements","id":"elements","kind":"param"}],"line":"60","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"\nRemoves [value] from the set. Returns true if [value] was\nin the set. Returns false otherwise. The method has no effect\nif [value] value was not in the set.\n","name":"remove","id":"remove1()","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"name":"value","id":"value","kind":"param"}],"line":"67","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nRemoves each element of [elements] from this set.\n","name":"removeAll","id":"removeAll1()","children":[{"ref":{"refId":"dart.core/Iterable","name":"Iterable"},"name":"elements","id":"elements","kind":"param"}],"line":"72","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nRemoves all elements of this set that are not elements in [elements].\n","name":"retainAll","id":"retainAll1()","children":[{"ref":{"refId":"dart.core/Iterable","name":"Iterable"},"name":"elements","id":"elements","kind":"param"}],"line":"77","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nRemoves all elements of this set that satisfy [test].\n","name":"removeWhere","id":"removeWhere1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Set/E","name":"E"},"uri":"sdk/lib/core/set.dart","name":"element","id":"element","line":"82","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"82","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nRemoves all elements of this set that fail to satisfy [test].\n","name":"retainWhere","id":"retainWhere1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Set/E","name":"E"},"uri":"sdk/lib/core/set.dart","name":"element","id":"element","line":"87","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"87","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"\nReturns whether this Set contains all the elements of [other].\n","name":"containsAll","id":"containsAll1()","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Set/E","name":"E"}],"name":"Iterable"},"name":"other","id":"other","kind":"param"}],"line":"92","kind":"method"},{"returnType":{"refId":"dart.core/Set","arguments":[{"refId":"dart.core/Set/E","name":"E"}],"name":"Set"},"comment":"\nReturns a new set which is the intersection between this set and [other].\n\nThat is, the returned set contains all the elements of this `Set` that\nare also elements of [other].\n","name":"intersection","id":"intersection1()","children":[{"ref":{"refId":"dart.core/Set","arguments":[{"refId":"dart.core/Set/E","name":"E"}],"name":"Set"},"name":"other","id":"other","kind":"param"}],"line":"100","kind":"method"},{"returnType":{"refId":"dart.core/Set","arguments":[{"refId":"dart.core/Set/E","name":"E"}],"name":"Set"},"comment":"\nReturns a new set which contains all the elements of this set and [other].\n\nThat is, the returned set contains all the elements of this `Set` and\nall the elements of [other].\n","name":"union","id":"union1()","children":[{"ref":{"refId":"dart.core/Set","arguments":[{"refId":"dart.core/Set/E","name":"E"}],"name":"Set"},"name":"other","id":"other","kind":"param"}],"line":"108","kind":"method"},{"returnType":{"refId":"dart.core/Set","arguments":[{"refId":"dart.core/Set/E","name":"E"}],"name":"Set"},"comment":"\nReturns a new set with the the elements of this that are not in [other].\n\nThat is, the returned set contains all the elements of this `Set` that\nare not elements of [other].\n","name":"difference","id":"difference1()","children":[{"ref":{"refId":"dart.core/Set","arguments":[{"refId":"dart.core/Set/E","name":"E"}],"name":"Set"},"name":"other","id":"other","kind":"param"}],"line":"116","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nRemoves all elements in the set.\n","name":"clear","id":"clear0()","line":"121","kind":"method"},{"returnType":{"refId":"dart.core/Set","arguments":[{"refId":"dart.core/Set/E","name":"E"}],"name":"Set"},"comment":"\nCreates an empty [Set].\n\nThe created `Set` is a [HashSet]. As such, it considers elements that\nare equal (using `==`) to be undistinguishable, and requires them to\nhave a compatible [Object.hashCode] implementation.\n","name":"Set","id":"Set0()","line":"31","kind":"constructor"},{"returnType":{"refId":"dart.core/Set","arguments":[{"refId":"dart.core/Set/E","name":"E"}],"name":"Set"},"comment":"\nCreates a [Set] that contains all elements of [other].\n\nThe created `Set` is a [HashSet]. As such, it considers elements that\nare equal (using `==`) to be undistinguishable, and requires them to\nhave a compatible [Object.hashCode] implementation.\n","name":"Set.from","id":"Set.from1()","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Set/E","name":"E"}],"name":"Iterable"},"name":"other","id":"other","kind":"param"}],"line":"40","kind":"constructor"},{"name":"E","id":"E","kind":"typeparam"}],"line":"23","kind":"class"},{"isAbstract":true,"interfaces":[{"refId":"dart.core/Pattern","name":"Pattern"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\n[RegExp] represents regular expressions.\n\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<http://ecma-international.org/ecma-262/5.1/#sec-15.10>\nfor the specification of JavaScript regular expressions.\n\n[firstMatch] is the main implementation method that applies a regular\nexpression to a string and returns the first [Match]. All\nother methods in [RegExp] can build on it.\n\nUse [allMatches] to look for all matches of a regular expression in\na string.\n\nThe following example finds all matches of a regular expression in\na string.\n\n    RegExp exp = new RegExp(r\"(\\w+)\");\n    String str = \"Parse my string\";\n    Iterable<Match> matches = exp.allMatches(str);\n","uri":"sdk/lib/core/regexp.dart","name":"RegExp","id":"RegExp","children":[{"returnType":{"refId":"dart.core/Match","name":"Match"},"comment":"\nSearches for the first match of the regular expression\nin the string [str]. Returns `null` if there is no match.\n","name":"firstMatch","id":"firstMatch1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"str","id":"str","kind":"param"}],"line":"107","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Match","name":"Match"}],"name":"Iterable"},"comment":"\nReturns an iterable on the  matches of the regular\nexpression in [str].\n","name":"allMatches","id":"allMatches1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"str","id":"str","kind":"param"}],"line":"113","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"\nReturns whether the regular expression has a match in the string [str].\n","name":"hasMatch","id":"hasMatch1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"str","id":"str","kind":"param"}],"line":"118","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nSearches for the first match of the regular expression\nin the string [str] and returns the matched string.\n","name":"stringMatch","id":"stringMatch1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"str","id":"str","kind":"param"}],"line":"124","kind":"method"},{"ref":{"refId":"dart.core/String","name":"String"},"comment":"\nThe pattern of this regular expression.\n","name":"pattern","id":"pattern","line":"129","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"\nWhether this regular expression matches multiple lines.\n","name":"isMultiLine","id":"isMultiLine","line":"134","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"\nWhether this regular expression is case insensitive.\n","name":"isCaseSensitive","id":"isCaseSensitive","line":"139","kind":"property"},{"returnType":{"refId":"dart.core/RegExp","name":"RegExp"},"comment":"\nConstructs a regular expression. The default implementation of a\n[RegExp] sets [multiLine] to false and [caseSensitive] to true.\nThrows a [FormatException] if [pattern] is not a valid regular\nexression pattern.\n","name":"RegExp","id":"RegExp3()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"pattern","id":"pattern","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"false","name":"multiLine","id":"multiLine","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"true","name":"caseSensitive","id":"caseSensitive","line":"101","kind":"param"}],"line":"100","kind":"constructor"}],"line":"93","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\n[Match] contains methods to manipulate a regular expression match.\n\nIterables of [Match] objects are returned from [RegExp] matching methods.\n\nThe following example finds all matches of a [RegExp] in a [String]\nand iterates through the returned iterable of [Match] objects.\n\n    RegExp exp = new RegExp(r\"(\\w+)\");\n    String str = \"Parse my string\";\n    Iterable<Match> matches = exp.allMatches(str);\n    for (Match m in matches) {\n      String match = m.group(0);\n      print(match);\n    }\n\nThe output of the example is:\n\n    Parse\n    my\n    string\n","uri":"sdk/lib/core/regexp.dart","name":"Match","id":"Match","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns the string matched by the given [group]. If [group] is 0,\nreturns the match of the regular expression.\n","name":"group","id":"group1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"group","id":"group","kind":"param"}],"line":"45","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"isOperator":true,"name":"[]","id":"[]1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"group","id":"group","kind":"param"}],"line":"46","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"comment":"\nReturns the strings matched by [groups]. The order in the\nreturned string follows the order in [groups].\n","name":"groups","id":"groups1()","children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"name":"groups","id":"groups","kind":"param"}],"line":"52","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nReturns the index in the string where the match starts.\n","name":"start","id":"start","line":"33","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nReturns the index in the string after the last character of the\nmatch.\n","name":"end","id":"end","line":"39","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nReturns the number of groups in the regular expression.\n","name":"groupCount","id":"groupCount","line":"57","kind":"property"},{"ref":{"refId":"dart.core/String","name":"String"},"comment":"\nThe string on which this matcher was computed.\n","name":"str","id":"str","line":"62","kind":"property"},{"ref":{"refId":"dart.core/Pattern","name":"Pattern"},"comment":"\nThe pattern used to search in [str].\n","name":"pattern","id":"pattern","line":"67","kind":"property"}],"line":"29","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"uri":"sdk/lib/core/pattern.dart","name":"Pattern","id":"Pattern","children":[{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Match","name":"Match"}],"name":"Iterable"},"comment":"\nMatch this pattern against the string repeatedly.\n\nThe iterable will contain all the non-overlapping matches of the\npattern on the string, ordered by start index.\n\nThe matches are found by repeatedly finding the first match\nof the pattern on the string, starting from the end of the previous\nmatch, and initially starting from index zero.\n\nIf the pattern matches the empty string at some point, the next\nmatch is found by starting at the previous match's end plus one.\n","name":"allMatches","id":"allMatches1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"str","id":"str","kind":"param"}],"line":"21","kind":"method"},{"returnType":{"refId":"dart.core/Match","name":"Match"},"comment":"\nMatch this pattern against the start of string.\n\nIf [start] is provided, it must be an integer in the range `0` ..\n`string.length`. In that case, this patten is tested against the\nstring at the [start] position. That is, a match is returned if the\npattern can match a part of the string starting from position [start].\n","name":"matchAsPrefix","id":"matchAsPrefix2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"string","id":"string","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"0","name":"start","id":"start","kind":"param"}],"line":"31","kind":"method"}],"line":"7","kind":"class"},{"comment":"\nEverything in Dart is an [Object].\n","uri":"sdk/lib/core/object.dart","name":"Object","id":"Object","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","name":"==","id":"==1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"29","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns a string representation of this object.\n","name":"toString","id":"toString0()","line":"48","kind":"method"},{"comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","name":"noSuchMethod","id":"noSuchMethod1()","children":[{"ref":{"refId":"dart.core/Invocation","name":"Invocation"},"name":"invocation","id":"invocation","kind":"param"}],"line":"60","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","name":"hashCode","id":"hashCode","line":"43","kind":"property"},{"ref":{"refId":"dart.core/Type","name":"Type"},"comment":"\nA representation of the runtime type of the object.\n","name":"runtimeType","id":"runtimeType","line":"65","kind":"property"},{"comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","name":"Object","id":"Object0()","line":"18","kind":"constructor"}],"line":"10","kind":"class"},{"isAbstract":true,"interfaces":[{"refId":"dart.core/Comparable","arguments":[{"refId":"dart.core/num","name":"num"}],"name":"Comparable"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nAll numbers in dart are instances of [num].\n","uri":"sdk/lib/core/num.dart","name":"num","id":"num","children":[{"returnType":{"refId":"dart.core/num","name":"num"},"isOperator":true,"comment":"Addition operator. ","name":"+","id":"+1()","children":[{"ref":{"refId":"dart.core/num","name":"num"},"name":"other","id":"other","kind":"param"}],"line":"12","kind":"method"},{"returnType":{"refId":"dart.core/num","name":"num"},"isOperator":true,"comment":"Subtraction operator. ","name":"-","id":"-1()","children":[{"ref":{"refId":"dart.core/num","name":"num"},"name":"other","id":"other","kind":"param"}],"line":"15","kind":"method"},{"returnType":{"refId":"dart.core/num","name":"num"},"isOperator":true,"comment":"Multiplication operator. ","name":"*","id":"*1()","children":[{"ref":{"refId":"dart.core/num","name":"num"},"name":"other","id":"other","kind":"param"}],"line":"18","kind":"method"},{"returnType":{"refId":"dart.core/num","name":"num"},"isOperator":true,"comment":"\nEuclidean modulo operator.\n\nReturns the remainder of the euclidean division. The euclidean division of\ntwo integers `a` and `b` yields two integers `q` and `r` such that\n`a == b*q + r` and `0 <= r < a.abs()`.\n\nThe euclidean division is only defined for integers, but can be easily\nextended to work with doubles. In that case `r` may have a non-integer\nvalue, but it still verifies `0 <= r < |a|`.\n\nThe sign of the returned value `r` is always positive.\n\nSee [remainder] for the remainder of the truncating division.\n","name":"%","id":"%1()","children":[{"ref":{"refId":"dart.core/num","name":"num"},"name":"other","id":"other","kind":"param"}],"line":"35","kind":"method"},{"returnType":{"refId":"dart.core/double","name":"double"},"isOperator":true,"comment":"Division operator. ","name":"/","id":"#slash1()","children":[{"ref":{"refId":"dart.core/num","name":"num"},"name":"other","id":"other","kind":"param"}],"line":"38","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"isOperator":true,"comment":"\nTruncating division operator.\n\nIf either operand is a [double] then the result of the truncating division\n[:a ~/ b:] is equivalent to [:(a / b).truncate().toInt():].\n\nIf both operands are [int]s then [:a ~/ b:] performs the truncating\ninteger division.\n","name":"~/","id":"~#slash1()","children":[{"ref":{"refId":"dart.core/num","name":"num"},"name":"other","id":"other","kind":"param"}],"line":"49","kind":"method"},{"returnType":{"refId":"dart.core/num","name":"num"},"isOperator":true,"comment":"Negate operator. ","name":"unary-","id":"unary-0()","line":"52","kind":"method"},{"returnType":{"refId":"dart.core/num","name":"num"},"comment":"\nReturns the remainder of the truncating division of `this` by [other].\n\nThe result `r` of this operation satisfies: `this == this ~/ other + r`.\nAs a consequence the remainder `r` has the same sign as the dividend\n`this`.\n","name":"remainder","id":"remainder1()","children":[{"ref":{"refId":"dart.core/num","name":"num"},"name":"other","id":"other","kind":"param"}],"line":"61","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"comment":"Relational less than operator. ","name":"<","id":"<1()","children":[{"ref":{"refId":"dart.core/num","name":"num"},"name":"other","id":"other","kind":"param"}],"line":"64","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"comment":"Relational less than or equal operator. ","name":"<=","id":"<=1()","children":[{"ref":{"refId":"dart.core/num","name":"num"},"name":"other","id":"other","kind":"param"}],"line":"67","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"comment":"Relational greater than operator. ","name":">","id":">1()","children":[{"ref":{"refId":"dart.core/num","name":"num"},"name":"other","id":"other","kind":"param"}],"line":"70","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"comment":"Relational greater than or equal operator. ","name":">=","id":">=1()","children":[{"ref":{"refId":"dart.core/num","name":"num"},"name":"other","id":"other","kind":"param"}],"line":"73","kind":"method"},{"returnType":{"refId":"dart.core/num","name":"num"},"comment":"Returns the absolute value of this [num]. ","name":"abs","id":"abs0()","line":"82","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"comment":"\nReturns the integer closest to `this`.\n\nRounds away from zero when there is no closest integer:\n [:(3.5).round() == 4:] and [:(-3.5).round() == -4:].\n\nIf `this` is not finite (`NaN` or infinity), throws an [UnsupportedError].\n","name":"round","id":"round0()","line":"92","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"comment":"\nReturns the greatest integer no greater than `this`.\n\nIf `this` is not finite (`NaN` or infinity), throws an [UnsupportedError].\n","name":"floor","id":"floor0()","line":"99","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"comment":"\nReturns the least integer no smaller than `this`.\n\nIf `this` is not finite (`NaN` or infinity), throws an [UnsupportedError].\n","name":"ceil","id":"ceil0()","line":"106","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"comment":"\nReturns the integer obtained by discarding any fractional\ndigits from `this`.\n\nIf `this` is not finite (`NaN` or infinity), throws an [UnsupportedError].\n","name":"truncate","id":"truncate0()","line":"114","kind":"method"},{"returnType":{"refId":"dart.core/double","name":"double"},"comment":"\nReturns the integer value closest to `this`.\n\nRounds away from zero when there is no closest integer:\n [:(3.5).round() == 4:] and [:(-3.5).round() == -4:].\n\nThe result is a double.\n","name":"roundToDouble","id":"roundToDouble0()","line":"124","kind":"method"},{"returnType":{"refId":"dart.core/double","name":"double"},"comment":"\nReturns the greatest integer value no greater than `this`.\n\nThe result is a double.\n","name":"floorToDouble","id":"floorToDouble0()","line":"131","kind":"method"},{"returnType":{"refId":"dart.core/double","name":"double"},"comment":"\nReturns the least integer value no smaller than `this`.\n\nThe result is a double.\n","name":"ceilToDouble","id":"ceilToDouble0()","line":"138","kind":"method"},{"returnType":{"refId":"dart.core/double","name":"double"},"comment":"\nReturns the integer obtained by discarding any fractional\ndigits from `this`.\n\nThe result is a double.\n","name":"truncateToDouble","id":"truncateToDouble0()","line":"146","kind":"method"},{"returnType":{"refId":"dart.core/num","name":"num"},"comment":"\nClamps [this] to be in the range [lowerLimit]-[upperLimit]. The comparison\nis done using [compareTo] and therefore takes [:-0.0:] into account.\nIt also implies that [double.NAN] is treated as the maximal double value.\n","name":"clamp","id":"clamp2()","children":[{"ref":{"refId":"dart.core/num","name":"num"},"name":"lowerLimit","id":"lowerLimit","kind":"param"},{"ref":{"refId":"dart.core/num","name":"num"},"name":"upperLimit","id":"upperLimit","kind":"param"}],"line":"153","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"comment":"Truncates this [num] to an integer and returns the result as an [int]. ","name":"toInt","id":"toInt0()","line":"156","kind":"method"},{"returnType":{"refId":"dart.core/double","name":"double"},"comment":"\nReturn this [num] as a [double].\n\nIf the number is not representable as a [double], an\napproximation is returned. For numerically large integers, the\napproximation may be infinite.\n","name":"toDouble","id":"toDouble0()","line":"165","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nConverts [this] to a [double] and then gives string representation with\n[fractionDigits] digits after the decimal point.\n\nThe parameter [fractionDigits] must be an integer satisfying:\n[:0 <= fractionDigits <= 20:].\n","name":"toStringAsFixed","id":"toStringAsFixed1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"fractionDigits","id":"fractionDigits","kind":"param"}],"line":"174","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nConverts [this] to a [double] and then gives a string in decimal\nexponential notation with [fractionDigits] digits after the decimal point.\n\nIf [fractionDigits] is given then it must be an integer satisfying:\n[:0 <= fractionDigits <= 20:]. Without the parameter the returned string\nuses the shortest number of digits that accurately represent [this].\n","name":"toStringAsExponential","id":"toStringAsExponential1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"name":"fractionDigits","id":"fractionDigits","kind":"param"}],"line":"184","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nConverts [this] to a double and gives a string representation with\n[precision] significant digits.\n\nThe parameter [precision] must be an integer satisfying:\n[:1 <= precision <= 21:].\n","name":"toStringAsPrecision","id":"toStringAsPrecision1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"precision","id":"precision","kind":"param"}],"line":"193","kind":"method"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isNaN","id":"isNaN","line":"75","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isNegative","id":"isNegative","line":"77","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isInfinite","id":"isInfinite","line":"79","kind":"property"}],"line":"10","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nA [Map] is an associative container, mapping a key to a value.\nNull values are supported, but null keys are not.\n","uri":"sdk/lib/core/map.dart","name":"Map","id":"Map","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"\nReturns whether this map contains the given [value].\n","name":"containsValue","id":"containsValue1()","children":[{"ref":{"refId":"dart.core/Map/V","name":"V"},"name":"value","id":"value","kind":"param"}],"line":"25","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"\nReturns whether this map contains the given [key].\n","name":"containsKey","id":"containsKey1()","children":[{"ref":{"refId":"dart.core/Map/K","name":"K"},"name":"key","id":"key","kind":"param"}],"line":"30","kind":"method"},{"returnType":{"refId":"dart.core/Map/V","name":"V"},"isOperator":true,"comment":"\nReturns the value for the given [key] or null if [key] is not\nin the map. Because null values are supported, one should either\nuse containsKey to distinguish between an absent key and a null\nvalue, or use the [putIfAbsent] method.\n","name":"[]","id":"[]1()","children":[{"ref":{"refId":"dart.core/Map/K","name":"K"},"name":"key","id":"key","kind":"param"}],"line":"38","kind":"method"},{"returnType":{"refId":"void","name":"void"},"isOperator":true,"comment":"\nAssociates the [key] with the given [value].\n","name":"[]=","id":"[]=2()","children":[{"ref":{"refId":"dart.core/Map/K","name":"K"},"name":"key","id":"key","kind":"param"},{"ref":{"refId":"dart.core/Map/V","name":"V"},"name":"value","id":"value","kind":"param"}],"line":"43","kind":"method"},{"returnType":{"refId":"dart.core/Map/V","name":"V"},"comment":"\nIf [key] is not associated to a value, calls [ifAbsent] and\nupdates the map by mapping [key] to the value returned by\n[ifAbsent]. Returns the value in the map.\n\nIt is an error to add or remove keys from map during the call to\n[ifAbsent].\n","name":"putIfAbsent","id":"putIfAbsent2()","children":[{"ref":{"refId":"dart.core/Map/K","name":"K"},"name":"key","id":"key","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"ifAbsent","id":"ifAbsent","children":[{"returnType":{"refId":"dart.core/Map/V","name":"V"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"53","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nAdds all key-value pairs of [other] to this map.\n\nIf a key of [other] is already in this map, its value is overwritten.\n\nThe operation is equivalent to doing `this[key] = value` for each key\nand associated value in other. It iterates over [other], which must\ntherefore not change during the iteration.\n","name":"addAll","id":"addAll1()","children":[{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/Map/K","name":"K"},{"refId":"dart.core/Map/V","name":"V"}],"name":"Map"},"name":"other","id":"other","kind":"param"}],"line":"64","kind":"method"},{"returnType":{"refId":"dart.core/Map/V","name":"V"},"comment":"\nRemoves the association for the given [key]. Returns the value for\n[key] in the map or null if [key] is not in the map. Note that values\ncan be null and a returned null value does not always imply that the\nkey is absent.\n","name":"remove","id":"remove1()","children":[{"ref":{"refId":"dart.core/Map/K","name":"K"},"name":"key","id":"key","kind":"param"}],"line":"72","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nRemoves all pairs from the map.\n","name":"clear","id":"clear0()","line":"77","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nApplies [f] to each {key, value} pair of the map.\n\nIt is an error to add or remove keys from the map during iteration.\n","name":"forEach","id":"forEach1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"returnType":{"refId":"void","name":"void"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Map/K","name":"K"},"uri":"sdk/lib/core/map.dart","name":"key","id":"key","line":"84","kind":"param"},{"ref":{"refId":"dart.core/Map/V","name":"V"},"uri":"sdk/lib/core/map.dart","name":"value","id":"value","line":"84","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"84","kind":"method"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Map/K","name":"K"}],"name":"Iterable"},"comment":"\nThe keys of [this].\n","name":"keys","id":"keys","line":"90","kind":"property"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Map/V","name":"V"}],"name":"Iterable"},"comment":"\nThe values of [this].\n","name":"values","id":"values","line":"95","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nThe number of {key, value} pairs in the map.\n","name":"length","id":"length","line":"100","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"\nReturns true if there is no {key, value} pair in the map.\n","name":"isEmpty","id":"isEmpty","line":"105","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"\nReturns true if there is at least one {key, value} pair in the map.\n","name":"isNotEmpty","id":"isNotEmpty","line":"110","kind":"property"},{"returnType":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/Map/K","name":"K"},{"refId":"dart.core/Map/V","name":"V"}],"name":"Map"},"comment":"\nCreates a map with the default implementation.\n","name":"Map","id":"Map0()","line":"15","kind":"constructor"},{"returnType":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/Map/K","name":"K"},{"refId":"dart.core/Map/V","name":"V"}],"name":"Map"},"comment":"\nCreates a [Map] that contains all key value pairs of [other].\n","name":"Map.from","id":"Map.from1()","children":[{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/Map/K","name":"K"},{"refId":"dart.core/Map/V","name":"V"}],"name":"Map"},"name":"other","id":"other","kind":"param"}],"line":"20","kind":"constructor"},{"name":"K","id":"K","kind":"typeparam"},{"name":"V","id":"V","kind":"typeparam"}],"line":"11","kind":"class"},{"isAbstract":true,"interfaces":[{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/List/E","name":"E"}],"name":"Iterable"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nA [List] is an indexable collection with a length.\n\nA `List` implementation can choose not to support all methods\nof the `List` interface.\n\nThe most common list types are:\n* Fixed length list. It is an error to use operations that can change\n  the list's length.\n* Growable list. Full implementation of the interface.\n* Unmodifiable list. It is an error to use operations that can change\n  the list's length, or that can change the values of the list.\n  If an unmodifable list is backed by another modifiable data structure,\n  the values read from it may still change over time.\n\nExample:\n\n    var fixedLengthList = new List(5);\n    fixedLengthList.length = 0;  // throws.\n    fixedLengthList.add(499);  // throws\n    fixedLengthList[0] = 87;\n    var growableList = [1, 2];\n    growableList.length = 0;\n    growableList.add(499);\n    growableList[0] = 87;\n    var unmodifiableList = const [1, 2];\n    unmodifiableList.length = 0;  // throws.\n    unmodifiableList.add(499);  // throws\n    unmodifiableList[0] = 87;  // throws.\n\nLists are [Iterable].\nList iteration iterates over values in index order.\nChanging the values will not affect iteration,\nbut changing the valid indices -\nthat is, changing the list's length -\nbetween iteration steps\nwill cause a [ConcurrentModificationError].\nThis means that only growable lists can throw [ConcurrentModificationError].\nIf the length changes temporarily\nand is restored before continuing the iteration,\nthe iterator will not detect it.\n","uri":"sdk/lib/core/list.dart","name":"List","id":"List","children":[{"returnType":{"refId":"dart.core/List/E","name":"E"},"isOperator":true,"comment":"\nReturns the element at the given [index] in the list or throws\nan [RangeError] if [index] is out of bounds.\n","name":"[]","id":"[]1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"index","id":"index","kind":"param"}],"line":"117","kind":"method"},{"returnType":{"refId":"void","name":"void"},"isOperator":true,"comment":"\nSets the entry at the given [index] in the list to [value].\n\nThrows an [RangeError] if [index] is out of bounds.\n","name":"[]=","id":"[]=2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"index","id":"index","kind":"param"},{"ref":{"refId":"dart.core/List/E","name":"E"},"name":"value","id":"value","kind":"param"}],"line":"124","kind":"method"},{"returnType":{"refId":"void","name":"void"},"isSetter":true,"comment":"\nChanges the length of the list. If [newLength] is greater than\nthe current [length], entries are initialized to [:null:].\n\nThrows an [UnsupportedError] if the list is not extendable.\n","name":"length=","id":"length=1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"newLength","id":"newLength","kind":"param"}],"line":"139","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nAdds [value] at the end of the list, extending the length by\none.\n\nThrows an [UnsupportedError] if the list is not extendable.\n","name":"add","id":"add1()","children":[{"ref":{"refId":"dart.core/List/E","name":"E"},"name":"value","id":"value","kind":"param"}],"line":"147","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nAppends all elements of the [iterable] to the end of this list.\n\nExtends the length of the list by the number of elements in [iterable].\nThrows an [UnsupportedError] if this list is not extensible.\n","name":"addAll","id":"addAll1()","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/List/E","name":"E"}],"name":"Iterable"},"name":"iterable","id":"iterable","kind":"param"}],"line":"155","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nSorts the list according to the order specified by the [compare] function.\n\nThe [compare] function must act as a [Comparator].\n\nThe default [List] implementations use [Comparable.compare] if\n[compare] is omitted.\n","name":"sort","id":"sort1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"compare","id":"compare","children":[{"returnType":{"refId":"dart.core/int","name":"int"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/List/E","name":"E"},"uri":"sdk/lib/core/list.dart","name":"a","id":"a","line":"170","kind":"param"},{"ref":{"refId":"dart.core/List/E","name":"E"},"uri":"sdk/lib/core/list.dart","name":"b","id":"b","line":"170","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"170","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"comment":"\nReturns the first index of [element] in the list.\n\nSearches the list from index [start] to the length of the list.\nThe first time an element [:e:] is encountered so that [:e == element:],\nthe index of [:e:] is returned.\nReturns -1 if [element] is not found.\n","name":"indexOf","id":"indexOf2()","children":[{"ref":{"refId":"dart.core/List/E","name":"E"},"name":"element","id":"element","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"0","name":"start","id":"start","kind":"param"}],"line":"180","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"comment":"\nReturns the last index of [element] in the list.\n\nSearches the list backwards from index [start] (inclusive) to 0.\n\nThe first time an element [:e:] is encountered so that [:e == element:],\nthe index of [:e:] is returned.\n\nIf start is not provided, it defaults to [:this.length - 1:].\n\nReturns -1 if [element] is not found.\n","name":"lastIndexOf","id":"lastIndexOf2()","children":[{"ref":{"refId":"dart.core/List/E","name":"E"},"name":"element","id":"element","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"name":"start","id":"start","kind":"param"}],"line":"194","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nRemoves all elements in the list.\n\nThe length of the list becomes zero.\n\nThrows an [UnsupportedError], and retains all elements, if the\nlength of the list cannot be changed.\n","name":"clear","id":"clear0()","line":"204","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nInserts the element at position [index] in the list.\n\nThis increases the length of the list by one and shifts all elements\nat or after the index towards the end of the list.\n\nIt is an error if the [index] does not point inside the list or at the\nposition after the last element.\n","name":"insert","id":"insert2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"index","id":"index","kind":"param"},{"ref":{"refId":"dart.core/List/E","name":"E"},"name":"element","id":"element","kind":"param"}],"line":"215","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nInserts all elements of [iterable] at position [index] in the list.\n\nThis increases the length of the list by the length of [iterable] and\nshifts all later elements towards the end of the list.\n\nIt is an error if the [index] does not point inside the list or at the\nposition after the last element.\n","name":"insertAll","id":"insertAll2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"index","id":"index","kind":"param"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/List/E","name":"E"}],"name":"Iterable"},"name":"iterable","id":"iterable","kind":"param"}],"line":"226","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nOverwrites elements of `this` with the elemenst of [iterable] starting\nat position [index] in the list.\n\nThis operation does not increase the length of `this`.\n\nIt is an error if the [index] does not point inside the list or at the\nposition after the last element.\n\nIt is an error if the [iterable] is longer than [length] - [index].\n","name":"setAll","id":"setAll2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"index","id":"index","kind":"param"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/List/E","name":"E"}],"name":"Iterable"},"name":"iterable","id":"iterable","kind":"param"}],"line":"239","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"\nRemoves [value] from the list. Returns true if [value] was\nin the list. Returns false otherwise. The method has no effect\nif [value] value was not in the list.\n","name":"remove","id":"remove1()","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"name":"value","id":"value","kind":"param"}],"line":"246","kind":"method"},{"returnType":{"refId":"dart.core/List/E","name":"E"},"comment":"\nRemoves the element at position [index] from the list.\n\nThis reduces the length of `this` by one and moves all later elements\ndown by one position.\n\nReturns the removed element.\n\nThrows an [ArgumentError] if [index] is not an [int].\n\nThrows an [RangeError] if the [index] does not point inside\nthe list.\n\nThrows an [UnsupportedError], and doesn't remove the element,\nif the length of `this` cannot be changed.\n","name":"removeAt","id":"removeAt1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"index","id":"index","kind":"param"}],"line":"264","kind":"method"},{"returnType":{"refId":"dart.core/List/E","name":"E"},"comment":"\nPops and returns the last element of the list.\nThrows a [UnsupportedError] if the length of the\nlist cannot be changed.\n","name":"removeLast","id":"removeLast0()","line":"271","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nRemoves all elements of this list that satisfy [test].\n\nAn elements [:e:] satisfies [test] if [:test(e):] is true.\n","name":"removeWhere","id":"removeWhere1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/List/E","name":"E"},"uri":"sdk/lib/core/list.dart","name":"element","id":"element","line":"278","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"278","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nRemoves all elements of this list that fail to satisfy [test].\n\nAn elements [:e:] satisfies [test] if [:test(e):] is true.\n","name":"retainWhere","id":"retainWhere1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/List/E","name":"E"},"uri":"sdk/lib/core/list.dart","name":"element","id":"element","line":"285","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"285","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/List/E","name":"E"}],"name":"List"},"comment":"\nReturns a new list containing the elements from [start] to [end].\n\nIf [end] is omitted, the [length] of `this` is used.\n\nIt is an error if [start] or [end] are not indices into `this`,\nor if [end] is before [start].\n","name":"sublist","id":"sublist2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"start","id":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"name":"end","id":"end","kind":"param"}],"line":"295","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/List/E","name":"E"}],"name":"Iterable"},"comment":"\nReturns an [Iterable] that iterators over the elements in the range\n[start] to [end] exclusive. The result of this function\nis backed by `this`.\n\nIt is an error if [end] is before [start].\n\nIt is an error if the [start] and [end] are not valid ranges at the time\nof the call to this method. The returned [Iterable] behaves similar to\n`skip(start).take(end - start)`. That is, it will not throw exceptions\nif `this` changes size.\n\nExample:\n\n    var list = [1, 2, 3, 4, 5];\n    var range = list.getRange(1, 4);\n    print(range.join(', '));  // => 2, 3, 4\n    list.length = 3;\n    print(range.join(', '));  // => 2, 3\n","name":"getRange","id":"getRange2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"start","id":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"end","id":"end","kind":"param"}],"line":"317","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nCopies the elements of [iterable], skipping the [skipCount] first elements,\ninto the range [start] to [end] exclusive of `this`.\n\nIf [start] equals [end] and [start]..[end] represents a legal range, this\nmethod has no effect.\n\nIt is an error if [start]..[end] is not a valid range pointing into the\n`this`.\n\nIt is an error if the [iterable] does not have enough elements after\nskipping [skipCount] elements.\n\nExample:\n\n    var list = [1, 2, 3, 4];\n    var list2 = [5, 6, 7, 8, 9];\n    list.setRange(1, 3, list2, 3);\n    print(list);  // => [1, 8, 9, 4]\n","name":"setRange","id":"setRange4()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"start","id":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"end","id":"end","kind":"param"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/List/E","name":"E"}],"name":"Iterable"},"name":"iterable","id":"iterable","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"0","name":"skipCount","id":"skipCount","kind":"param"}],"line":"339","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nRemoves the elements in the range [start] to [end] exclusive.\n\nIt is an error if [start]..[end] is not a valid range pointing into the\n`this`.\n","name":"removeRange","id":"removeRange2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"start","id":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"end","id":"end","kind":"param"}],"line":"347","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nSets the elements in the range [start] to [end] exclusive to the given\n[fillValue].\n\nIt is an error if [start]..[end] is not a valid range pointing into the\n`this`.\n","name":"fillRange","id":"fillRange3()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"start","id":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"end","id":"end","kind":"param"},{"ref":{"refId":"dart.core/List/E","name":"E"},"isOptional":true,"name":"fillValue","id":"fillValue","kind":"param"}],"line":"356","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nRemoves the elements in the range [start] to [end] exclusive and replaces\nthem with the contents of the [iterable].\n\nIt is an error if [start]..[end] is not a valid range pointing into the\n`this`.\n\nExample:\n\n    var list = [1, 2, 3, 4, 5];\n    list.replaceRange(1, 3, [6, 7, 8, 9]);\n    print(list);  // [1, 6, 7, 8, 9, 4, 5]\n","name":"replaceRange","id":"replaceRange3()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"start","id":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"end","id":"end","kind":"param"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/List/E","name":"E"}],"name":"Iterable"},"name":"iterable","id":"iterable","kind":"param"}],"line":"371","kind":"method"},{"returnType":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/int","name":"int"},{"refId":"dart.core/List/E","name":"E"}],"name":"Map"},"comment":"\nReturns an unmodifiable [Map] view of `this`.\n\nIt has the indices of this list as keys, and the corresponding elements\nas values. The [Map.keys] [Iterable] will iterate the indices of this list\nin numerical order.\n","name":"asMap","id":"asMap0()","line":"380","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nReturns the number of elements in the list.\n\nThe valid indices for a list are 0 through `length - 1`.\n","name":"length","id":"length","line":"131","kind":"property"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/List/E","name":"E"}],"name":"Iterable"},"comment":"\nReturns an [Iterable] of the elements of this [List] in reverse order.\n","name":"reversed","id":"reversed","line":"160","kind":"property"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/List/E","name":"E"}],"name":"List"},"comment":"\nCreates a list of the given [length].\n\nThe list is a fixed-length list if [length] is provided, and an empty\ngrowable list if [length] is omitted.\n\nIt is an error if [length] is not a non-negative integer.\n","name":"List","id":"List1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"name":"length","id":"length","kind":"param"}],"line":"58","kind":"constructor"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/List/E","name":"E"}],"name":"List"},"comment":"\nCreates a fixed-length list of the given [length] where each entry\ncontains [fill].\n","name":"List.filled","id":"List.filled2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"length","id":"length","kind":"param"},{"ref":{"refId":"dart.core/List/E","name":"E"},"name":"fill","id":"fill","kind":"param"}],"line":"64","kind":"constructor"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/List/E","name":"E"}],"name":"List"},"comment":"\nCreates an list with the elements of [other].\n\nThe order in the list will be\nthe order provided by the iterator of [other].\n\nThe returned list is growable if [growable] is true, otherwise it's\na fixed length list.\n","name":"List.from","id":"List.from2()","children":[{"ref":{"refId":"dart.core/Iterable","name":"Iterable"},"name":"other","id":"other","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"true","name":"growable","id":"growable","kind":"param"}],"line":"75","kind":"constructor"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/List/E","name":"E"}],"name":"List"},"comment":"\nGenerate a `List` of values.\n\nCreates a list with [length] positions\nand fills them by values created by calling [generator]\nfor each index in the range `0` .. `[length] - 1`\nin increasing order.\n\nThe created list's length is fixed unless [growable] is true.\n","name":"List.generate","id":"List.generate3()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"length","id":"length","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"generator","id":"generator","children":[{"returnType":{"refId":"dart.core/List/E","name":"E"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/int","name":"int"},"uri":"sdk/lib/core/list.dart","name":"index","id":"index","line":"99","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"true","name":"growable","id":"growable","line":"100","kind":"param"}],"line":"99","kind":"constructor"},{"name":"E","id":"E","kind":"typeparam"}],"line":"49","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nThe [Iterator] class provides methods to iterate over an object. It\nis transparently used by the for-in construct to test for the end\nof the iteration, and to get the elements.\n\nIf the object iterated over is changed during the iteration, the\nbehavior is unspecified.\n\nThe [Iterator] is initially positioned before the first element. Before\naccessing the first element the iterator must thus be advanced ([moveNext])\nto point to the first element. If there is no element left, then [moveNext]\nreturns false.\n\nA typical usage of an [Iterator] looks as follows:\n\n    var it = obj.iterator;\n    while (it.moveNext()) {\n      use(it.current);\n    }\n","uri":"sdk/lib/core/iterator.dart","name":"Iterator","id":"Iterator","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"\nMoves to the next element. Returns true if [current] contains the next\nelement. Returns false, if no element was left.\n\nIt is safe to invoke [moveNext] even when the iterator is already\npositioned after the last element. In this case [moveNext] has no effect.\n","name":"moveNext","id":"moveNext0()","line":"35","kind":"method"},{"ref":{"refId":"dart.core/Iterator/E","name":"E"},"comment":"\nReturns the current element.\n\nReturn [:null:] if the iterator has not yet been moved to the first\nelement, or if the iterator has been moved after the last element of the\n[Iterable].\n","name":"current","id":"current","line":"44","kind":"property"},{"name":"E","id":"E","kind":"typeparam"}],"line":"27","kind":"class"},{"isAbstract":true,"interfaces":[{"refId":"dart.core/Iterator","arguments":[{"refId":"dart.core/BidirectionalIterator/E","name":"E"}],"name":"Iterator"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nAn [Iterator] that allows moving backwards as well as forwards.\n","uri":"sdk/lib/core/iterable.dart","name":"BidirectionalIterator","id":"BidirectionalIterator","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"\nMove back to the previous element.\n\nReturns true and updates [current] if successful. Returns false\nand sets [current] to null if there is no previous element.\n","name":"movePrevious","id":"movePrevious0()","line":"311","kind":"method"},{"name":"E","id":"E","kind":"typeparam"}],"line":"304","kind":"class"},{"interfaces":[{"refId":"dart.core/Iterator","arguments":[{"refId":"dart.core/_GeneratorIterator/E","name":"E"}],"name":"Iterator"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"uri":"sdk/lib/core/iterable.dart","name":"_GeneratorIterator","isPrivate":true,"id":"_GeneratorIterator","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"moveNext","id":"moveNext0()","line":"287","kind":"method"},{"ref":{"refId":"dart.core/_GeneratorIterator/E","name":"E"},"name":"current","id":"current","line":"298","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"name":"_count","isPrivate":true,"id":"_count","line":"280","kind":"variable"},{"ref":{"refId":"dart.core/_Generator","name":"_Generator"},"isFinal":true,"name":"_generator","isPrivate":true,"id":"_generator","line":"281","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"_index","isPrivate":true,"id":"_index","line":"282","kind":"variable"},{"ref":{"refId":"dart.core/_GeneratorIterator/E","name":"E"},"name":"_current","isPrivate":true,"id":"_current","line":"283","kind":"variable"},{"name":"_GeneratorIterator","id":"_GeneratorIterator2()","children":[{"initializedField":{"refId":"dart.core/_GeneratorIterator/_count","name":"_count"},"ref":{"refId":"dart.core/int","name":"int"},"name":"_count","isPrivate":true,"id":"_count","kind":"param"},{"initializedField":{"refId":"dart.core/_GeneratorIterator/_generator","name":"_generator"},"ref":{"refId":"dart.core/_Generator","name":"_Generator"},"name":"_generator","isPrivate":true,"id":"_generator","kind":"param"}],"line":"285","kind":"constructor"},{"name":"E","id":"E","kind":"typeparam"}],"line":"279","kind":"class"},{"superclass":{"refId":"dart.collection/IterableBase","arguments":[{"refId":"dart.core/_GeneratorIterable/E","name":"E"}],"name":"IterableBase"},"uri":"sdk/lib/core/iterable.dart","name":"_GeneratorIterable","isPrivate":true,"id":"_GeneratorIterable","children":[{"ref":{"refId":"dart.core/Iterator","arguments":[{"refId":"dart.core/_GeneratorIterable/E","name":"E"}],"name":"Iterator"},"name":"iterator","id":"iterator","line":"276","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"name":"_count","isPrivate":true,"id":"_count","line":"273","kind":"variable"},{"ref":{"refId":"dart.core/_Generator","name":"_Generator"},"isFinal":true,"name":"_generator","isPrivate":true,"id":"_generator","line":"274","kind":"variable"},{"name":"_GeneratorIterable","id":"_GeneratorIterable2()","children":[{"initializedField":{"refId":"dart.core/_GeneratorIterable/_count","name":"_count"},"ref":{"refId":"dart.core/int","name":"int"},"name":"_count","isPrivate":true,"id":"_count","kind":"param"},{"initializedField":{"refId":"dart.core/_GeneratorIterable/_generator","name":"_generator"},"ref":{"refId":"dart.core/_Generator","name":"_Generator"},"name":"_generator","isPrivate":true,"id":"_generator","kind":"param"}],"line":"275","kind":"constructor"},{"name":"E","id":"E","kind":"typeparam"}],"line":"272","kind":"class"},{"returnType":{"refId":"dart.core/_Generator/E","name":"E"},"uri":"sdk/lib/core/iterable.dart","name":"_Generator","isPrivate":true,"id":"_Generator","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"index","id":"index","kind":"param"},{"name":"E","id":"E","kind":"typeparam"}],"line":"270","kind":"typedef"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nThe [Iterable] interface allows to get an [Iterator] out of an\n[Iterable] object.\n\nThis interface is used by the for-in construct to iterate over an\n[Iterable] object.\nThe for-in construct takes an [Iterable] object at the right-hand\nside, and calls its [iterator] method to get an [Iterator] on it.\n\nA user-defined class that implements the [Iterable] interface can\nbe used as the right-hand side of a for-in construct.\n","uri":"sdk/lib/core/iterable.dart","name":"Iterable","id":"Iterable","children":[{"returnType":{"refId":"dart.core/Iterable","name":"Iterable"},"comment":"\nReturns a lazy [Iterable] where each element [:e:] of `this` is replaced\nby the result of [:f(e):].\n\nThis method returns a view of the mapped elements. As long as the\nreturned [Iterable] is not iterated over, the supplied function [f] will\nnot be invoked. The transformed elements will not be cached. Iterating\nmultiple times over the the returned [Iterable] will invoke the supplied\nfunction [f] multiple times on the same element.\n","name":"map","id":"map1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"sdk/lib/core/iterable.dart","name":"element","id":"element","line":"51","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"51","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Iterable/E","name":"E"}],"name":"Iterable"},"comment":"\nReturns a lazy [Iterable] with all elements that satisfy the\npredicate [test].\n\nThis method returns a view of the mapped elements. As long as the\nreturned [Iterable] is not iterated over, the supplied function [test] will\nnot be invoked. Iterating will not cache results, and thus iterating\nmultiple times over the the returned [Iterable] will invoke the supplied\nfunction [test] multiple times on the same element.\n","name":"where","id":"where1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"sdk/lib/core/iterable.dart","name":"element","id":"element","line":"63","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"63","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","name":"Iterable"},"comment":"\nExpand each element of this [Iterable] into zero or more elements.\n\nThe resulting Iterable will run through the elements returned\nby [f] for each element of this, in order.\n\nThe returned [Iterable] is lazy, and will call [f] for each element\nof this every time it's iterated.\n","name":"expand","id":"expand1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"returnType":{"refId":"dart.core/Iterable","name":"Iterable"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"sdk/lib/core/iterable.dart","name":"element","id":"element","line":"74","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"74","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"\nCheck whether the collection contains an element equal to [element].\n","name":"contains","id":"contains1()","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"name":"element","id":"element","kind":"param"}],"line":"79","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nApplies the function [f] to each element of this collection.\n","name":"forEach","id":"forEach1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"returnType":{"refId":"void","name":"void"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"sdk/lib/core/iterable.dart","name":"element","id":"element","line":"84","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"84","kind":"method"},{"returnType":{"refId":"dart.core/Iterable/E","name":"E"},"comment":"\nReduces a collection to a single value by iteratively combining elements\nof the collection using the provided function.\n\nExample of calculating the sum of an iterable:\n\n    iterable.reduce((value, element) => value + element);\n\n","name":"reduce","id":"reduce1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"combine","id":"combine","children":[{"returnType":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"sdk/lib/core/iterable.dart","name":"value","id":"value","line":"95","kind":"param"},{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"sdk/lib/core/iterable.dart","name":"element","id":"element","line":"95","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"95","kind":"method"},{"comment":"\nReduces a collection to a single value by iteratively combining each\nelement of the collection with an existing value using the provided\nfunction.\n\nUse [initialValue] as the initial value, and the function [combine] to\ncreate a new value from the previous one and an element.\n\nExample of calculating the sum of an iterable:\n\n    iterable.fold(0, (prev, element) => prev + element);\n\n","name":"fold","id":"fold2()","children":[{"name":"initialValue","id":"initialValue","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"combine","id":"combine","children":[{"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"uri":"sdk/lib/core/iterable.dart","name":"previousValue","id":"previousValue","line":"111","kind":"param"},{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"sdk/lib/core/iterable.dart","name":"element","id":"element","line":"111","kind":"param"}],"line":"13","kind":"functiontype"}],"line":"111","kind":"param"}],"line":"110","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"\nReturns true if every elements of this collection satisify the\npredicate [test]. Returns `false` otherwise.\n","name":"every","id":"every1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"sdk/lib/core/iterable.dart","name":"element","id":"element","line":"117","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"117","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nConverts each element to a [String] and concatenates the strings.\n\nConverts each element to a [String] by calling [Object.toString] on it.\nThen concatenates the strings, optionally separated by the [separator]\nstring.\n","name":"join","id":"join1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"defaultValue":"\"\"","name":"separator","id":"separator","kind":"param"}],"line":"126","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"\nReturns true if one element of this collection satisfies the\npredicate [test]. Returns false otherwise.\n","name":"any","id":"any1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"sdk/lib/core/iterable.dart","name":"element","id":"element","line":"136","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"136","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/Iterable/E","name":"E"}],"name":"List"},"comment":"\nCreates a [List] containing the elements of this [Iterable].\n\nThe elements will be in iteration order. The list is fixed-length\nif [growable] is false.\n","name":"toList","id":"toList1()","children":[{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"true","name":"growable","id":"growable","kind":"param"}],"line":"144","kind":"method"},{"returnType":{"refId":"dart.core/Set","arguments":[{"refId":"dart.core/Iterable/E","name":"E"}],"name":"Set"},"comment":"\nCreates a [Set] containing the elements of this [Iterable].\n","name":"toSet","id":"toSet0()","line":"149","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Iterable/E","name":"E"}],"name":"Iterable"},"comment":"\nReturns an [Iterable] with at most [n] elements.\n\nThe returned [Iterable] may contain fewer than [n] elements, if `this`\ncontains fewer than [n] elements.\n","name":"take","id":"take1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"n","id":"n","kind":"param"}],"line":"175","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Iterable/E","name":"E"}],"name":"Iterable"},"comment":"\nReturns an [Iterable] that stops once [test] is not satisfied anymore.\n\nThe filtering happens lazily. Every new [Iterator] of the returned\n[Iterable] will start iterating over the elements of `this`.\n\nWhen the iterator encounters an element `e` that does not satisfy [test],\nit discards `e` and moves into the finished state. That is, it will not\nask or provide any more elements.\n","name":"takeWhile","id":"takeWhile1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"sdk/lib/core/iterable.dart","name":"value","id":"value","line":"187","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"187","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Iterable/E","name":"E"}],"name":"Iterable"},"comment":"\nReturns an [Iterable] that skips the first [n] elements.\n\nIf `this` has fewer than [n] elements, then the resulting [Iterable] will\nbe empty.\n","name":"skip","id":"skip1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"n","id":"n","kind":"param"}],"line":"195","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Iterable/E","name":"E"}],"name":"Iterable"},"comment":"\nReturns an [Iterable] that skips elements while [test] is satisfied.\n\nThe filtering happens lazily. Every new [Iterator] of the returned\n[Iterable] iterates over all elements of `this`.\n\nAs long as the iterator's elements satisfy [test] they are\ndiscarded. Once an element does not satisfy the [test] the iterator stops\ntesting and uses every later element unconditionally. That is, the elements\nof the returned [Iterable] are the elements of `this` starting from the\nfirst element that does not satisfy [test].\n","name":"skipWhile","id":"skipWhile1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"sdk/lib/core/iterable.dart","name":"value","id":"value","line":"209","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"209","kind":"method"},{"returnType":{"refId":"dart.core/Iterable/E","name":"E"},"comment":"\nReturns the first element that satisfies the given predicate [test].\n\nIf none matches, the result of invoking the [orElse] function is\nreturned. By default, when [orElse] is `null`, a [StateError] is\nthrown.\n","name":"firstWhere","id":"firstWhere2()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"sdk/lib/core/iterable.dart","name":"element","id":"element","line":"240","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"orElse","id":"orElse","children":[{"returnType":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"240","kind":"method"},{"returnType":{"refId":"dart.core/Iterable/E","name":"E"},"comment":"\nReturns the last element that satisfies the given predicate [test].\n\nIf none matches, the result of invoking the [orElse] function is\nreturned. By default, when [orElse] is `null`, a [StateError] is\nthrown.\n","name":"lastWhere","id":"lastWhere2()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"sdk/lib/core/iterable.dart","name":"element","id":"element","line":"249","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"orElse","id":"orElse","children":[{"returnType":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"249","kind":"method"},{"returnType":{"refId":"dart.core/Iterable/E","name":"E"},"comment":"\nReturns the single element that satisfies [test]. If no or more than one\nelement match then a [StateError] is thrown.\n","name":"singleWhere","id":"singleWhere1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"sdk/lib/core/iterable.dart","name":"element","id":"element","line":"255","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"255","kind":"method"},{"returnType":{"refId":"dart.core/Iterable/E","name":"E"},"comment":"\nReturns the [index]th element.\n\nIf `this` has fewer than [index] elements throws a [RangeError].\n\nNote: if `this` does not have a deterministic iteration order then the\nfunction may simply return any element without any iteration if there are\nat least [index] elements in `this`.\n","name":"elementAt","id":"elementAt1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"index","id":"index","kind":"param"}],"line":"266","kind":"method"},{"ref":{"refId":"dart.core/Iterator","arguments":[{"refId":"dart.core/Iterable/E","name":"E"}],"name":"Iterator"},"comment":"\nReturns an [Iterator] that iterates over this [Iterable] object.\n","name":"iterator","id":"iterator","line":"39","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nReturns the number of elements in [this].\n\nCounting all elements may be involve running through all elements and can\ntherefore be slow.\n","name":"length","id":"length","line":"157","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"\nReturns true if there is no element in this collection.\n","name":"isEmpty","id":"isEmpty","line":"162","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"\nReturns true if there is at least one element in this collection.\n","name":"isNotEmpty","id":"isNotEmpty","line":"167","kind":"property"},{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"comment":"\nReturns the first element.\n\nIf `this` is empty throws a [StateError]. Otherwise this method is\nequivalent to [:this.elementAt(0):]\n","name":"first","id":"first","line":"217","kind":"property"},{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"comment":"\nReturns the last element.\n\nIf `this` is empty throws a [StateError].\n","name":"last","id":"last","line":"224","kind":"property"},{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"comment":"\nReturns the single element in `this`.\n\nIf `this` is empty or has more than one element throws a [StateError].\n","name":"single","id":"single","line":"231","kind":"property"},{"name":"Iterable","id":"Iterable0()","line":"20","kind":"constructor"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Iterable/E","name":"E"}],"name":"Iterable"},"comment":"\nCreate an [Iterable] that generates its elements dynamically.\n\nThe [Iterators] created by the [Iterable] will count from\nzero to [:count - 1:] while iterating, and call [generator]\nwith that index to create the next value.\n\nAs an [Iterable], [:new Iterable.generate(n, generator)):] is equivalent to\n[:const [0, ..., n - 1].map(generator):]\n","name":"Iterable.generate","id":"Iterable.generate2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"count","id":"count","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"generator","id":"generator","children":[{"returnType":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/int","name":"int"},"uri":"sdk/lib/core/iterable.dart","name":"index","id":"index","line":"32","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"32","kind":"constructor"},{"name":"E","id":"E","kind":"typeparam"}],"line":"19","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nRepresentation of the invocation of a member on an object.\n\nThis is the type of objects passed to [Object.noSuchMethod] when\nan object doesn't support the member invocation that was attempted\non it.\n","uri":"sdk/lib/core/invocation.dart","name":"Invocation","id":"Invocation","children":[{"ref":{"refId":"dart.core/Symbol","name":"Symbol"},"comment":"The name of the invoked member. ","name":"memberName","id":"memberName","line":"16","kind":"property"},{"ref":{"refId":"dart.core/List","name":"List"},"comment":"An unmodifiable view of the positional arguments of the call. ","name":"positionalArguments","id":"positionalArguments","line":"19","kind":"property"},{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/Symbol","name":"Symbol"}],"name":"Map"},"comment":"An unmodifiable view of the named arguments of the call. ","name":"namedArguments","id":"namedArguments","line":"22","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether the invocation was a method call. ","name":"isMethod","id":"isMethod","line":"25","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"\nWhether the invocation was a getter call.\nIf so, both types of arguments will be null.\n","name":"isGetter","id":"isGetter","line":"31","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"\nWhether the invocation was a setter call.\n\nIf so, [arguments] will have exactly one positonal argument,\nand namedArguments will be null.\n","name":"isSetter","id":"isSetter","line":"39","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether the invocation was a getter or a setter call. ","name":"isAccessor","id":"isAccessor","line":"42","kind":"property"}],"line":"14","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/num","name":"num"},"comment":"\nRepresentation of Dart integers containing integer specific\noperations and specialization of operations inherited from [num].\n\nIntegers can be arbitrarily large in Dart.\n\n*Note however, that when compiling to JavaScript, integers are\nimplemented as JavaScript numbers. When compiling to JavaScript,\nintegers are therefore restricted to 53 significant bits because\nall JavaScript numbers are double-precision floating point\nvalues. The behavior of the operators and methods in the [int]\nclass therefore sometimes differs between the Dart VM and Dart code\ncompiled to JavaScript.*\n","uri":"sdk/lib/core/int.dart","name":"int","id":"int","children":[{"returnType":{"refId":"dart.core/int","name":"int"},"isOperator":true,"comment":"The bit-wise and operator. ","name":"&","id":"&1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"other","id":"other","kind":"param"}],"line":"23","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"isOperator":true,"comment":"The bit-wise or operator. ","name":"|","id":"|1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"other","id":"other","kind":"param"}],"line":"26","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"isOperator":true,"comment":"The bit-wise xor operator. ","name":"^","id":"^1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"other","id":"other","kind":"param"}],"line":"29","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"isOperator":true,"comment":"The bit-wise negate operator. ","name":"~","id":"~0()","line":"32","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"isOperator":true,"comment":"The left shift operator. ","name":"<<","id":"<<1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"shiftAmount","id":"shiftAmount","kind":"param"}],"line":"35","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"isOperator":true,"comment":"The right shift operator. ","name":">>","id":">>1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"shiftAmount","id":"shiftAmount","kind":"param"}],"line":"38","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"isOperator":true,"comment":"Negate operator. Negating an integer produces an integer. ","name":"unary-","id":"unary-0()","line":"47","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"comment":"Returns the absolute value of this integer. ","name":"abs","id":"abs0()","line":"50","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"comment":"Returns `this`. ","name":"round","id":"round0()","line":"53","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"comment":"Returns `this`. ","name":"floor","id":"floor0()","line":"56","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"comment":"Returns [this]. ","name":"ceil","id":"ceil0()","line":"59","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"comment":"Returns [this]. ","name":"truncate","id":"truncate0()","line":"62","kind":"method"},{"returnType":{"refId":"dart.core/double","name":"double"},"comment":"Returns `this.toDouble()`. ","name":"roundToDouble","id":"roundToDouble0()","line":"65","kind":"method"},{"returnType":{"refId":"dart.core/double","name":"double"},"comment":"Returns `this.toDouble()`. ","name":"floorToDouble","id":"floorToDouble0()","line":"68","kind":"method"},{"returnType":{"refId":"dart.core/double","name":"double"},"comment":"Returns `this.toDouble()`. ","name":"ceilToDouble","id":"ceilToDouble0()","line":"71","kind":"method"},{"returnType":{"refId":"dart.core/double","name":"double"},"comment":"Returns `this.toDouble()`. ","name":"truncateToDouble","id":"truncateToDouble0()","line":"74","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns a representation of this [int] value.\n\nIt should always be the case that if [:i:] is an [int] value,\nthen [:i == int.parse(i.toString()):].\n","name":"toString","id":"toString0()","line":"82","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nConverts [this] to a string representation in the given [radix].\n\nIn the string representation, lower-case letters are used for digits above\n'9'.\n\nThe [radix] argument must be an integer in the range 2 to 36.\n","name":"toRadixString","id":"toRadixString1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"radix","id":"radix","kind":"param"}],"line":"92","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"\nParse [source] as an integer literal and return its value.\n\nThe [radix] must be in the range 2..36. The digits used are\nfirst the decimal digits 0..9, and then the letters 'a'..'z'.\nAccepts capital letters as well.\n\nIf no [radix] is given then it defaults to 16 if the string starts\nwith \"0x\", \"-0x\" or \"+0x\" and 10 otherwise.\n\nThe [source] must be a non-empty sequence of base-[radix] digits,\noptionally prefixed with a minus or plus sign ('-' or '+').\n\nIt must always be the case for an int [:n:] and radix [:r:] that\n[:n == parseRadix(n.toRadixString(r), r):].\n\nIf the [source] is not a valid integer literal, optionally prefixed by a\nsign, the [onError] is called with the [source] as argument, and its return\nvalue is used instead. If no [onError] is provided, a [FormatException]\nis thrown.\n","name":"parse","id":"parse3()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"source","id":"source","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"name":"radix","id":"radix","line":"116","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"onError","id":"onError","children":[{"returnType":{"refId":"dart.core/int","name":"int"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/String","name":"String"},"uri":"sdk/lib/core/int.dart","name":"source","id":"source","line":"117","kind":"param"}],"line":"13","kind":"functiontype"}],"line":"117","kind":"param"}],"line":"115","kind":"method"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Returns true if and only if this integer is even. ","name":"isEven","id":"isEven","line":"41","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Returns true if and only if this integer is odd. ","name":"isOdd","id":"isOdd","line":"44","kind":"property"}],"line":"21","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nSuper-type of all function types.\n\nA function value, or an instance of a class with a \"call\" method, is a\nsubtype of a function type, and as such, a subtype of [Function].\n","uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"isStatic":true,"comment":"\nDynamically call [function] with the specified arguments.\n\nActs the same as calling function with positional arguments\ncorresponding to the elements of [positionalArguments] and\nnamed arguments corresponding to the elements of [namedArguments].\n\nThis includes giving the same errors if [function] isn't callable or\nif it expects different parameters.\n\nExample: [:\nMap<Symbol, dynamic> namedArguments = new Map<Symbol, dynamic>();\nnamedArguments[const Symbol(\"f\")] = 4;\nnamedArguments[const Symbol(\"g\")] = 5;\nFunction.apply(foo, [1,2,3], namedArguments); :]\ngives exactly the same result as [: foo(1, 2, 3, f: 4, g: 5) :].\n\nIf [positionalArguments] is null, it's considered an empty list.\nIf [namedArguments] is omitted or null, it is considered an empty map.\n","name":"apply","id":"apply3()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"function","id":"function","kind":"param"},{"ref":{"refId":"dart.core/List","name":"List"},"name":"positionalArguments","id":"positionalArguments","line":"35","kind":"param"},{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/Symbol","name":"Symbol"}],"name":"Map"},"isOptional":true,"name":"namedArguments","id":"namedArguments","line":"36","kind":"param"}],"line":"34","kind":"method"}],"line":"13","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nAn [Expando] allows adding new properties to objects.\n","uri":"sdk/lib/core/expando.dart","name":"Expando","id":"Expando","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nExpando toString method override.\n","name":"toString","id":"toString0()","line":"29","kind":"method"},{"returnType":{"refId":"dart.core/Expando/T","name":"T"},"isOperator":true,"comment":"\nGets the value of this [Expando]'s property on the given\nobject. If the object hasn't been expanded, the method returns\n[null].\n","name":"[]","id":"[]1()","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"name":"object","id":"object","kind":"param"}],"line":"36","kind":"method"},{"returnType":{"refId":"void","name":"void"},"isOperator":true,"comment":"\nSets the value of this [Expando]'s property on the given\nobject. Properties can effectively be removed again by setting\ntheir value to null.\n","name":"[]=","id":"[]=2()","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"name":"object","id":"object","kind":"param"},{"ref":{"refId":"dart.core/Expando/T","name":"T"},"name":"value","id":"value","kind":"param"}],"line":"43","kind":"method"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"comment":"\nThe name of the this [Expando] as passed to the constructor. If\nno name was passed to the constructor, the name is [null].\n","name":"name","id":"name","line":"16","kind":"variable"},{"comment":"\nCreates a new [Expando]. The optional name is only used for\ndebugging purposes and creating two different [Expando]s with the\nsame name yields two [Expando]s that work on different properties\nof the objects they are used on.\n","name":"Expando","id":"Expando1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"name","id":"name","kind":"param"}],"line":"24","kind":"constructor"},{"name":"T","id":"T","kind":"typeparam"}],"line":"10","kind":"class"},{"interfaces":[{"refId":"dart.core/Exception","name":"Exception"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"isThrowable":true,"uri":"sdk/lib/core/exceptions.dart","name":"IntegerDivisionByZeroException","id":"IntegerDivisionByZeroException","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"name":"toString","id":"toString0()","line":"58","kind":"method"},{"name":"IntegerDivisionByZeroException","id":"IntegerDivisionByZeroException0()","line":"57","kind":"constructor"}],"line":"56","kind":"class"},{"interfaces":[{"refId":"dart.core/Exception","name":"Exception"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"isThrowable":true,"comment":"\nException thrown when a string or some other data does not have an expected\nformat and cannot be parsed or processed.\n","uri":"sdk/lib/core/exceptions.dart","name":"FormatException","id":"FormatException","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"name":"toString","id":"toString0()","line":"53","kind":"method"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"comment":"\nA message describing the format error.\n","name":"message","id":"message","line":"46","kind":"variable"},{"comment":"\nCreates a new FormatException with an optional error [message].\n","name":"FormatException","id":"FormatException1()","children":[{"initializedField":{"refId":"dart.core/FormatException/message","name":"message"},"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"defaultValue":"\"\"","name":"message","id":"message","kind":"param"}],"line":"51","kind":"constructor"}],"line":"42","kind":"class"},{"interfaces":[{"refId":"dart.core/Exception","name":"Exception"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"isThrowable":true,"comment":"Default implementation of [Exception] which carries a message. ","uri":"sdk/lib/core/exceptions.dart","name":"_ExceptionImplementation","isPrivate":true,"id":"_ExceptionImplementation","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"name":"toString","id":"toString0()","line":"31","kind":"method"},{"isFinal":true,"name":"message","id":"message","line":"27","kind":"variable"},{"name":"_ExceptionImplementation","id":"_ExceptionImplementation1()","children":[{"initializedField":{"refId":"dart.core/_ExceptionImplementation/message","name":"message"},"isOptional":true,"name":"message","id":"message","kind":"param"}],"line":"29","kind":"constructor"}],"line":"26","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"isThrowable":true,"comment":"\nA marker interface implemented by all core library exceptions.\n\nAn [Exception] is intended to convey information to the user about a failure,\nso that the error can be addressed programmatically. It is intended to be\ncaught, and it should contain useful data fields.\n\nCreating instances of [Exception] directly with [:new Exception(\"message\"):]\nis discouraged, and only included as a temporary measure during development,\nuntil the actual exceptions used by a library are done.\n","uri":"sdk/lib/core/exceptions.dart","name":"Exception","id":"Exception","children":[{"returnType":{"refId":"dart.core/Exception","name":"Exception"},"name":"Exception","id":"Exception1()","children":[{"isOptional":true,"name":"message","id":"message","kind":"param"}],"line":"21","kind":"constructor"}],"line":"20","kind":"class"},{"interfaces":[{"refId":"dart.core/Error","name":"Error"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"isThrowable":true,"comment":"\nError thrown when a lazily initialized variable cannot be initialized.\n\nA static/library variable with an initializer expression is initialized\nthe first time it is read. If evaluating the initializer expression causes\nanother read of the variable, this error is thrown.\n","uri":"sdk/lib/core/errors.dart","name":"CyclicInitializationError","id":"CyclicInitializationError","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"name":"toString","id":"toString0()","line":"255","kind":"method"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"name":"variableName","id":"variableName","line":"253","kind":"variable"},{"name":"CyclicInitializationError","id":"CyclicInitializationError1()","children":[{"initializedField":{"refId":"dart.core/CyclicInitializationError/variableName","name":"variableName"},"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"variableName","id":"variableName","kind":"param"}],"line":"254","kind":"constructor"}],"line":"252","kind":"class"},{"interfaces":[{"refId":"dart.core/Error","name":"Error"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"isThrowable":true,"uri":"sdk/lib/core/errors.dart","name":"FiftyThreeBitOverflowError","id":"FiftyThreeBitOverflowError","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"name":"toString","id":"toString0()","line":"242","kind":"method"},{"ref":{"refId":"dart.core/Object","name":"Object"},"isFinal":true,"name":"value","id":"value","line":"239","kind":"variable"},{"name":"FiftyThreeBitOverflowError","id":"FiftyThreeBitOverflowError1()","children":[{"initializedField":{"refId":"dart.core/FiftyThreeBitOverflowError/value","name":"value"},"ref":{"refId":"dart.core/Object","name":"Object"},"name":"value","id":"value","kind":"param"}],"line":"241","kind":"constructor"}],"line":"238","kind":"class"},{"interfaces":[{"refId":"dart.core/Error","name":"Error"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"isThrowable":true,"uri":"sdk/lib/core/errors.dart","name":"StackOverflowError","id":"StackOverflowError","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"name":"toString","id":"toString0()","line":"235","kind":"method"},{"name":"StackOverflowError","id":"StackOverflowError0()","line":"234","kind":"constructor"}],"line":"233","kind":"class"},{"interfaces":[{"refId":"dart.core/Error","name":"Error"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"isThrowable":true,"uri":"sdk/lib/core/errors.dart","name":"OutOfMemoryError","id":"OutOfMemoryError","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"name":"toString","id":"toString0()","line":"229","kind":"method"},{"name":"OutOfMemoryError","id":"OutOfMemoryError0()","line":"228","kind":"constructor"}],"line":"227","kind":"class"},{"interfaces":[{"refId":"dart.core/Error","name":"Error"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"isThrowable":true,"comment":"\nError occurring when a collection is modified during iteration.\n\nSome modifications may be allowed for some collections, so each collection\n([Iterable] or similar collection of values) should declare which operations\nare allowed during an iteration.\n","uri":"sdk/lib/core/errors.dart","name":"ConcurrentModificationError","id":"ConcurrentModificationError","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"name":"toString","id":"toString0()","line":"217","kind":"method"},{"ref":{"refId":"dart.core/Object","name":"Object"},"isFinal":true,"comment":"The object that was modified in an incompatible way. ","name":"modifiedObject","id":"modifiedObject","line":"213","kind":"variable"},{"name":"ConcurrentModificationError","id":"ConcurrentModificationError1()","children":[{"initializedField":{"refId":"dart.core/ConcurrentModificationError/modifiedObject","name":"modifiedObject"},"ref":{"refId":"dart.core/Object","name":"Object"},"isOptional":true,"name":"modifiedObject","id":"modifiedObject","kind":"param"}],"line":"215","kind":"constructor"}],"line":"211","kind":"class"},{"interfaces":[{"refId":"dart.core/Error","name":"Error"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"isThrowable":true,"comment":"\nThe operation was not allowed by the current state of the object.\n\nThis is a generic error used for a variety of different erroneous\nactions. The message should be descriptive.\n","uri":"sdk/lib/core/errors.dart","name":"StateError","id":"StateError","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"name":"toString","id":"toString0()","line":"200","kind":"method"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"name":"message","id":"message","line":"198","kind":"variable"},{"name":"StateError","id":"StateError1()","children":[{"initializedField":{"refId":"dart.core/StateError/message","name":"message"},"ref":{"refId":"dart.core/String","name":"String"},"name":"message","id":"message","kind":"param"}],"line":"199","kind":"constructor"}],"line":"197","kind":"class"},{"interfaces":[{"refId":"dart.core/UnsupportedError","name":"UnsupportedError"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"isThrowable":true,"comment":"\nThrown by operations that have not been implemented yet.\n\nThis [Error] is thrown by unfinished code that hasn't yet implemented\nall the features it needs.\n\nIf a class is not intending to implement the feature, it should throw\nan [UnsupportedError] instead. This error is only intended for\nuse during development.\n","uri":"sdk/lib/core/errors.dart","name":"UnimplementedError","id":"UnimplementedError","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"name":"toString","id":"toString0()","line":"185","kind":"method"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"name":"message","id":"message","line":"183","kind":"variable"},{"name":"UnimplementedError","id":"UnimplementedError1()","children":[{"initializedField":{"refId":"dart.core/UnimplementedError/message","name":"message"},"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"message","id":"message","kind":"param"}],"line":"184","kind":"constructor"}],"line":"182","kind":"class"},{"interfaces":[{"refId":"dart.core/Error","name":"Error"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"isThrowable":true,"comment":"\nThe operation was not allowed by the object.\n\nThis [Error] is thrown when an instance cannot implement one of the methods\nin its signature.\n","uri":"sdk/lib/core/errors.dart","name":"UnsupportedError","id":"UnsupportedError","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"name":"toString","id":"toString0()","line":"168","kind":"method"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"name":"message","id":"message","line":"166","kind":"variable"},{"name":"UnsupportedError","id":"UnsupportedError1()","children":[{"initializedField":{"refId":"dart.core/UnsupportedError/message","name":"message"},"ref":{"refId":"dart.core/String","name":"String"},"name":"message","id":"message","kind":"param"}],"line":"167","kind":"constructor"}],"line":"165","kind":"class"},{"interfaces":[{"refId":"dart.core/Error","name":"Error"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"isThrowable":true,"comment":"\nError thrown by the default implementation of [:noSuchMethod:] on [Object].\n","uri":"sdk/lib/core/errors.dart","name":"NoSuchMethodError","id":"NoSuchMethodError","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"name":"toString","id":"toString0()","line":"155","kind":"method"},{"ref":{"refId":"dart.core/Object","name":"Object"},"isFinal":true,"name":"_receiver","isPrivate":true,"id":"_receiver","line":"128","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"name":"_memberName","isPrivate":true,"id":"_memberName","line":"129","kind":"variable"},{"ref":{"refId":"dart.core/List","name":"List"},"isFinal":true,"name":"_arguments","isPrivate":true,"id":"_arguments","line":"130","kind":"variable"},{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"Map"},"isFinal":true,"name":"_namedArguments","isPrivate":true,"id":"_namedArguments","line":"131","kind":"variable"},{"ref":{"refId":"dart.core/List","name":"List"},"isFinal":true,"name":"_existingArgumentNames","isPrivate":true,"id":"_existingArgumentNames","line":"132","kind":"variable"},{"comment":"\nCreate a [NoSuchMethodError] corresponding to a failed method call.\n\nThe first parameter to this constructor is the receiver of the method call.\nThat is, the object on which the method was attempted called.\nThe second parameter is the name of the called method or accessor.\nThe third parameter is a list of the positional arguments that the method\nwas called with.\nThe fourth parameter is a map from [String] names to the values of named\narguments that the method was called with.\nThe optional [exisitingArgumentNames] is the expected parameters of a\nmethod with the same name on the receiver, if available. This is\nthe method that would have been called if the parameters had matched.\n","name":"NoSuchMethodError","id":"NoSuchMethodError5()","children":[{"initializedField":{"refId":"dart.core/NoSuchMethodError/_receiver","name":"_receiver"},"ref":{"refId":"dart.core/Object","name":"Object"},"name":"_receiver","isPrivate":true,"id":"_receiver","kind":"param"},{"initializedField":{"refId":"dart.core/NoSuchMethodError/_memberName","name":"_memberName"},"ref":{"refId":"dart.core/String","name":"String"},"name":"_memberName","isPrivate":true,"id":"_memberName","line":"149","kind":"param"},{"initializedField":{"refId":"dart.core/NoSuchMethodError/_arguments","name":"_arguments"},"ref":{"refId":"dart.core/List","name":"List"},"name":"_arguments","isPrivate":true,"id":"_arguments","line":"150","kind":"param"},{"initializedField":{"refId":"dart.core/NoSuchMethodError/_namedArguments","name":"_namedArguments"},"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"Map"},"name":"_namedArguments","isPrivate":true,"id":"_namedArguments","line":"151","kind":"param"},{"ref":{"refId":"dart.core/List","name":"List"},"isOptional":true,"defaultValue":"null","name":"existingArgumentNames","id":"existingArgumentNames","line":"152","kind":"param"}],"line":"148","kind":"constructor"}],"line":"127","kind":"class"},{"interfaces":[{"refId":"dart.core/Error","name":"Error"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"isThrowable":true,"uri":"sdk/lib/core/errors.dart","name":"AbstractClassInstantiationError","id":"AbstractClassInstantiationError","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"name":"toString","id":"toString0()","line":"121","kind":"method"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"name":"_className","isPrivate":true,"id":"_className","line":"119","kind":"variable"},{"name":"AbstractClassInstantiationError","id":"AbstractClassInstantiationError1()","children":[{"initializedField":{"refId":"dart.core/AbstractClassInstantiationError/_className","name":"_className"},"ref":{"refId":"dart.core/String","name":"String"},"name":"_className","isPrivate":true,"id":"_className","kind":"param"}],"line":"120","kind":"constructor"}],"line":"118","kind":"class"},{"interfaces":[{"refId":"dart.core/Error","name":"Error"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"isThrowable":true,"comment":"\nError thrown when control reaches the end of a switch case.\n\nThe Dart specification requires this error to be thrown when\ncontrol reaches the end of a switch case (except the last case\nof a switch) without meeting a break or similar end of the control\nflow.\n","uri":"sdk/lib/core/errors.dart","name":"FallThroughError","id":"FallThroughError","children":[{"name":"FallThroughError","id":"FallThroughError0()","line":"114","kind":"constructor"}],"line":"113","kind":"class"},{"superclass":{"refId":"dart.core/ArgumentError","name":"ArgumentError"},"isThrowable":true,"comment":"\nError thrown because of an index outside of the valid range.\n\n","uri":"sdk/lib/core/errors.dart","name":"RangeError","id":"RangeError","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"name":"toString","id":"toString0()","line":"101","kind":"method"},{"comment":"\nCreate a new [RangeError] with the given [message].\n\nTemporarily made const for backwards compatibilty.\n","name":"RangeError","id":"RangeError1()","children":[{"name":"message","id":"message","kind":"param"}],"line":"92","kind":"constructor"},{"comment":"Create a new [RangeError] with a message for the given [value]. ","name":"RangeError.value","id":"RangeError.value1()","children":[{"ref":{"refId":"dart.core/num","name":"num"},"name":"value","id":"value","kind":"param"}],"line":"95","kind":"constructor"},{"comment":"Create a new [RangeError] with a message for a value and a range. ","name":"RangeError.range","id":"RangeError.range3()","children":[{"ref":{"refId":"dart.core/num","name":"num"},"name":"value","id":"value","kind":"param"},{"ref":{"refId":"dart.core/num","name":"num"},"name":"start","id":"start","kind":"param"},{"ref":{"refId":"dart.core/num","name":"num"},"name":"end","id":"end","kind":"param"}],"line":"98","kind":"constructor"}],"line":"84","kind":"class"},{"interfaces":[{"refId":"dart.core/Error","name":"Error"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"isThrowable":true,"comment":"\nError thrown when a function is passed an unacceptable argument.\n","uri":"sdk/lib/core/errors.dart","name":"ArgumentError","id":"ArgumentError","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"name":"toString","id":"toString0()","line":"72","kind":"method"},{"isFinal":true,"name":"message","id":"message","line":"67","kind":"variable"},{"comment":"The [message] describes the erroneous argument. ","name":"ArgumentError","id":"ArgumentError1()","children":[{"initializedField":{"refId":"dart.core/ArgumentError/message","name":"message"},"isOptional":true,"name":"message","id":"message","kind":"param"}],"line":"70","kind":"constructor"}],"line":"66","kind":"class"},{"interfaces":[{"refId":"dart.core/Error","name":"Error"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"isThrowable":true,"comment":"\nError thrown when attempting to throw [:null:].\n","uri":"sdk/lib/core/errors.dart","name":"NullThrownError","id":"NullThrownError","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"name":"toString","id":"toString0()","line":"60","kind":"method"},{"name":"NullThrownError","id":"NullThrownError0()","line":"59","kind":"constructor"}],"line":"58","kind":"class"},{"interfaces":[{"refId":"dart.core/Error","name":"Error"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"isThrowable":true,"comment":"\nError thrown by the runtime system when a cast operation fails.\n","uri":"sdk/lib/core/errors.dart","name":"CastError","id":"CastError","line":"52","kind":"class"},{"interfaces":[{"refId":"dart.core/AssertionError","name":"AssertionError"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"isThrowable":true,"comment":"\nError thrown by the runtime system when a type assertion fails.\n","uri":"sdk/lib/core/errors.dart","name":"TypeError","id":"TypeError","line":"46","kind":"class"},{"interfaces":[{"refId":"dart.core/Error","name":"Error"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"isThrowable":true,"comment":"\nError thrown by the runtime system when an assert statement fails.\n","uri":"sdk/lib/core/errors.dart","name":"AssertionError","id":"AssertionError","line":"40","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"isThrowable":true,"uri":"sdk/lib/core/errors.dart","name":"Error","id":"Error","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"\nSafely convert a value to a [String] description.\n\nThe conversion is guaranteed to not throw, so it won't use the object's\ntoString method.\n","name":"safeToString","id":"safeToString1()","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"name":"object","id":"object","kind":"param"}],"line":"16","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"isStatic":true,"name":"_objectToString","isPrivate":true,"id":"_objectToString1()","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"name":"object","id":"object","kind":"param"}],"line":"34","kind":"method"},{"name":"Error","id":"Error0()","line":"8","kind":"constructor"}],"line":"7","kind":"class"},{"interfaces":[{"refId":"dart.core/Comparable","arguments":[{"refId":"dart.core/Duration","name":"Duration"}],"name":"Comparable"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nA [Duration] represents a time span. A duration can be negative.\n","uri":"sdk/lib/core/duration.dart","name":"Duration","id":"Duration","children":[{"returnType":{"refId":"dart.core/Duration","name":"Duration"},"isOperator":true,"comment":"\nReturns the sum of this [Duration] and [other]  as a new [Duration].\n","name":"+","id":"+1()","children":[{"ref":{"refId":"dart.core/Duration","name":"Duration"},"name":"other","id":"other","kind":"param"}],"line":"70","kind":"method"},{"returnType":{"refId":"dart.core/Duration","name":"Duration"},"isOperator":true,"comment":"\nReturns the difference of this [Duration] and [other] as a new\n[Duration].\n","name":"-","id":"-1()","children":[{"ref":{"refId":"dart.core/Duration","name":"Duration"},"name":"other","id":"other","kind":"param"}],"line":"78","kind":"method"},{"returnType":{"refId":"dart.core/Duration","name":"Duration"},"isOperator":true,"comment":"\nMultiplies this [Duration] by the given [factor] and returns the result\nas a new [Duration].\n","name":"*","id":"*1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"factor","id":"factor","kind":"param"}],"line":"86","kind":"method"},{"returnType":{"refId":"dart.core/Duration","name":"Duration"},"isOperator":true,"comment":"\nDivides this [Duration] by the given [quotient] and returns the truncated\nresult as a new [Duration].\n\nThrows an [IntegerDivisionByZeroException] if [quotient] is `0`.\n","name":"~/","id":"~#slash1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"quotient","id":"quotient","kind":"param"}],"line":"96","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"name":"<","id":"<1()","children":[{"ref":{"refId":"dart.core/Duration","name":"Duration"},"name":"other","id":"other","kind":"param"}],"line":"103","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"name":">","id":">1()","children":[{"ref":{"refId":"dart.core/Duration","name":"Duration"},"name":"other","id":"other","kind":"param"}],"line":"105","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"name":"<=","id":"<=1()","children":[{"ref":{"refId":"dart.core/Duration","name":"Duration"},"name":"other","id":"other","kind":"param"}],"line":"107","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"name":">=","id":">=1()","children":[{"ref":{"refId":"dart.core/Duration","name":"Duration"},"name":"other","id":"other","kind":"param"}],"line":"109","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"name":"==","id":"==1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"149","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"name":"compareTo","id":"compareTo1()","children":[{"ref":{"refId":"dart.core/Duration","name":"Duration"},"name":"other","id":"other","kind":"param"}],"line":"156","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"name":"toString","id":"toString0()","line":"158","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nThis [Duration] in days. Incomplete days are discarded\n","name":"inDays","id":"inDays","line":"114","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nThis [Duration] in hours. Incomplete hours are discarded.\n\nThe returned value can be greater than 23.\n","name":"inHours","id":"inHours","line":"121","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nThis [Duration] in minutes. Incomplete minutes are discarded.\n\nThe returned value can be greater than 59.\n","name":"inMinutes","id":"inMinutes","line":"128","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nThis [Duration] in seconds. Incomplete seconds are discarded.\n\nThe returned value can be greater than 59.\n","name":"inSeconds","id":"inSeconds","line":"135","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nThis [Duration] in milliseconds. Incomplete milliseconds are discarded.\n\nThe returned value can be greater than 999.\n","name":"inMilliseconds","id":"inMilliseconds","line":"142","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nThis [Duration] in microseconds.\n","name":"inMicroseconds","id":"inMicroseconds","line":"147","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"hashCode","id":"hashCode","line":"154","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"MICROSECONDS_PER_MILLISECOND","id":"MICROSECONDS_PER_MILLISECOND","line":"11","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"MILLISECONDS_PER_SECOND","id":"MILLISECONDS_PER_SECOND","line":"12","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"SECONDS_PER_MINUTE","id":"SECONDS_PER_MINUTE","line":"13","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"MINUTES_PER_HOUR","id":"MINUTES_PER_HOUR","line":"14","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"HOURS_PER_DAY","id":"HOURS_PER_DAY","line":"15","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"MICROSECONDS_PER_SECOND","id":"MICROSECONDS_PER_SECOND","line":"17","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"MICROSECONDS_PER_MINUTE","id":"MICROSECONDS_PER_MINUTE","line":"19","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"MICROSECONDS_PER_HOUR","id":"MICROSECONDS_PER_HOUR","line":"21","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"MICROSECONDS_PER_DAY","id":"MICROSECONDS_PER_DAY","line":"23","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"MILLISECONDS_PER_MINUTE","id":"MILLISECONDS_PER_MINUTE","line":"27","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"MILLISECONDS_PER_HOUR","id":"MILLISECONDS_PER_HOUR","line":"29","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"MILLISECONDS_PER_DAY","id":"MILLISECONDS_PER_DAY","line":"31","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"SECONDS_PER_HOUR","id":"SECONDS_PER_HOUR","line":"34","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"SECONDS_PER_DAY","id":"SECONDS_PER_DAY","line":"35","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"MINUTES_PER_DAY","id":"MINUTES_PER_DAY","line":"37","kind":"variable"},{"ref":{"refId":"dart.core/Duration","name":"Duration"},"isStatic":true,"name":"ZERO","id":"ZERO","line":"39","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"comment":"\nThis [Duration] in microseconds.\n","name":"_duration","isPrivate":true,"id":"_duration","line":"44","kind":"variable"},{"comment":"\nThe duration is the sum of all individual parts. This means that individual\nparts don't need to be less than the next-bigger unit. For example [hours]\nis allowed to have a value greater than 23.\n\nAll individual parts are allowed to be negative.\nAll arguments are by default 0.\n","name":"Duration","id":"Duration6()","children":[{"isNamed":true,"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"0","name":"days","id":"days","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"0","name":"hours","id":"hours","line":"55","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"0","name":"minutes","id":"minutes","line":"56","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"0","name":"seconds","id":"seconds","line":"57","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"0","name":"milliseconds","id":"milliseconds","line":"58","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"0","name":"microseconds","id":"microseconds","line":"59","kind":"param"}],"line":"54","kind":"constructor"}],"line":"10","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/num","name":"num"},"comment":"\nRepresentation of Dart doubles containing double specific constants\nand operations and specializations of operations inherited from\n[num].\n\nThe [double] type is contagious. Operations on [double]s return\n[double] results.\n","uri":"sdk/lib/core/double.dart","name":"double","id":"double","children":[{"returnType":{"refId":"dart.core/double","name":"double"},"name":"remainder","id":"remainder1()","children":[{"ref":{"refId":"dart.core/num","name":"num"},"name":"other","id":"other","kind":"param"}],"line":"26","kind":"method"},{"returnType":{"refId":"dart.core/double","name":"double"},"isOperator":true,"comment":"Addition operator. ","name":"+","id":"+1()","children":[{"ref":{"refId":"dart.core/num","name":"num"},"name":"other","id":"other","kind":"param"}],"line":"29","kind":"method"},{"returnType":{"refId":"dart.core/double","name":"double"},"isOperator":true,"comment":"Subtraction operator. ","name":"-","id":"-1()","children":[{"ref":{"refId":"dart.core/num","name":"num"},"name":"other","id":"other","kind":"param"}],"line":"32","kind":"method"},{"returnType":{"refId":"dart.core/double","name":"double"},"isOperator":true,"comment":"Multiplication operator. ","name":"*","id":"*1()","children":[{"ref":{"refId":"dart.core/num","name":"num"},"name":"other","id":"other","kind":"param"}],"line":"35","kind":"method"},{"returnType":{"refId":"dart.core/double","name":"double"},"isOperator":true,"name":"%","id":"%1()","children":[{"ref":{"refId":"dart.core/num","name":"num"},"name":"other","id":"other","kind":"param"}],"line":"37","kind":"method"},{"returnType":{"refId":"dart.core/double","name":"double"},"isOperator":true,"comment":"Division operator. ","name":"/","id":"#slash1()","children":[{"ref":{"refId":"dart.core/num","name":"num"},"name":"other","id":"other","kind":"param"}],"line":"40","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"isOperator":true,"comment":"\nTruncating division operator.\n\nThe result of the truncating division [:a ~/ b:] is equivalent to\n[:(a / b).truncate():].\n","name":"~/","id":"~#slash1()","children":[{"ref":{"refId":"dart.core/num","name":"num"},"name":"other","id":"other","kind":"param"}],"line":"48","kind":"method"},{"returnType":{"refId":"dart.core/double","name":"double"},"isOperator":true,"comment":"Negate operator. ","name":"unary-","id":"unary-0()","line":"51","kind":"method"},{"returnType":{"refId":"dart.core/double","name":"double"},"comment":"Returns the absolute value of this [double]. ","name":"abs","id":"abs0()","line":"54","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"comment":"\nReturns the integer closest to `this`.\n\nRounds away from zero when there is no closest integer:\n [:(3.5).round() == 4:] and [:(-3.5).round() == -4:].\n\nIf `this` is not finite (`NaN` or infinity), throws an [UnsupportedError].\n","name":"round","id":"round0()","line":"64","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"comment":"\nReturns the greatest integer no greater than `this`.\n\nIf `this` is not finite (`NaN` or infinity), throws an [UnsupportedError].\n","name":"floor","id":"floor0()","line":"71","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"comment":"\nReturns the least integer no smaller than `this`.\n\nIf `this` is not finite (`NaN` or infinity), throws an [UnsupportedError].\n","name":"ceil","id":"ceil0()","line":"78","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"comment":"\nReturns the integer obtained by discarding any fractional\ndigits from `this`.\n\nIf `this` is not finite (`NaN` or infinity), throws an [UnsupportedError].\n","name":"truncate","id":"truncate0()","line":"86","kind":"method"},{"returnType":{"refId":"dart.core/double","name":"double"},"comment":"\nReturns the integer value, as a double, closest to `this`.\n\nRounds away from zero when there is no closest integer:\n [:(3.5).round() == 4:] and [:(-3.5).round() == -4:].\n","name":"roundToDouble","id":"roundToDouble0()","line":"94","kind":"method"},{"returnType":{"refId":"dart.core/double","name":"double"},"comment":"\nReturns the greatest integer value no greater than `this`.\n\nThe result is a double.\n","name":"floorToDouble","id":"floorToDouble0()","line":"101","kind":"method"},{"returnType":{"refId":"dart.core/double","name":"double"},"comment":"\nReturns the least integer value no smaller than `this`.\n\nThe result is a double.\n","name":"ceilToDouble","id":"ceilToDouble0()","line":"108","kind":"method"},{"returnType":{"refId":"dart.core/double","name":"double"},"comment":"\nReturns the integer obtained by discarding any fractional\ndigits from `this`.\n\nThe result is a double.\n","name":"truncateToDouble","id":"truncateToDouble0()","line":"116","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nProvide a representation of this [double] value.\n\nThe representation is a number literal such that the closest double value\nto the representation's mathematical value is this [double].\n\nReturns \"NaN\" for the Not-a-Number value.\nReturns \"Infinity\" and \"-Infinity\" for positive and negative Infinity.\nReturns \"-0.0\" for negative zero.\n\nIt should always be the case that if [:d:] is a [double], then\n[:d == double.parse(d.toString()):].\n","name":"toString","id":"toString0()","line":"131","kind":"method"},{"returnType":{"refId":"dart.core/double","name":"double"},"isStatic":true,"comment":"\nParse [source] as an double literal and return its value.\n\nAccepts an optional sign (`+` or `-`) followed by either the characters\n\"Infinity\", the characters \"NaN\" or a floating-point representation.\nA floating-point representation is composed of a mantissa and an optional\nexponent part. The mantissa is either a decimal point (`.`) followed by a\nsequence of (decimal) digits, or a sequence of digits\noptionally followed by a decimal point and optionally more digits. The\n(optional) exponent part consists of the character \"e\" or \"E\", an optional\nsign, and one or more digits.\n\nThe input string is trimmed (see [String.trim]) before conversion.\n\nIf the [source] is not a valid double literal, the [handleError]\nis called with the [source] as argument, and its return value is\nused instead. If no handleError is provided, a [FormatException]\nis thrown.\n\nExamples of accepted strings:\n\n    \"3.14\"\n    \"  3.14 \\xA0\"\n    \"0.\"\n    \".0\"\n    \"-1.e3\"\n    \"1234E+7\"\n    \"+.12e-9\"\n    \"-NaN\"\n","name":"parse","id":"parse2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"source","id":"source","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"handleError","id":"handleError","children":[{"returnType":{"refId":"dart.core/double","name":"double"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/String","name":"String"},"uri":"sdk/lib/core/double.dart","name":"source","id":"source","line":"164","kind":"param"}],"line":"13","kind":"functiontype"}],"line":"164","kind":"param"}],"line":"163","kind":"method"},{"ref":{"refId":"dart.core/double","name":"double"},"isStatic":true,"name":"NAN","id":"NAN","line":"20","kind":"variable"},{"ref":{"refId":"dart.core/double","name":"double"},"isStatic":true,"name":"INFINITY","id":"INFINITY","line":"21","kind":"variable"},{"ref":{"refId":"dart.core/double","name":"double"},"isStatic":true,"name":"NEGATIVE_INFINITY","id":"NEGATIVE_INFINITY","line":"22","kind":"variable"},{"ref":{"refId":"dart.core/double","name":"double"},"isStatic":true,"name":"MIN_POSITIVE","id":"MIN_POSITIVE","line":"23","kind":"variable"},{"ref":{"refId":"dart.core/double","name":"double"},"isStatic":true,"name":"MAX_FINITE","id":"MAX_FINITE","line":"24","kind":"variable"}],"line":"19","kind":"class"},{"interfaces":[{"refId":"dart.core/Comparable","name":"Comparable"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nA DateTime object represents a point in time.\n\nIt can represent time values that are at a distance of at most\n8,640,000,000,000,000ms (100,000,000 days) from epoch (1970-01-01 UTC). In\nother words: [:millisecondsSinceEpoch.abs() <= 8640000000000000:].\n\nAlso see [Stopwatch] for means to measure time-spans.\n","uri":"sdk/lib/core/date_time.dart","name":"DateTime","id":"DateTime","children":[{"returnType":{"refId":"dart.core/DateTime","name":"DateTime"},"isStatic":true,"comment":"\nConstructs a new [DateTime] instance based on [formattedString].\n\nThe function parses a subset of ISO 8601. Examples of accepted strings:\n\n* `\"2012-02-27 13:27:00\"`\n* `\"2012-02-27 13:27:00.123456z\"`\n* `\"20120227 13:27:00\"`\n* `\"20120227T132700\"`\n* `\"20120227\"`\n* `\"+20120227\"`\n* `\"2012-02-27T14Z\"`\n* `\"-123450101 00:00:00 Z\"`: in the year -12345.\n","name":"parse","id":"parse1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"formattedString","id":"formattedString","kind":"param"}],"line":"116","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"comment":"\nReturns true if [other] is a [DateTime] at the same moment and in the\nsame timezone (UTC or local).\n\nSee [isAtSameMomentAs] for a comparison that ignores the timezone.\n","name":"==","id":"==1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"186","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"\nReturns true if [this] occurs before [other]. The comparison is independent\nof whether the time is in UTC or in the local time zone.\n","name":"isBefore","id":"isBefore1()","children":[{"ref":{"refId":"dart.core/DateTime","name":"DateTime"},"name":"other","id":"other","kind":"param"}],"line":"196","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"\nReturns true if [this] occurs after [other]. The comparison is independent\nof whether the time is in UTC or in the local time zone.\n","name":"isAfter","id":"isAfter1()","children":[{"ref":{"refId":"dart.core/DateTime","name":"DateTime"},"name":"other","id":"other","kind":"param"}],"line":"204","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"\nReturns true if [this] occurs at the same moment as [other]. The\ncomparison is independent of whether the time is in UTC or in the local\ntime zone.\n","name":"isAtSameMomentAs","id":"isAtSameMomentAs1()","children":[{"ref":{"refId":"dart.core/DateTime","name":"DateTime"},"name":"other","id":"other","kind":"param"}],"line":"213","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"name":"compareTo","id":"compareTo1()","children":[{"ref":{"refId":"dart.core/DateTime","name":"DateTime"},"name":"other","id":"other","kind":"param"}],"line":"217","kind":"method"},{"returnType":{"refId":"dart.core/DateTime","name":"DateTime"},"comment":"\nReturns [this] in the local time zone. Returns itself if it is already in\nthe local time zone. Otherwise, this method is equivalent to\n\n    new DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch,\n                                            isUtc: false)\n","name":"toLocal","id":"toLocal0()","line":"229","kind":"method"},{"returnType":{"refId":"dart.core/DateTime","name":"DateTime"},"comment":"\nReturns [this] in UTC. Returns itself if it is already in UTC. Otherwise,\nthis method is equivalent to\n\n    new DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch,\n                                            isUtc: true)\n","name":"toUtc","id":"toUtc0()","line":"244","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns a human readable string for this instance.\nThe returned string is constructed for the time zone of this instance.\n","name":"toString","id":"toString0()","line":"254","kind":"method"},{"returnType":{"refId":"dart.core/DateTime","name":"DateTime"},"comment":"Returns a new [DateTime] with the [duration] added to [this]. ","name":"add","id":"add1()","children":[{"ref":{"refId":"dart.core/Duration","name":"Duration"},"name":"duration","id":"duration","kind":"param"}],"line":"290","kind":"method"},{"returnType":{"refId":"dart.core/DateTime","name":"DateTime"},"comment":"Returns a new [DateTime] with the [duration] subtracted from [this]. ","name":"subtract","id":"subtract1()","children":[{"ref":{"refId":"dart.core/Duration","name":"Duration"},"name":"duration","id":"duration","kind":"param"}],"line":"297","kind":"method"},{"returnType":{"refId":"dart.core/Duration","name":"Duration"},"comment":"Returns a [Duration] with the difference of [this] and [other]. ","name":"difference","id":"difference1()","children":[{"ref":{"refId":"dart.core/DateTime","name":"DateTime"},"name":"other","id":"other","kind":"param"}],"line":"304","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"_brokenDownDateToMillisecondsSinceEpoch","isPrivate":true,"id":"_brokenDownDateToMillisecondsSinceEpoch8()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"year","id":"year","line":"320","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"month","id":"month","line":"320","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"day","id":"day","line":"320","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"hour","id":"hour","line":"320","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"minute","id":"minute","line":"320","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"second","id":"second","line":"320","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"millisecond","id":"millisecond","line":"321","kind":"param"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isUtc","id":"isUtc","line":"321","kind":"param"}],"line":"319","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"hashCode","id":"hashCode","line":"220","kind":"property"},{"ref":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns the abbreviated time-zone name.\n\nExamples: [:\"CET\":] or [:\"CEST\":].\n","name":"timeZoneName","id":"timeZoneName","line":"328","kind":"property"},{"ref":{"refId":"dart.core/Duration","name":"Duration"},"comment":"\nThe time-zone offset is the difference between local time and UTC. That is,\nthe offset is positive for time zones west of UTC.\n\nNote, that JavaScript, Python and C return the difference between UTC and\nlocal time. Java, C# and Ruby return the difference between local time and\nUTC.\n","name":"timeZoneOffset","id":"timeZoneOffset","line":"338","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nReturns the year.\n","name":"year","id":"year","line":"343","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nReturns the month into the year [1..12].\n","name":"month","id":"month","line":"348","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nReturns the day into the month [1..31].\n","name":"day","id":"day","line":"353","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nReturns the hour into the day [0..23].\n","name":"hour","id":"hour","line":"358","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nReturns the minute into the hour [0...59].\n","name":"minute","id":"minute","line":"363","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nReturns the second into the minute [0...59].\n","name":"second","id":"second","line":"368","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nReturns the millisecond into the second [0...999].\n","name":"millisecond","id":"millisecond","line":"373","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nReturns the week day [MON..SUN]. In accordance with ISO 8601\na week starts with Monday which has the value 1.\n","name":"weekday","id":"weekday","line":"379","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"MONDAY","id":"MONDAY","line":"18","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"TUESDAY","id":"TUESDAY","line":"19","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"WEDNESDAY","id":"WEDNESDAY","line":"20","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"THURSDAY","id":"THURSDAY","line":"21","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"FRIDAY","id":"FRIDAY","line":"22","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"SATURDAY","id":"SATURDAY","line":"23","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"SUNDAY","id":"SUNDAY","line":"24","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"DAYS_PER_WEEK","id":"DAYS_PER_WEEK","line":"25","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"JANUARY","id":"JANUARY","line":"28","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"FEBRUARY","id":"FEBRUARY","line":"29","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"MARCH","id":"MARCH","line":"30","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"APRIL","id":"APRIL","line":"31","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"MAY","id":"MAY","line":"32","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"JUNE","id":"JUNE","line":"33","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"JULY","id":"JULY","line":"34","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"AUGUST","id":"AUGUST","line":"35","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"SEPTEMBER","id":"SEPTEMBER","line":"36","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"OCTOBER","id":"OCTOBER","line":"37","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"NOVEMBER","id":"NOVEMBER","line":"38","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"DECEMBER","id":"DECEMBER","line":"39","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"MONTHS_PER_YEAR","id":"MONTHS_PER_YEAR","line":"40","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"comment":"\nThe milliseconds since 1970-01-01T00:00:00Z (UTC). This value is\nindependent of the time zone.\n\nSee [Stopwatch] for means to measure time-spans.\n","name":"millisecondsSinceEpoch","id":"millisecondsSinceEpoch","line":"48","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"isFinal":true,"comment":"\nTrue if this [DateTime] is set to UTC time.\n","name":"isUtc","id":"isUtc","line":"53","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"_MAX_MILLISECONDS_SINCE_EPOCH","isPrivate":true,"id":"_MAX_MILLISECONDS_SINCE_EPOCH","line":"159","kind":"variable"},{"returnType":{"refId":"dart.core/DateTime","name":"DateTime"},"comment":"\nConstructs a [DateTime] instance based on the individual parts. The date is\nin the local time zone.\n\n[month] and [day] are one-based. For example\n[:new DateTime(1938, 1, 10):] represents the 10th of January 1938.\n","name":"DateTime","id":"DateTime7()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"year","id":"year","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"1","name":"month","id":"month","line":"64","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"1","name":"day","id":"day","line":"65","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"0","name":"hour","id":"hour","line":"66","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"0","name":"minute","id":"minute","line":"67","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"0","name":"second","id":"second","line":"68","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"0","name":"millisecond","id":"millisecond","line":"69","kind":"param"}],"line":"63","kind":"constructor"},{"returnType":{"refId":"dart.core/DateTime","name":"DateTime"},"comment":"\nConstructs a [DateTime] instance based on the individual parts. The date is\nin the UTC time zone.\n\n[month] and [day] are one-based. For example\n[:new DateTime.utc(1938, 1, 10):] represents the 10th of January 1938 in\nCoordinated Universal Time.\n","name":"DateTime.utc","id":"DateTime.utc7()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"year","id":"year","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"1","name":"month","id":"month","line":"84","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"1","name":"day","id":"day","line":"85","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"0","name":"hour","id":"hour","line":"86","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"0","name":"minute","id":"minute","line":"87","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"0","name":"second","id":"second","line":"88","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"0","name":"millisecond","id":"millisecond","line":"89","kind":"param"}],"line":"83","kind":"constructor"},{"returnType":{"refId":"dart.core/DateTime","name":"DateTime"},"comment":"\nConstructs a new [DateTime] instance with current date time value in the\nlocal time zone.\n","name":"DateTime.now","id":"DateTime.now0()","line":"99","kind":"constructor"},{"comment":"\nConstructs a new [DateTime] instance with the given [millisecondsSinceEpoch].\nIf [isUtc] is false then the date is in the local time zone.\n\nThe constructed [DateTime] represents\n1970-01-01T00:00:00Z + [millisecondsSinceEpoch]ms in the given\ntime zone (local or UTC).\n","name":"DateTime.fromMillisecondsSinceEpoch","id":"DateTime.fromMillisecondsSinceEpoch2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"millisecondsSinceEpoch","id":"millisecondsSinceEpoch","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"false","name":"isUtc","id":"isUtc","line":"171","kind":"param"}],"line":"170","kind":"constructor"},{"name":"DateTime._internal","isPrivate":true,"id":"DateTime._internal8()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"year","id":"year","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"month","id":"month","line":"311","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"day","id":"day","line":"312","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"hour","id":"hour","line":"313","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"minute","id":"minute","line":"314","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"second","id":"second","line":"315","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"millisecond","id":"millisecond","line":"316","kind":"param"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isUtc","id":"isUtc","line":"317","kind":"param"}],"line":"310","kind":"constructor"},{"name":"DateTime._now","isPrivate":true,"id":"DateTime._now0()","line":"318","kind":"constructor"}],"line":"16","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nInterface used by types that have an intrinsic ordering.\n","uri":"sdk/lib/core/comparable.dart","name":"Comparable","id":"Comparable","children":[{"returnType":{"refId":"dart.core/int","name":"int"},"comment":"\nCompares this object to another [Comparable]\n\nReturns a value like a [Comparator] when comparing [:this:] to [other].\n\nMay throw an [ArgumentError] if [other] is of a type that\nis not comparable to [:this:].\n","name":"compareTo","id":"compareTo1()","children":[{"ref":{"refId":"dart.core/Comparable/T","name":"T"},"name":"other","id":"other","kind":"param"}],"line":"35","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"\nCompare one comparable to another.\n\nThis utility function is used as the default comparator\nfor the [List] sort function.\n","name":"compare","id":"compare2()","children":[{"ref":{"refId":"dart.core/Comparable","name":"Comparable"},"name":"a","id":"a","kind":"param"},{"ref":{"refId":"dart.core/Comparable","name":"Comparable"},"name":"b","id":"b","kind":"param"}],"line":"43","kind":"method"},{"name":"T","id":"T","kind":"typeparam"}],"line":"26","kind":"class"},{"returnType":{"refId":"dart.core/int","name":"int"},"comment":"\nThe signature of a generic comparison function.\n\nA comparison function represents an ordering on a type of objects.\nA total ordering on a type means that for two values, either they\nare equal or one is greater than the other (and the latter must then be\nsmaller than the former).\n\nA [Comparator] function represents such a total ordering by returning\n\n* a negative integer if [a] is smaller than [b],\n* zero if [a] is equal to [b], and\n* a positive integer if [a] is greater than [b].\n","uri":"sdk/lib/core/comparable.dart","name":"Comparator","id":"Comparator","children":[{"ref":{"refId":"dart.core/Comparator/T","name":"T"},"name":"a","id":"a","kind":"param"},{"ref":{"refId":"dart.core/Comparator/T","name":"T"},"name":"b","id":"b","kind":"param"},{"name":"T","id":"T","kind":"typeparam"}],"line":"21","kind":"typedef"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"uri":"sdk/lib/core/bool.dart","name":"bool","id":"bool","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"bool._uninstantiable","isPrivate":true,"id":"bool._uninstantiable0()","line":"8","kind":"constructor"}],"line":"7","kind":"class"}],"line":"5","kind":"library"}