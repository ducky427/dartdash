{"dependencies":[{"uri":"sdk/lib/core/core.dart","name":"dart:core","id":"dart.core","children":[{"comment":"\nEverything in Dart is an [Object].\n","uri":"sdk/lib/core/object.dart","name":"Object","id":"Object","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","name":"==","id":"==1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"29","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns a string representation of this object.\n","name":"toString","id":"toString0()","line":"48","kind":"method"},{"comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","name":"noSuchMethod","id":"noSuchMethod1()","children":[{"ref":{"refId":"dart.core/Invocation","name":"Invocation"},"name":"invocation","id":"invocation","kind":"param"}],"line":"60","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","name":"hashCode","id":"hashCode","line":"43","kind":"property"},{"ref":{"refId":"dart.core/Type","name":"Type"},"comment":"\nA representation of the runtime type of the object.\n","name":"runtimeType","id":"runtimeType","line":"65","kind":"property"},{"comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","name":"Object","id":"Object0()","line":"18","kind":"constructor"}],"line":"10","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nInterface used by types that have an intrinsic ordering.\n","uri":"sdk/lib/core/comparable.dart","name":"Comparable","id":"Comparable","children":[{"returnType":{"refId":"dart.core/int","name":"int"},"comment":"\nCompares this object to another [Comparable]\n\nReturns a value like a [Comparator] when comparing [:this:] to [other].\n\nMay throw an [ArgumentError] if [other] is of a type that\nis not comparable to [:this:].\n","name":"compareTo","id":"compareTo1()","children":[{"ref":{"refId":"dart.core/Comparable/T","name":"T"},"name":"other","id":"other","kind":"param"}],"line":"35","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"\nCompare one comparable to another.\n\nThis utility function is used as the default comparator\nfor the [List] sort function.\n","name":"compare","id":"compare2()","children":[{"ref":{"refId":"dart.core/Comparable","name":"Comparable"},"name":"a","id":"a","kind":"param"},{"ref":{"refId":"dart.core/Comparable","name":"Comparable"},"name":"b","id":"b","kind":"param"}],"line":"43","kind":"method"},{"name":"T","id":"T","kind":"typeparam"}],"line":"26","kind":"class"}],"line":"5","kind":"library"}],"uri":"pkg/fixnum/lib/fixnum.dart","name":"package:fixnum/fixnum.dart","id":"fixnum","children":[{"interfaces":[{"refId":"fixnum/intx","name":"intx"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nAn immutable 64-bit signed integer, in the range [-2^63, 2^63 - 1].\nArithmetic operations may overflow in order to maintain this range.\n","uri":"pkg/fixnum/lib/src/int64.dart","name":"int64","id":"int64","children":[{"returnType":{"refId":"fixnum/int64","name":"int64"},"isStatic":true,"comment":"\nParses a [String] in a given [radix] between 2 and 16 and returns an\n[int64].\n","name":"parseRadix","id":"parseRadix2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"s","id":"s","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"radix","id":"radix","kind":"param"}],"line":"121","kind":"method"},{"returnType":{"refId":"fixnum/int64","name":"int64"},"isStatic":true,"comment":"\nParses a decimal [String] and returns an [int64].\n","name":"parseInt","id":"parseInt1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"s","id":"s","kind":"param"}],"line":"146","kind":"method"},{"returnType":{"refId":"fixnum/int64","name":"int64"},"isStatic":true,"comment":"\nParses a hexadecimal [String] and returns an [int64].\n","name":"parseHex","id":"parseHex1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"s","id":"s","kind":"param"}],"line":"151","kind":"method"},{"returnType":{"refId":"fixnum/int64","name":"int64"},"name":"_promote","isPrivate":true,"id":"_promote1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"243","kind":"method"},{"returnType":{"refId":"fixnum/int64","name":"int64"},"isOperator":true,"name":"+","id":"+1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"257","kind":"method"},{"returnType":{"refId":"fixnum/int64","name":"int64"},"isOperator":true,"name":"-","id":"-1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"267","kind":"method"},{"returnType":{"refId":"fixnum/int64","name":"int64"},"isOperator":true,"name":"unary-","id":"unary-0()","line":"278","kind":"method"},{"returnType":{"refId":"fixnum/int64","name":"int64"},"isOperator":true,"name":"*","id":"*1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"287","kind":"method"},{"returnType":{"refId":"fixnum/int64","name":"int64"},"isOperator":true,"name":"%","id":"%1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"370","kind":"method"},{"returnType":{"refId":"fixnum/int64","name":"int64"},"isOperator":true,"name":"~/","id":"~#slash1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"382","kind":"method"},{"returnType":{"refId":"fixnum/int64","name":"int64"},"name":"remainder","id":"remainder1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"385","kind":"method"},{"returnType":{"refId":"fixnum/int64","name":"int64"},"isOperator":true,"name":"&","id":"&1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"394","kind":"method"},{"returnType":{"refId":"fixnum/int64","name":"int64"},"isOperator":true,"name":"|","id":"|1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"402","kind":"method"},{"returnType":{"refId":"fixnum/int64","name":"int64"},"isOperator":true,"name":"^","id":"^1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"410","kind":"method"},{"returnType":{"refId":"fixnum/int64","name":"int64"},"isOperator":true,"name":"~","id":"~0()","line":"418","kind":"method"},{"returnType":{"refId":"fixnum/int64","name":"int64"},"isOperator":true,"name":"<<","id":"<<1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"n","id":"n","kind":"param"}],"line":"423","kind":"method"},{"returnType":{"refId":"fixnum/int64","name":"int64"},"isOperator":true,"name":">>","id":">>1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"n","id":"n","kind":"param"}],"line":"447","kind":"method"},{"returnType":{"refId":"fixnum/int64","name":"int64"},"name":"shiftRightUnsigned","id":"shiftRightUnsigned1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"n","id":"n","kind":"param"}],"line":"488","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"comment":"\nReturns [true] if this [int64] has the same numeric value as the\ngiven object.  The argument may be an [int] or an [intx].\n","name":"==","id":"==1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"517","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"name":"compareTo","id":"compareTo1()","children":[{"ref":{"refId":"dart.core/Comparable","name":"Comparable"},"name":"other","id":"other","kind":"param"}],"line":"525","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"name":"<","id":"<1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"550","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"name":"<=","id":"<=1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"554","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"name":">","id":">1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"558","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"name":">=","id":">=1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"562","kind":"method"},{"returnType":{"refId":"fixnum/int64","name":"int64"},"name":"abs","id":"abs0()","line":"582","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"comment":"\nReturns the number of leading zeros in this [int64] as an [int]\nbetween 0 and 64.\n","name":"numberOfLeadingZeros","id":"numberOfLeadingZeros0()","line":"590","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"comment":"\nReturns the number of trailing zeros in this [int64] as an [int]\nbetween 0 and 64.\n","name":"numberOfTrailingZeros","id":"numberOfTrailingZeros0()","line":"608","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"name":"toBytes","id":"toBytes0()","line":"627","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"name":"toInt","id":"toInt0()","line":"640","kind":"method"},{"returnType":{"refId":"fixnum/int32","name":"int32"},"comment":"\nReturns an [int32] containing the low 32 bits of this [int64].\n","name":"toInt32","id":"toInt320()","line":"664","kind":"method"},{"returnType":{"refId":"fixnum/int64","name":"int64"},"comment":"\nReturns [this].\n","name":"toInt64","id":"toInt640()","line":"671","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns the value of this [int64] as a decimal [String].\n","name":"toString","id":"toString0()","line":"677","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"name":"toHexString","id":"toHexString0()","line":"705","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"name":"toRadixString","id":"toRadixString1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"radix","id":"radix","kind":"param"}],"line":"720","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"name":"toDebugString","id":"toDebugString0()","line":"747","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"name":"_hexDigit","isPrivate":true,"id":"_hexDigit1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"digit","id":"digit","kind":"param"}],"line":"784","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_negate","isPrivate":true,"id":"_negate0()","line":"789","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_setBit","isPrivate":true,"id":"_setBit1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"bit","id":"bit","kind":"param"}],"line":"800","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_toShru1","isPrivate":true,"id":"_toShru10()","line":"811","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"_shiftRight","isPrivate":true,"id":"_shiftRight2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"x","id":"x","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"n","id":"n","kind":"param"}],"line":"822","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isStatic":true,"comment":"\nAttempt to subtract b from a if a >= b:\n\nif (a >= b) {\n  a -= b;\n  return true;\n} else {\n  return false;\n}\n","name":"_trialSubtract","isPrivate":true,"id":"_trialSubtract2()","children":[{"ref":{"refId":"fixnum/int64","name":"int64"},"name":"a","id":"a","kind":"param"},{"ref":{"refId":"fixnum/int64","name":"int64"},"name":"b","id":"b","kind":"param"}],"line":"845","kind":"method"},{"returnType":{"refId":"fixnum/int64","name":"int64"},"isStatic":true,"name":"_divModHelper","isPrivate":true,"id":"_divModHelper6()","children":[{"ref":{"refId":"fixnum/int64","name":"int64"},"name":"a","id":"a","kind":"param"},{"ref":{"refId":"fixnum/int64","name":"int64"},"name":"b","id":"b","kind":"param"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"negative","id":"negative","line":"869","kind":"param"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"aIsNegative","id":"aIsNegative","line":"869","kind":"param"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"aIsMinValue","id":"aIsMinValue","line":"869","kind":"param"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"computeRemainder","id":"computeRemainder","line":"870","kind":"param"}],"line":"868","kind":"method"},{"returnType":{"refId":"fixnum/int64","name":"int64"},"name":"_divModByMinValue","isPrivate":true,"id":"_divModByMinValue1()","children":[{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"computeRemainder","id":"computeRemainder","kind":"param"}],"line":"908","kind":"method"},{"returnType":{"refId":"fixnum/int64","name":"int64"},"comment":"\nthis &= ((1L << bits) - 1)\n","name":"_maskRight","isPrivate":true,"id":"_maskRight1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"bits","id":"bits","kind":"param"}],"line":"927","kind":"method"},{"returnType":{"refId":"fixnum/int64","name":"int64"},"name":"_divModByShift","isPrivate":true,"id":"_divModByShift6()","children":[{"ref":{"refId":"fixnum/int64","name":"int64"},"name":"a","id":"a","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"bpower","id":"bpower","kind":"param"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"negative","id":"negative","kind":"param"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"aIsCopy","id":"aIsCopy","kind":"param"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"aIsNegative","id":"aIsNegative","line":"948","kind":"param"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"computeRemainder","id":"computeRemainder","line":"948","kind":"param"}],"line":"947","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"comment":"\nReturn the exact log base 2 of this, or -1 if this is not a power of two.\n","name":"_powerOfTwo","isPrivate":true,"id":"_powerOfTwo0()","line":"970","kind":"method"},{"returnType":{"refId":"fixnum/int64","name":"int64"},"name":"_divMod","isPrivate":true,"id":"_divMod3()","children":[{"ref":{"refId":"fixnum/int64","name":"int64"},"name":"a","id":"a","kind":"param"},{"ref":{"refId":"fixnum/int64","name":"int64"},"name":"b","id":"b","kind":"param"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"computeRemainder","id":"computeRemainder","kind":"param"}],"line":"1000","kind":"method"},{"ref":{"refId":"fixnum/int64","name":"int64"},"isStatic":true,"comment":"\nThe maximum positive value attainable by an [int64], namely\n9,223,372,036,854,775,807.\n","name":"MAX_VALUE","id":"MAX_VALUE","line":"68","kind":"property"},{"ref":{"refId":"fixnum/int64","name":"int64"},"isStatic":true,"comment":"\nThe minimum positive value attainable by an [int64], namely\n-9,223,372,036,854,775,808.\n","name":"MIN_VALUE","id":"MIN_VALUE","line":"79","kind":"property"},{"ref":{"refId":"fixnum/int64","name":"int64"},"isStatic":true,"comment":"\nAn [int64] constant equal to 0.\n","name":"ZERO","id":"ZERO","line":"89","kind":"property"},{"ref":{"refId":"fixnum/int64","name":"int64"},"isStatic":true,"comment":"\nAn [int64] constant equal to 1.\n","name":"ONE","id":"ONE","line":"99","kind":"property"},{"ref":{"refId":"fixnum/int64","name":"int64"},"isStatic":true,"comment":"\nAn [int64] constant equal to 2.\n","name":"TWO","id":"TWO","line":"109","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isEven","id":"isEven","line":"566","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isMaxValue","id":"isMaxValue","line":"567","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isMinValue","id":"isMinValue","line":"568","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isNegative","id":"isNegative","line":"569","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isOdd","id":"isOdd","line":"570","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isZero","id":"isZero","line":"571","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nReturns a hash code based on all the bits of this [int64].\n","name":"hashCode","id":"hashCode","line":"576","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"isStatic":true,"name":"_haveBigInts","isPrivate":true,"id":"_haveBigInts","line":"770","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"_l","isPrivate":true,"id":"_l","line":"17","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"_m","isPrivate":true,"id":"_m","line":"17","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"_h","isPrivate":true,"id":"_h","line":"17","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"_BITS","isPrivate":true,"id":"_BITS","line":"25","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"_BITS01","isPrivate":true,"id":"_BITS01","line":"26","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"_BITS2","isPrivate":true,"id":"_BITS2","line":"27","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"_MASK","isPrivate":true,"id":"_MASK","line":"28","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"_MASK_2","isPrivate":true,"id":"_MASK_2","line":"29","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"_SIGN_BIT","isPrivate":true,"id":"_SIGN_BIT","line":"30","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"_SIGN_BIT_VALUE","isPrivate":true,"id":"_SIGN_BIT_VALUE","line":"31","kind":"variable"},{"ref":{"refId":"fixnum/int64","name":"int64"},"isStatic":true,"name":"_MAX_VALUE","isPrivate":true,"id":"_MAX_VALUE","line":"34","kind":"variable"},{"ref":{"refId":"fixnum/int64","name":"int64"},"isStatic":true,"name":"_MIN_VALUE","isPrivate":true,"id":"_MIN_VALUE","line":"35","kind":"variable"},{"ref":{"refId":"fixnum/int64","name":"int64"},"isStatic":true,"name":"_ZERO","isPrivate":true,"id":"_ZERO","line":"36","kind":"variable"},{"ref":{"refId":"fixnum/int64","name":"int64"},"isStatic":true,"name":"_ONE","isPrivate":true,"id":"_ONE","line":"37","kind":"variable"},{"ref":{"refId":"fixnum/int64","name":"int64"},"isStatic":true,"name":"_TWO","isPrivate":true,"id":"_TWO","line":"38","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"isStatic":true,"name":"_minValues","isPrivate":true,"id":"_minValues","line":"42","kind":"variable"},{"ref":{"refId":"fixnum/int64","name":"int64"},"isStatic":true,"name":"_remainder","isPrivate":true,"id":"_remainder","line":"62","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"isStatic":true,"name":"_haveBigIntsCached","isPrivate":true,"id":"_haveBigIntsCached","line":"768","kind":"variable"},{"comment":"\nConstructs an [int64] equal to 0.\n","name":"int64","id":"int640()","line":"160","kind":"constructor"},{"comment":"\nConstructs an [int64] with a given [int] value.\n","name":"int64.fromInt","id":"int64.fromInt1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"value","id":"value","kind":"param"}],"line":"165","kind":"constructor"},{"returnType":{"refId":"fixnum/int64","name":"int64"},"name":"int64.fromBytes","id":"int64.fromBytes1()","children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"name":"bytes","id":"bytes","kind":"param"}],"line":"191","kind":"constructor"},{"returnType":{"refId":"fixnum/int64","name":"int64"},"name":"int64.fromBytesBigEndian","id":"int64.fromBytesBigEndian1()","children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"name":"bytes","id":"bytes","kind":"param"}],"line":"211","kind":"constructor"},{"comment":"\nConstructs an [int64] from a pair of 32-bit integers having the value\n[:((top & 0xffffffff) << 32) | (bottom & 0xffffffff):].\n","name":"int64.fromInts","id":"int64.fromInts2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"top","id":"top","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"bottom","id":"bottom","kind":"param"}],"line":"235","kind":"constructor"},{"comment":"\nConstructs an [int64] with a given bitwise representation.  No validation\nis performed.\n","name":"int64._bits","isPrivate":true,"id":"int64._bits3()","children":[{"initializedField":{"refId":"fixnum/int64/_l","name":"_l"},"ref":{"refId":"dart.core/int","name":"int"},"name":"_l","isPrivate":true,"id":"_l","kind":"param"},{"initializedField":{"refId":"fixnum/int64/_m","name":"_m"},"ref":{"refId":"dart.core/int","name":"int"},"name":"_m","isPrivate":true,"id":"_m","kind":"param"},{"initializedField":{"refId":"fixnum/int64/_h","name":"_h"},"ref":{"refId":"dart.core/int","name":"int"},"name":"_h","isPrivate":true,"id":"_h","kind":"param"}],"line":"755","kind":"constructor"},{"comment":"\nConstructs an [int64] with the same value as an existing [int64].\n","name":"int64._copy","isPrivate":true,"id":"int64._copy1()","children":[{"ref":{"refId":"fixnum/int64","name":"int64"},"name":"other","id":"other","kind":"param"}],"line":"760","kind":"constructor"}],"line":"11","kind":"class"},{"interfaces":[{"refId":"fixnum/intx","name":"intx"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nAn immutable 32-bit signed integer, in the range [-2^31, 2^31 - 1].\nArithmetic operations may overflow in order to maintain this range.\n","uri":"pkg/fixnum/lib/src/int32.dart","name":"int32","id":"int32","children":[{"returnType":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"_decodeHex","isPrivate":true,"id":"_decodeHex1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"c","id":"c","kind":"param"}],"line":"48","kind":"method"},{"returnType":{"refId":"fixnum/int32","name":"int32"},"isStatic":true,"comment":"\nParses a [String] in a given [radix] between 2 and 16 and returns an\n[int32].\n","name":"parseRadix","id":"parseRadix2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"s","id":"s","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"radix","id":"radix","kind":"param"}],"line":"65","kind":"method"},{"returnType":{"refId":"fixnum/int32","name":"int32"},"isStatic":true,"comment":"\nParses a decimal [String] and returns an [int32].\n","name":"parseInt","id":"parseInt1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"s","id":"s","kind":"param"}],"line":"84","kind":"method"},{"returnType":{"refId":"fixnum/int32","name":"int32"},"isStatic":true,"comment":"\nParses a hexadecimal [String] and returns an [int32].\n","name":"parseHex","id":"parseHex1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"s","id":"s","kind":"param"}],"line":"89","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"_bitCount","isPrivate":true,"id":"_bitCount1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"i","id":"i","kind":"param"}],"line":"92","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"_numberOfLeadingZeros","isPrivate":true,"id":"_numberOfLeadingZeros1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"i","id":"i","kind":"param"}],"line":"119","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"_numberOfTrailingZeros","isPrivate":true,"id":"_numberOfTrailingZeros1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"i","id":"i","kind":"param"}],"line":"128","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"name":"_convert","isPrivate":true,"id":"_convert1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"143","kind":"method"},{"returnType":{"refId":"fixnum/intx","name":"intx"},"isOperator":true,"name":"+","id":"+1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"169","kind":"method"},{"returnType":{"refId":"fixnum/intx","name":"intx"},"isOperator":true,"name":"-","id":"-1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"176","kind":"method"},{"returnType":{"refId":"fixnum/int32","name":"int32"},"isOperator":true,"name":"unary-","id":"unary-0()","line":"183","kind":"method"},{"returnType":{"refId":"fixnum/intx","name":"intx"},"isOperator":true,"name":"*","id":"*1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"185","kind":"method"},{"returnType":{"refId":"fixnum/int32","name":"int32"},"isOperator":true,"name":"%","id":"%1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"193","kind":"method"},{"returnType":{"refId":"fixnum/int32","name":"int32"},"isOperator":true,"name":"~/","id":"~#slash1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"201","kind":"method"},{"returnType":{"refId":"fixnum/int32","name":"int32"},"name":"remainder","id":"remainder1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"209","kind":"method"},{"returnType":{"refId":"fixnum/int32","name":"int32"},"isOperator":true,"name":"&","id":"&1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"218","kind":"method"},{"returnType":{"refId":"fixnum/int32","name":"int32"},"isOperator":true,"name":"|","id":"|1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"225","kind":"method"},{"returnType":{"refId":"fixnum/int32","name":"int32"},"isOperator":true,"name":"^","id":"^1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"232","kind":"method"},{"returnType":{"refId":"fixnum/int32","name":"int32"},"isOperator":true,"name":"~","id":"~0()","line":"239","kind":"method"},{"returnType":{"refId":"fixnum/int32","name":"int32"},"isOperator":true,"name":"<<","id":"<<1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"n","id":"n","kind":"param"}],"line":"241","kind":"method"},{"returnType":{"refId":"fixnum/int32","name":"int32"},"isOperator":true,"name":">>","id":">>1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"n","id":"n","kind":"param"}],"line":"249","kind":"method"},{"returnType":{"refId":"fixnum/int32","name":"int32"},"name":"shiftRightUnsigned","id":"shiftRightUnsigned1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"n","id":"n","kind":"param"}],"line":"263","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"comment":"\nReturns [true] if this [int32] has the same numeric value as the\ngiven object.  The argument may be an [int] or an [intx].\n","name":"==","id":"==1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"281","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"name":"compareTo","id":"compareTo1()","children":[{"ref":{"refId":"dart.core/Comparable","name":"Comparable"},"name":"other","id":"other","kind":"param"}],"line":"291","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"name":"<","id":"<1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"298","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"name":"<=","id":"<=1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"305","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"name":">","id":">1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"312","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"name":">=","id":">=1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"319","kind":"method"},{"returnType":{"refId":"fixnum/int32","name":"int32"},"name":"abs","id":"abs0()","line":"335","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"name":"numberOfLeadingZeros","id":"numberOfLeadingZeros0()","line":"337","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"name":"numberOfTrailingZeros","id":"numberOfTrailingZeros0()","line":"338","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"name":"toBytes","id":"toBytes0()","line":"340","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"name":"toInt","id":"toInt0()","line":"349","kind":"method"},{"returnType":{"refId":"fixnum/int32","name":"int32"},"name":"toInt32","id":"toInt320()","line":"350","kind":"method"},{"returnType":{"refId":"fixnum/int64","name":"int64"},"name":"toInt64","id":"toInt640()","line":"351","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"name":"toString","id":"toString0()","line":"353","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"name":"toHexString","id":"toHexString0()","line":"354","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"name":"toRadixString","id":"toRadixString1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"radix","id":"radix","kind":"param"}],"line":"355","kind":"method"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isEven","id":"isEven","line":"326","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isMaxValue","id":"isMaxValue","line":"327","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isMinValue","id":"isMinValue","line":"328","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isNegative","id":"isNegative","line":"329","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isOdd","id":"isOdd","line":"330","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isZero","id":"isZero","line":"331","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"hashCode","id":"hashCode","line":"333","kind":"property"},{"ref":{"refId":"fixnum/int32","name":"int32"},"isStatic":true,"comment":"\nThe maximum positive value attainable by an [int32], namely\n2147483647.\n","name":"MAX_VALUE","id":"MAX_VALUE","line":"17","kind":"variable"},{"ref":{"refId":"fixnum/int32","name":"int32"},"isStatic":true,"comment":"\nThe minimum positive value attainable by an [int32], namely\n-2147483648.\n","name":"MIN_VALUE","id":"MIN_VALUE","line":"23","kind":"variable"},{"ref":{"refId":"fixnum/int32","name":"int32"},"isStatic":true,"comment":"\nAn [int32] constant equal to 0.\n","name":"ZERO","id":"ZERO","line":"28","kind":"variable"},{"ref":{"refId":"fixnum/int32","name":"int32"},"isStatic":true,"comment":"\nAn [int32] constant equal to 1.\n","name":"ONE","id":"ONE","line":"33","kind":"variable"},{"ref":{"refId":"fixnum/int32","name":"int32"},"isStatic":true,"comment":"\nAn [int32] constant equal to 2.\n","name":"TWO","id":"TWO","line":"38","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"_CC_0","isPrivate":true,"id":"_CC_0","line":"41","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"_CC_9","isPrivate":true,"id":"_CC_9","line":"42","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"_CC_a","isPrivate":true,"id":"_CC_a","line":"43","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"_CC_z","isPrivate":true,"id":"_CC_z","line":"44","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"_CC_A","isPrivate":true,"id":"_CC_A","line":"45","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"_CC_Z","isPrivate":true,"id":"_CC_Z","line":"46","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"name":"_i","isPrivate":true,"id":"_i","line":"131","kind":"variable"},{"name":"int32._internal","isPrivate":true,"id":"int32._internal1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"i","id":"i","kind":"param"}],"line":"133","kind":"constructor"},{"comment":"\nConstructs an [int32] from an [int].  Only the low 32 bits of the input\nare used.\n","name":"int32.fromInt","id":"int32.fromInt1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"i","id":"i","kind":"param"}],"line":"139","kind":"constructor"}],"line":"11","kind":"class"},{"isAbstract":true,"interfaces":[{"refId":"dart.core/Comparable","name":"Comparable"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nA fixed-precision integer.\n","uri":"pkg/fixnum/lib/src/intx.dart","name":"intx","id":"intx","children":[{"returnType":{"refId":"fixnum/intx","name":"intx"},"isOperator":true,"name":"+","id":"+1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"13","kind":"method"},{"returnType":{"refId":"fixnum/intx","name":"intx"},"isOperator":true,"name":"-","id":"-1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"14","kind":"method"},{"returnType":{"refId":"fixnum/intx","name":"intx"},"isOperator":true,"name":"unary-","id":"unary-0()","line":"17","kind":"method"},{"returnType":{"refId":"fixnum/intx","name":"intx"},"isOperator":true,"name":"*","id":"*1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"18","kind":"method"},{"returnType":{"refId":"fixnum/intx","name":"intx"},"isOperator":true,"name":"%","id":"%1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"19","kind":"method"},{"returnType":{"refId":"fixnum/intx","name":"intx"},"isOperator":true,"name":"~/","id":"~#slash1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"21","kind":"method"},{"returnType":{"refId":"fixnum/intx","name":"intx"},"name":"remainder","id":"remainder1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"22","kind":"method"},{"returnType":{"refId":"fixnum/intx","name":"intx"},"isOperator":true,"name":"&","id":"&1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"27","kind":"method"},{"returnType":{"refId":"fixnum/intx","name":"intx"},"isOperator":true,"name":"|","id":"|1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"28","kind":"method"},{"returnType":{"refId":"fixnum/intx","name":"intx"},"isOperator":true,"name":"^","id":"^1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"29","kind":"method"},{"returnType":{"refId":"fixnum/intx","name":"intx"},"isOperator":true,"name":"~","id":"~0()","line":"30","kind":"method"},{"returnType":{"refId":"fixnum/intx","name":"intx"},"isOperator":true,"name":"<<","id":"<<1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"shiftAmount","id":"shiftAmount","kind":"param"}],"line":"31","kind":"method"},{"returnType":{"refId":"fixnum/intx","name":"intx"},"isOperator":true,"name":">>","id":">>1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"shiftAmount","id":"shiftAmount","kind":"param"}],"line":"32","kind":"method"},{"returnType":{"refId":"fixnum/intx","name":"intx"},"name":"shiftRightUnsigned","id":"shiftRightUnsigned1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"shiftAmount","id":"shiftAmount","kind":"param"}],"line":"33","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"name":"compareTo","id":"compareTo1()","children":[{"ref":{"refId":"dart.core/Comparable","name":"Comparable"},"name":"other","id":"other","kind":"param"}],"line":"36","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"name":"==","id":"==1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"37","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"name":"<","id":"<1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"38","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"name":"<=","id":"<=1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"39","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"name":">","id":">1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"40","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"name":">=","id":">=1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"41","kind":"method"},{"returnType":{"refId":"fixnum/intx","name":"intx"},"name":"abs","id":"abs0()","line":"53","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"comment":"\nReturns the number of leading zeros in this [intx] as an [int]\nbetween 0 and 64.\n","name":"numberOfLeadingZeros","id":"numberOfLeadingZeros0()","line":"59","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"comment":"\nReturns the number of trailing zeros in this [intx] as an [int]\nbetween 0 and 64.\n","name":"numberOfTrailingZeros","id":"numberOfTrailingZeros0()","line":"65","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"comment":"\nConverts this [intx] to a [List] of [int], starting with the least\nsignificant byte.\n","name":"toBytes","id":"toBytes0()","line":"71","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"comment":"\nConverts this [intx] to an [int].  On some platforms, inputs with large\nabsolute values (i.e., > 2^52) may lose some of their low bits.\n","name":"toInt","id":"toInt0()","line":"77","kind":"method"},{"returnType":{"refId":"fixnum/int32","name":"int32"},"comment":"\nConverts an [intx] to 32 bits.  Narrower values are sign extended and\nwider values have their high bits truncated.\n","name":"toInt32","id":"toInt320()","line":"83","kind":"method"},{"returnType":{"refId":"fixnum/int64","name":"int64"},"comment":"\nConverts an [intx] to 64 bits.\n","name":"toInt64","id":"toInt640()","line":"88","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns the value of this [intx] as a decimal [String].\n","name":"toString","id":"toString0()","line":"93","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns the value of this [intx] as a hexadecimal [String].\n","name":"toHexString","id":"toHexString0()","line":"98","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns the value of this [intx] as a [String] in the given radix.\n[radix] must be an integer between 2 and 16, inclusive.\n","name":"toRadixString","id":"toRadixString1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"radix","id":"radix","kind":"param"}],"line":"104","kind":"method"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isEven","id":"isEven","line":"44","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isMaxValue","id":"isMaxValue","line":"45","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isMinValue","id":"isMinValue","line":"46","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isNegative","id":"isNegative","line":"47","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isOdd","id":"isOdd","line":"48","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isZero","id":"isZero","line":"49","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"hashCode","id":"hashCode","line":"51","kind":"property"}],"line":"10","kind":"class"}],"line":"5","kind":"library"}