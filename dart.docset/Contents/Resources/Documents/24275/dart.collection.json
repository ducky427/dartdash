{"dependencies":[{"uri":"sdk/lib/core/core.dart","name":"dart:core","id":"dart.core","children":[{"isAbstract":true,"superclass":{"refId":"dart.collection/IterableBase","arguments":[{"refId":"dart.core/Set/E","name":"E"}],"name":"IterableBase"},"comment":"\nA `Set` is a collection of elements where each element can occur only once.\n\nThat is, for each object of the element type, the object is either considered\nto be in the set, or it is not in the set.\n\nSet implementations may consider some elements indistinguishable. These\nobjects will be treated as being the same for any operation on the set.\n\nThe default `Set` implementation, [HashSet], considers objects\nindistinguishable if they are equal with regard to [Object.operator==].\n\nSets may be either ordered or unordered. [HashSet] is unordered and doesn't\nguarantee anything about the order that elements are accessed in by\niteration. [LinkedHashSet] iterates in the insertion order of its elements.\n","uri":"sdk/lib/core/set.dart","name":"Set","id":"Set","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"\nReturns true if [value] is in the set.\n","name":"contains","id":"contains1()","children":[{"ref":{"refId":"dart.core/Set/E","name":"E"},"name":"value","id":"value","kind":"param"}],"line":"45","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nAdds [value] into the set.\n\nThe method has no effect if [value] is already in the set.\n","name":"add","id":"add1()","children":[{"ref":{"refId":"dart.core/Set/E","name":"E"},"name":"value","id":"value","kind":"param"}],"line":"52","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nAdds all of [elements] to this Set.\n\nEquivalent to adding each element in [elements] using [add],\nbut some collections may be able to optimize it.\n","name":"addAll","id":"addAll1()","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Set/E","name":"E"}],"name":"Iterable"},"name":"elements","id":"elements","kind":"param"}],"line":"60","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"\nRemoves [value] from the set. Returns true if [value] was\nin the set. Returns false otherwise. The method has no effect\nif [value] value was not in the set.\n","name":"remove","id":"remove1()","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"name":"value","id":"value","kind":"param"}],"line":"67","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nRemoves each element of [elements] from this set.\n","name":"removeAll","id":"removeAll1()","children":[{"ref":{"refId":"dart.core/Iterable","name":"Iterable"},"name":"elements","id":"elements","kind":"param"}],"line":"72","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nRemoves all elements of this set that are not elements in [elements].\n","name":"retainAll","id":"retainAll1()","children":[{"ref":{"refId":"dart.core/Iterable","name":"Iterable"},"name":"elements","id":"elements","kind":"param"}],"line":"77","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nRemoves all elements of this set that satisfy [test].\n","name":"removeWhere","id":"removeWhere1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Set/E","name":"E"},"uri":"sdk/lib/core/set.dart","name":"element","id":"element","line":"82","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"82","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nRemoves all elements of this set that fail to satisfy [test].\n","name":"retainWhere","id":"retainWhere1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Set/E","name":"E"},"uri":"sdk/lib/core/set.dart","name":"element","id":"element","line":"87","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"87","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"\nReturns whether this Set contains all the elements of [other].\n","name":"containsAll","id":"containsAll1()","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Set/E","name":"E"}],"name":"Iterable"},"name":"other","id":"other","kind":"param"}],"line":"92","kind":"method"},{"returnType":{"refId":"dart.core/Set","arguments":[{"refId":"dart.core/Set/E","name":"E"}],"name":"Set"},"comment":"\nReturns a new set which is the intersection between this set and [other].\n\nThat is, the returned set contains all the elements of this `Set` that\nare also elements of [other].\n","name":"intersection","id":"intersection1()","children":[{"ref":{"refId":"dart.core/Set","arguments":[{"refId":"dart.core/Set/E","name":"E"}],"name":"Set"},"name":"other","id":"other","kind":"param"}],"line":"100","kind":"method"},{"returnType":{"refId":"dart.core/Set","arguments":[{"refId":"dart.core/Set/E","name":"E"}],"name":"Set"},"comment":"\nReturns a new set which contains all the elements of this set and [other].\n\nThat is, the returned set contains all the elements of this `Set` and\nall the elements of [other].\n","name":"union","id":"union1()","children":[{"ref":{"refId":"dart.core/Set","arguments":[{"refId":"dart.core/Set/E","name":"E"}],"name":"Set"},"name":"other","id":"other","kind":"param"}],"line":"108","kind":"method"},{"returnType":{"refId":"dart.core/Set","arguments":[{"refId":"dart.core/Set/E","name":"E"}],"name":"Set"},"comment":"\nReturns a new set with the the elements of this that are not in [other].\n\nThat is, the returned set contains all the elements of this `Set` that\nare not elements of [other].\n","name":"difference","id":"difference1()","children":[{"ref":{"refId":"dart.core/Set","arguments":[{"refId":"dart.core/Set/E","name":"E"}],"name":"Set"},"name":"other","id":"other","kind":"param"}],"line":"116","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nRemoves all elements in the set.\n","name":"clear","id":"clear0()","line":"121","kind":"method"},{"returnType":{"refId":"dart.core/Set","arguments":[{"refId":"dart.core/Set/E","name":"E"}],"name":"Set"},"comment":"\nCreates an empty [Set].\n\nThe created `Set` is a [HashSet]. As such, it considers elements that\nare equal (using `==`) to be undistinguishable, and requires them to\nhave a compatible [Object.hashCode] implementation.\n","name":"Set","id":"Set0()","line":"31","kind":"constructor"},{"returnType":{"refId":"dart.core/Set","arguments":[{"refId":"dart.core/Set/E","name":"E"}],"name":"Set"},"comment":"\nCreates a [Set] that contains all elements of [other].\n\nThe created `Set` is a [HashSet]. As such, it considers elements that\nare equal (using `==`) to be undistinguishable, and requires them to\nhave a compatible [Object.hashCode] implementation.\n","name":"Set.from","id":"Set.from1()","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Set/E","name":"E"}],"name":"Iterable"},"name":"other","id":"other","kind":"param"}],"line":"40","kind":"constructor"},{"name":"E","id":"E","kind":"typeparam"}],"line":"23","kind":"class"},{"comment":"\nEverything in Dart is an [Object].\n","uri":"sdk/lib/core/object.dart","name":"Object","id":"Object","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","name":"==","id":"==1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"29","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns a string representation of this object.\n","name":"toString","id":"toString0()","line":"48","kind":"method"},{"comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","name":"noSuchMethod","id":"noSuchMethod1()","children":[{"ref":{"refId":"dart.core/Invocation","name":"Invocation"},"name":"invocation","id":"invocation","kind":"param"}],"line":"60","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","name":"hashCode","id":"hashCode","line":"43","kind":"property"},{"ref":{"refId":"dart.core/Type","name":"Type"},"comment":"\nA representation of the runtime type of the object.\n","name":"runtimeType","id":"runtimeType","line":"65","kind":"property"},{"comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","name":"Object","id":"Object0()","line":"18","kind":"constructor"}],"line":"10","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nA [Map] is an associative container, mapping a key to a value.\nNull values are supported, but null keys are not.\n","uri":"sdk/lib/core/map.dart","name":"Map","id":"Map","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"\nReturns whether this map contains the given [value].\n","name":"containsValue","id":"containsValue1()","children":[{"ref":{"refId":"dart.core/Map/V","name":"V"},"name":"value","id":"value","kind":"param"}],"line":"25","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"\nReturns whether this map contains the given [key].\n","name":"containsKey","id":"containsKey1()","children":[{"ref":{"refId":"dart.core/Map/K","name":"K"},"name":"key","id":"key","kind":"param"}],"line":"30","kind":"method"},{"returnType":{"refId":"dart.core/Map/V","name":"V"},"isOperator":true,"comment":"\nReturns the value for the given [key] or null if [key] is not\nin the map. Because null values are supported, one should either\nuse containsKey to distinguish between an absent key and a null\nvalue, or use the [putIfAbsent] method.\n","name":"[]","id":"[]1()","children":[{"ref":{"refId":"dart.core/Map/K","name":"K"},"name":"key","id":"key","kind":"param"}],"line":"38","kind":"method"},{"returnType":{"refId":"void","name":"void"},"isOperator":true,"comment":"\nAssociates the [key] with the given [value].\n","name":"[]=","id":"[]=2()","children":[{"ref":{"refId":"dart.core/Map/K","name":"K"},"name":"key","id":"key","kind":"param"},{"ref":{"refId":"dart.core/Map/V","name":"V"},"name":"value","id":"value","kind":"param"}],"line":"43","kind":"method"},{"returnType":{"refId":"dart.core/Map/V","name":"V"},"comment":"\nIf [key] is not associated to a value, calls [ifAbsent] and\nupdates the map by mapping [key] to the value returned by\n[ifAbsent]. Returns the value in the map.\n\nIt is an error to add or remove keys from map during the call to\n[ifAbsent].\n","name":"putIfAbsent","id":"putIfAbsent2()","children":[{"ref":{"refId":"dart.core/Map/K","name":"K"},"name":"key","id":"key","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"ifAbsent","id":"ifAbsent","children":[{"returnType":{"refId":"dart.core/Map/V","name":"V"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"53","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nAdds all key-value pairs of [other] to this map.\n\nIf a key of [other] is already in this map, its value is overwritten.\n\nThe operation is equivalent to doing `this[key] = value` for each key\nand associated value in other. It iterates over [other], which must\ntherefore not change during the iteration.\n","name":"addAll","id":"addAll1()","children":[{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/Map/K","name":"K"},{"refId":"dart.core/Map/V","name":"V"}],"name":"Map"},"name":"other","id":"other","kind":"param"}],"line":"64","kind":"method"},{"returnType":{"refId":"dart.core/Map/V","name":"V"},"comment":"\nRemoves the association for the given [key]. Returns the value for\n[key] in the map or null if [key] is not in the map. Note that values\ncan be null and a returned null value does not always imply that the\nkey is absent.\n","name":"remove","id":"remove1()","children":[{"ref":{"refId":"dart.core/Map/K","name":"K"},"name":"key","id":"key","kind":"param"}],"line":"72","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nRemoves all pairs from the map.\n","name":"clear","id":"clear0()","line":"77","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nApplies [f] to each {key, value} pair of the map.\n\nIt is an error to add or remove keys from the map during iteration.\n","name":"forEach","id":"forEach1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"returnType":{"refId":"void","name":"void"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Map/K","name":"K"},"uri":"sdk/lib/core/map.dart","name":"key","id":"key","line":"84","kind":"param"},{"ref":{"refId":"dart.core/Map/V","name":"V"},"uri":"sdk/lib/core/map.dart","name":"value","id":"value","line":"84","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"84","kind":"method"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Map/K","name":"K"}],"name":"Iterable"},"comment":"\nThe keys of [this].\n","name":"keys","id":"keys","line":"90","kind":"property"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Map/V","name":"V"}],"name":"Iterable"},"comment":"\nThe values of [this].\n","name":"values","id":"values","line":"95","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nThe number of {key, value} pairs in the map.\n","name":"length","id":"length","line":"100","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"\nReturns true if there is no {key, value} pair in the map.\n","name":"isEmpty","id":"isEmpty","line":"105","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"\nReturns true if there is at least one {key, value} pair in the map.\n","name":"isNotEmpty","id":"isNotEmpty","line":"110","kind":"property"},{"returnType":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/Map/K","name":"K"},{"refId":"dart.core/Map/V","name":"V"}],"name":"Map"},"comment":"\nCreates a map with the default implementation.\n","name":"Map","id":"Map0()","line":"15","kind":"constructor"},{"returnType":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/Map/K","name":"K"},{"refId":"dart.core/Map/V","name":"V"}],"name":"Map"},"comment":"\nCreates a [Map] that contains all key value pairs of [other].\n","name":"Map.from","id":"Map.from1()","children":[{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/Map/K","name":"K"},{"refId":"dart.core/Map/V","name":"V"}],"name":"Map"},"name":"other","id":"other","kind":"param"}],"line":"20","kind":"constructor"},{"name":"K","id":"K","kind":"typeparam"},{"name":"V","id":"V","kind":"typeparam"}],"line":"11","kind":"class"},{"isAbstract":true,"interfaces":[{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/List/E","name":"E"}],"name":"Iterable"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nA [List] is an indexable collection with a length.\n\nA `List` implementation can choose not to support all methods\nof the `List` interface.\n\nThe most common list types are:\n* Fixed length list. It is an error to use operations that can change\n  the list's length.\n* Growable list. Full implementation of the interface.\n* Unmodifiable list. It is an error to use operations that can change\n  the list's length, or that can change the values of the list.\n  If an unmodifable list is backed by another modifiable data structure,\n  the values read from it may still change over time.\n\nExample:\n\n    var fixedLengthList = new List(5);\n    fixedLengthList.length = 0;  // throws.\n    fixedLengthList.add(499);  // throws\n    fixedLengthList[0] = 87;\n    var growableList = [1, 2];\n    growableList.length = 0;\n    growableList.add(499);\n    growableList[0] = 87;\n    var unmodifiableList = const [1, 2];\n    unmodifiableList.length = 0;  // throws.\n    unmodifiableList.add(499);  // throws\n    unmodifiableList[0] = 87;  // throws.\n\nLists are [Iterable].\nList iteration iterates over values in index order.\nChanging the values will not affect iteration,\nbut changing the valid indices -\nthat is, changing the list's length -\nbetween iteration steps\nwill cause a [ConcurrentModificationError].\nThis means that only growable lists can throw [ConcurrentModificationError].\nIf the length changes temporarily\nand is restored before continuing the iteration,\nthe iterator will not detect it.\n","uri":"sdk/lib/core/list.dart","name":"List","id":"List","children":[{"returnType":{"refId":"dart.core/List/E","name":"E"},"isOperator":true,"comment":"\nReturns the element at the given [index] in the list or throws\nan [RangeError] if [index] is out of bounds.\n","name":"[]","id":"[]1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"index","id":"index","kind":"param"}],"line":"117","kind":"method"},{"returnType":{"refId":"void","name":"void"},"isOperator":true,"comment":"\nSets the entry at the given [index] in the list to [value].\n\nThrows an [RangeError] if [index] is out of bounds.\n","name":"[]=","id":"[]=2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"index","id":"index","kind":"param"},{"ref":{"refId":"dart.core/List/E","name":"E"},"name":"value","id":"value","kind":"param"}],"line":"124","kind":"method"},{"returnType":{"refId":"void","name":"void"},"isSetter":true,"comment":"\nChanges the length of the list. If [newLength] is greater than\nthe current [length], entries are initialized to [:null:].\n\nThrows an [UnsupportedError] if the list is not extendable.\n","name":"length=","id":"length=1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"newLength","id":"newLength","kind":"param"}],"line":"139","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nAdds [value] at the end of the list, extending the length by\none.\n\nThrows an [UnsupportedError] if the list is not extendable.\n","name":"add","id":"add1()","children":[{"ref":{"refId":"dart.core/List/E","name":"E"},"name":"value","id":"value","kind":"param"}],"line":"147","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nAppends all elements of the [iterable] to the end of this list.\n\nExtends the length of the list by the number of elements in [iterable].\nThrows an [UnsupportedError] if this list is not extensible.\n","name":"addAll","id":"addAll1()","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/List/E","name":"E"}],"name":"Iterable"},"name":"iterable","id":"iterable","kind":"param"}],"line":"155","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nSorts the list according to the order specified by the [compare] function.\n\nThe [compare] function must act as a [Comparator].\n\nThe default [List] implementations use [Comparable.compare] if\n[compare] is omitted.\n","name":"sort","id":"sort1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"compare","id":"compare","children":[{"returnType":{"refId":"dart.core/int","name":"int"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/List/E","name":"E"},"uri":"sdk/lib/core/list.dart","name":"a","id":"a","line":"170","kind":"param"},{"ref":{"refId":"dart.core/List/E","name":"E"},"uri":"sdk/lib/core/list.dart","name":"b","id":"b","line":"170","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"170","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"comment":"\nReturns the first index of [element] in the list.\n\nSearches the list from index [start] to the length of the list.\nThe first time an element [:e:] is encountered so that [:e == element:],\nthe index of [:e:] is returned.\nReturns -1 if [element] is not found.\n","name":"indexOf","id":"indexOf2()","children":[{"ref":{"refId":"dart.core/List/E","name":"E"},"name":"element","id":"element","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"0","name":"start","id":"start","kind":"param"}],"line":"180","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"comment":"\nReturns the last index of [element] in the list.\n\nSearches the list backwards from index [start] (inclusive) to 0.\n\nThe first time an element [:e:] is encountered so that [:e == element:],\nthe index of [:e:] is returned.\n\nIf start is not provided, it defaults to [:this.length - 1:].\n\nReturns -1 if [element] is not found.\n","name":"lastIndexOf","id":"lastIndexOf2()","children":[{"ref":{"refId":"dart.core/List/E","name":"E"},"name":"element","id":"element","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"name":"start","id":"start","kind":"param"}],"line":"194","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nRemoves all elements in the list.\n\nThe length of the list becomes zero.\n\nThrows an [UnsupportedError], and retains all elements, if the\nlength of the list cannot be changed.\n","name":"clear","id":"clear0()","line":"204","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nInserts the element at position [index] in the list.\n\nThis increases the length of the list by one and shifts all elements\nat or after the index towards the end of the list.\n\nIt is an error if the [index] does not point inside the list or at the\nposition after the last element.\n","name":"insert","id":"insert2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"index","id":"index","kind":"param"},{"ref":{"refId":"dart.core/List/E","name":"E"},"name":"element","id":"element","kind":"param"}],"line":"215","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nInserts all elements of [iterable] at position [index] in the list.\n\nThis increases the length of the list by the length of [iterable] and\nshifts all later elements towards the end of the list.\n\nIt is an error if the [index] does not point inside the list or at the\nposition after the last element.\n","name":"insertAll","id":"insertAll2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"index","id":"index","kind":"param"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/List/E","name":"E"}],"name":"Iterable"},"name":"iterable","id":"iterable","kind":"param"}],"line":"226","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nOverwrites elements of `this` with the elemenst of [iterable] starting\nat position [index] in the list.\n\nThis operation does not increase the length of `this`.\n\nIt is an error if the [index] does not point inside the list or at the\nposition after the last element.\n\nIt is an error if the [iterable] is longer than [length] - [index].\n","name":"setAll","id":"setAll2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"index","id":"index","kind":"param"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/List/E","name":"E"}],"name":"Iterable"},"name":"iterable","id":"iterable","kind":"param"}],"line":"239","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"\nRemoves [value] from the list. Returns true if [value] was\nin the list. Returns false otherwise. The method has no effect\nif [value] value was not in the list.\n","name":"remove","id":"remove1()","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"name":"value","id":"value","kind":"param"}],"line":"246","kind":"method"},{"returnType":{"refId":"dart.core/List/E","name":"E"},"comment":"\nRemoves the element at position [index] from the list.\n\nThis reduces the length of `this` by one and moves all later elements\ndown by one position.\n\nReturns the removed element.\n\nThrows an [ArgumentError] if [index] is not an [int].\n\nThrows an [RangeError] if the [index] does not point inside\nthe list.\n\nThrows an [UnsupportedError], and doesn't remove the element,\nif the length of `this` cannot be changed.\n","name":"removeAt","id":"removeAt1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"index","id":"index","kind":"param"}],"line":"264","kind":"method"},{"returnType":{"refId":"dart.core/List/E","name":"E"},"comment":"\nPops and returns the last element of the list.\nThrows a [UnsupportedError] if the length of the\nlist cannot be changed.\n","name":"removeLast","id":"removeLast0()","line":"271","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nRemoves all elements of this list that satisfy [test].\n\nAn elements [:e:] satisfies [test] if [:test(e):] is true.\n","name":"removeWhere","id":"removeWhere1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/List/E","name":"E"},"uri":"sdk/lib/core/list.dart","name":"element","id":"element","line":"278","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"278","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nRemoves all elements of this list that fail to satisfy [test].\n\nAn elements [:e:] satisfies [test] if [:test(e):] is true.\n","name":"retainWhere","id":"retainWhere1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/List/E","name":"E"},"uri":"sdk/lib/core/list.dart","name":"element","id":"element","line":"285","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"285","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/List/E","name":"E"}],"name":"List"},"comment":"\nReturns a new list containing the elements from [start] to [end].\n\nIf [end] is omitted, the [length] of `this` is used.\n\nIt is an error if [start] or [end] are not indices into `this`,\nor if [end] is before [start].\n","name":"sublist","id":"sublist2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"start","id":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"name":"end","id":"end","kind":"param"}],"line":"295","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/List/E","name":"E"}],"name":"Iterable"},"comment":"\nReturns an [Iterable] that iterators over the elements in the range\n[start] to [end] exclusive. The result of this function\nis backed by `this`.\n\nIt is an error if [end] is before [start].\n\nIt is an error if the [start] and [end] are not valid ranges at the time\nof the call to this method. The returned [Iterable] behaves similar to\n`skip(start).take(end - start)`. That is, it will not throw exceptions\nif `this` changes size.\n\nExample:\n\n    var list = [1, 2, 3, 4, 5];\n    var range = list.getRange(1, 4);\n    print(range.join(', '));  // => 2, 3, 4\n    list.length = 3;\n    print(range.join(', '));  // => 2, 3\n","name":"getRange","id":"getRange2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"start","id":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"end","id":"end","kind":"param"}],"line":"317","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nCopies the elements of [iterable], skipping the [skipCount] first elements,\ninto the range [start] to [end] exclusive of `this`.\n\nIf [start] equals [end] and [start]..[end] represents a legal range, this\nmethod has no effect.\n\nIt is an error if [start]..[end] is not a valid range pointing into the\n`this`.\n\nIt is an error if the [iterable] does not have enough elements after\nskipping [skipCount] elements.\n\nExample:\n\n    var list = [1, 2, 3, 4];\n    var list2 = [5, 6, 7, 8, 9];\n    list.setRange(1, 3, list2, 3);\n    print(list);  // => [1, 8, 9, 4]\n","name":"setRange","id":"setRange4()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"start","id":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"end","id":"end","kind":"param"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/List/E","name":"E"}],"name":"Iterable"},"name":"iterable","id":"iterable","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"0","name":"skipCount","id":"skipCount","kind":"param"}],"line":"339","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nRemoves the elements in the range [start] to [end] exclusive.\n\nIt is an error if [start]..[end] is not a valid range pointing into the\n`this`.\n","name":"removeRange","id":"removeRange2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"start","id":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"end","id":"end","kind":"param"}],"line":"347","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nSets the elements in the range [start] to [end] exclusive to the given\n[fillValue].\n\nIt is an error if [start]..[end] is not a valid range pointing into the\n`this`.\n","name":"fillRange","id":"fillRange3()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"start","id":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"end","id":"end","kind":"param"},{"ref":{"refId":"dart.core/List/E","name":"E"},"isOptional":true,"name":"fillValue","id":"fillValue","kind":"param"}],"line":"356","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nRemoves the elements in the range [start] to [end] exclusive and replaces\nthem with the contents of the [iterable].\n\nIt is an error if [start]..[end] is not a valid range pointing into the\n`this`.\n\nExample:\n\n    var list = [1, 2, 3, 4, 5];\n    list.replaceRange(1, 3, [6, 7, 8, 9]);\n    print(list);  // [1, 6, 7, 8, 9, 4, 5]\n","name":"replaceRange","id":"replaceRange3()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"start","id":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"end","id":"end","kind":"param"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/List/E","name":"E"}],"name":"Iterable"},"name":"iterable","id":"iterable","kind":"param"}],"line":"371","kind":"method"},{"returnType":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/int","name":"int"},{"refId":"dart.core/List/E","name":"E"}],"name":"Map"},"comment":"\nReturns an unmodifiable [Map] view of `this`.\n\nIt has the indices of this list as keys, and the corresponding elements\nas values. The [Map.keys] [Iterable] will iterate the indices of this list\nin numerical order.\n","name":"asMap","id":"asMap0()","line":"380","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nReturns the number of elements in the list.\n\nThe valid indices for a list are 0 through `length - 1`.\n","name":"length","id":"length","line":"131","kind":"property"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/List/E","name":"E"}],"name":"Iterable"},"comment":"\nReturns an [Iterable] of the elements of this [List] in reverse order.\n","name":"reversed","id":"reversed","line":"160","kind":"property"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/List/E","name":"E"}],"name":"List"},"comment":"\nCreates a list of the given [length].\n\nThe list is a fixed-length list if [length] is provided, and an empty\ngrowable list if [length] is omitted.\n\nIt is an error if [length] is not a non-negative integer.\n","name":"List","id":"List1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"name":"length","id":"length","kind":"param"}],"line":"58","kind":"constructor"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/List/E","name":"E"}],"name":"List"},"comment":"\nCreates a fixed-length list of the given [length] where each entry\ncontains [fill].\n","name":"List.filled","id":"List.filled2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"length","id":"length","kind":"param"},{"ref":{"refId":"dart.core/List/E","name":"E"},"name":"fill","id":"fill","kind":"param"}],"line":"64","kind":"constructor"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/List/E","name":"E"}],"name":"List"},"comment":"\nCreates an list with the elements of [other].\n\nThe order in the list will be\nthe order provided by the iterator of [other].\n\nThe returned list is growable if [growable] is true, otherwise it's\na fixed length list.\n","name":"List.from","id":"List.from2()","children":[{"ref":{"refId":"dart.core/Iterable","name":"Iterable"},"name":"other","id":"other","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"true","name":"growable","id":"growable","kind":"param"}],"line":"75","kind":"constructor"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/List/E","name":"E"}],"name":"List"},"comment":"\nGenerate a `List` of values.\n\nCreates a list with [length] positions\nand fills them by values created by calling [generator]\nfor each index in the range `0` .. `[length] - 1`\nin increasing order.\n\nThe created list's length is fixed unless [growable] is true.\n","name":"List.generate","id":"List.generate3()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"length","id":"length","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"generator","id":"generator","children":[{"returnType":{"refId":"dart.core/List/E","name":"E"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/int","name":"int"},"uri":"sdk/lib/core/list.dart","name":"index","id":"index","line":"99","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"true","name":"growable","id":"growable","line":"100","kind":"param"}],"line":"99","kind":"constructor"},{"name":"E","id":"E","kind":"typeparam"}],"line":"49","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nThe [Iterator] class provides methods to iterate over an object. It\nis transparently used by the for-in construct to test for the end\nof the iteration, and to get the elements.\n\nIf the object iterated over is changed during the iteration, the\nbehavior is unspecified.\n\nThe [Iterator] is initially positioned before the first element. Before\naccessing the first element the iterator must thus be advanced ([moveNext])\nto point to the first element. If there is no element left, then [moveNext]\nreturns false.\n\nA typical usage of an [Iterator] looks as follows:\n\n    var it = obj.iterator;\n    while (it.moveNext()) {\n      use(it.current);\n    }\n","uri":"sdk/lib/core/iterator.dart","name":"Iterator","id":"Iterator","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"\nMoves to the next element. Returns true if [current] contains the next\nelement. Returns false, if no element was left.\n\nIt is safe to invoke [moveNext] even when the iterator is already\npositioned after the last element. In this case [moveNext] has no effect.\n","name":"moveNext","id":"moveNext0()","line":"35","kind":"method"},{"ref":{"refId":"dart.core/Iterator/E","name":"E"},"comment":"\nReturns the current element.\n\nReturn [:null:] if the iterator has not yet been moved to the first\nelement, or if the iterator has been moved after the last element of the\n[Iterable].\n","name":"current","id":"current","line":"44","kind":"property"},{"name":"E","id":"E","kind":"typeparam"}],"line":"27","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nThe [Iterable] interface allows to get an [Iterator] out of an\n[Iterable] object.\n\nThis interface is used by the for-in construct to iterate over an\n[Iterable] object.\nThe for-in construct takes an [Iterable] object at the right-hand\nside, and calls its [iterator] method to get an [Iterator] on it.\n\nA user-defined class that implements the [Iterable] interface can\nbe used as the right-hand side of a for-in construct.\n","uri":"sdk/lib/core/iterable.dart","name":"Iterable","id":"Iterable","children":[{"returnType":{"refId":"dart.core/Iterable","name":"Iterable"},"comment":"\nReturns a lazy [Iterable] where each element [:e:] of `this` is replaced\nby the result of [:f(e):].\n\nThis method returns a view of the mapped elements. As long as the\nreturned [Iterable] is not iterated over, the supplied function [f] will\nnot be invoked. The transformed elements will not be cached. Iterating\nmultiple times over the the returned [Iterable] will invoke the supplied\nfunction [f] multiple times on the same element.\n","name":"map","id":"map1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"sdk/lib/core/iterable.dart","name":"element","id":"element","line":"51","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"51","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Iterable/E","name":"E"}],"name":"Iterable"},"comment":"\nReturns a lazy [Iterable] with all elements that satisfy the\npredicate [test].\n\nThis method returns a view of the mapped elements. As long as the\nreturned [Iterable] is not iterated over, the supplied function [test] will\nnot be invoked. Iterating will not cache results, and thus iterating\nmultiple times over the the returned [Iterable] will invoke the supplied\nfunction [test] multiple times on the same element.\n","name":"where","id":"where1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"sdk/lib/core/iterable.dart","name":"element","id":"element","line":"63","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"63","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","name":"Iterable"},"comment":"\nExpand each element of this [Iterable] into zero or more elements.\n\nThe resulting Iterable will run through the elements returned\nby [f] for each element of this, in order.\n\nThe returned [Iterable] is lazy, and will call [f] for each element\nof this every time it's iterated.\n","name":"expand","id":"expand1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"returnType":{"refId":"dart.core/Iterable","name":"Iterable"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"sdk/lib/core/iterable.dart","name":"element","id":"element","line":"74","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"74","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"\nCheck whether the collection contains an element equal to [element].\n","name":"contains","id":"contains1()","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"name":"element","id":"element","kind":"param"}],"line":"79","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nApplies the function [f] to each element of this collection.\n","name":"forEach","id":"forEach1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"returnType":{"refId":"void","name":"void"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"sdk/lib/core/iterable.dart","name":"element","id":"element","line":"84","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"84","kind":"method"},{"returnType":{"refId":"dart.core/Iterable/E","name":"E"},"comment":"\nReduces a collection to a single value by iteratively combining elements\nof the collection using the provided function.\n\nExample of calculating the sum of an iterable:\n\n    iterable.reduce((value, element) => value + element);\n\n","name":"reduce","id":"reduce1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"combine","id":"combine","children":[{"returnType":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"sdk/lib/core/iterable.dart","name":"value","id":"value","line":"95","kind":"param"},{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"sdk/lib/core/iterable.dart","name":"element","id":"element","line":"95","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"95","kind":"method"},{"comment":"\nReduces a collection to a single value by iteratively combining each\nelement of the collection with an existing value using the provided\nfunction.\n\nUse [initialValue] as the initial value, and the function [combine] to\ncreate a new value from the previous one and an element.\n\nExample of calculating the sum of an iterable:\n\n    iterable.fold(0, (prev, element) => prev + element);\n\n","name":"fold","id":"fold2()","children":[{"name":"initialValue","id":"initialValue","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"combine","id":"combine","children":[{"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"uri":"sdk/lib/core/iterable.dart","name":"previousValue","id":"previousValue","line":"111","kind":"param"},{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"sdk/lib/core/iterable.dart","name":"element","id":"element","line":"111","kind":"param"}],"line":"13","kind":"functiontype"}],"line":"111","kind":"param"}],"line":"110","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"\nReturns true if every elements of this collection satisify the\npredicate [test]. Returns `false` otherwise.\n","name":"every","id":"every1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"sdk/lib/core/iterable.dart","name":"element","id":"element","line":"117","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"117","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nConverts each element to a [String] and concatenates the strings.\n\nConverts each element to a [String] by calling [Object.toString] on it.\nThen concatenates the strings, optionally separated by the [separator]\nstring.\n","name":"join","id":"join1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"defaultValue":"\"\"","name":"separator","id":"separator","kind":"param"}],"line":"126","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"\nReturns true if one element of this collection satisfies the\npredicate [test]. Returns false otherwise.\n","name":"any","id":"any1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"sdk/lib/core/iterable.dart","name":"element","id":"element","line":"136","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"136","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/Iterable/E","name":"E"}],"name":"List"},"comment":"\nCreates a [List] containing the elements of this [Iterable].\n\nThe elements will be in iteration order. The list is fixed-length\nif [growable] is false.\n","name":"toList","id":"toList1()","children":[{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"true","name":"growable","id":"growable","kind":"param"}],"line":"144","kind":"method"},{"returnType":{"refId":"dart.core/Set","arguments":[{"refId":"dart.core/Iterable/E","name":"E"}],"name":"Set"},"comment":"\nCreates a [Set] containing the elements of this [Iterable].\n","name":"toSet","id":"toSet0()","line":"149","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Iterable/E","name":"E"}],"name":"Iterable"},"comment":"\nReturns an [Iterable] with at most [n] elements.\n\nThe returned [Iterable] may contain fewer than [n] elements, if `this`\ncontains fewer than [n] elements.\n","name":"take","id":"take1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"n","id":"n","kind":"param"}],"line":"175","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Iterable/E","name":"E"}],"name":"Iterable"},"comment":"\nReturns an [Iterable] that stops once [test] is not satisfied anymore.\n\nThe filtering happens lazily. Every new [Iterator] of the returned\n[Iterable] will start iterating over the elements of `this`.\n\nWhen the iterator encounters an element `e` that does not satisfy [test],\nit discards `e` and moves into the finished state. That is, it will not\nask or provide any more elements.\n","name":"takeWhile","id":"takeWhile1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"sdk/lib/core/iterable.dart","name":"value","id":"value","line":"187","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"187","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Iterable/E","name":"E"}],"name":"Iterable"},"comment":"\nReturns an [Iterable] that skips the first [n] elements.\n\nIf `this` has fewer than [n] elements, then the resulting [Iterable] will\nbe empty.\n","name":"skip","id":"skip1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"n","id":"n","kind":"param"}],"line":"195","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Iterable/E","name":"E"}],"name":"Iterable"},"comment":"\nReturns an [Iterable] that skips elements while [test] is satisfied.\n\nThe filtering happens lazily. Every new [Iterator] of the returned\n[Iterable] iterates over all elements of `this`.\n\nAs long as the iterator's elements satisfy [test] they are\ndiscarded. Once an element does not satisfy the [test] the iterator stops\ntesting and uses every later element unconditionally. That is, the elements\nof the returned [Iterable] are the elements of `this` starting from the\nfirst element that does not satisfy [test].\n","name":"skipWhile","id":"skipWhile1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"sdk/lib/core/iterable.dart","name":"value","id":"value","line":"209","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"209","kind":"method"},{"returnType":{"refId":"dart.core/Iterable/E","name":"E"},"comment":"\nReturns the first element that satisfies the given predicate [test].\n\nIf none matches, the result of invoking the [orElse] function is\nreturned. By default, when [orElse] is `null`, a [StateError] is\nthrown.\n","name":"firstWhere","id":"firstWhere2()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"sdk/lib/core/iterable.dart","name":"element","id":"element","line":"240","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"orElse","id":"orElse","children":[{"returnType":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"240","kind":"method"},{"returnType":{"refId":"dart.core/Iterable/E","name":"E"},"comment":"\nReturns the last element that satisfies the given predicate [test].\n\nIf none matches, the result of invoking the [orElse] function is\nreturned. By default, when [orElse] is `null`, a [StateError] is\nthrown.\n","name":"lastWhere","id":"lastWhere2()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"sdk/lib/core/iterable.dart","name":"element","id":"element","line":"249","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"orElse","id":"orElse","children":[{"returnType":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"249","kind":"method"},{"returnType":{"refId":"dart.core/Iterable/E","name":"E"},"comment":"\nReturns the single element that satisfies [test]. If no or more than one\nelement match then a [StateError] is thrown.\n","name":"singleWhere","id":"singleWhere1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"sdk/lib/core/iterable.dart","name":"element","id":"element","line":"255","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"255","kind":"method"},{"returnType":{"refId":"dart.core/Iterable/E","name":"E"},"comment":"\nReturns the [index]th element.\n\nIf `this` has fewer than [index] elements throws a [RangeError].\n\nNote: if `this` does not have a deterministic iteration order then the\nfunction may simply return any element without any iteration if there are\nat least [index] elements in `this`.\n","name":"elementAt","id":"elementAt1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"index","id":"index","kind":"param"}],"line":"266","kind":"method"},{"ref":{"refId":"dart.core/Iterator","arguments":[{"refId":"dart.core/Iterable/E","name":"E"}],"name":"Iterator"},"comment":"\nReturns an [Iterator] that iterates over this [Iterable] object.\n","name":"iterator","id":"iterator","line":"39","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nReturns the number of elements in [this].\n\nCounting all elements may be involve running through all elements and can\ntherefore be slow.\n","name":"length","id":"length","line":"157","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"\nReturns true if there is no element in this collection.\n","name":"isEmpty","id":"isEmpty","line":"162","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"\nReturns true if there is at least one element in this collection.\n","name":"isNotEmpty","id":"isNotEmpty","line":"167","kind":"property"},{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"comment":"\nReturns the first element.\n\nIf `this` is empty throws a [StateError]. Otherwise this method is\nequivalent to [:this.elementAt(0):]\n","name":"first","id":"first","line":"217","kind":"property"},{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"comment":"\nReturns the last element.\n\nIf `this` is empty throws a [StateError].\n","name":"last","id":"last","line":"224","kind":"property"},{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"comment":"\nReturns the single element in `this`.\n\nIf `this` is empty or has more than one element throws a [StateError].\n","name":"single","id":"single","line":"231","kind":"property"},{"name":"Iterable","id":"Iterable0()","line":"20","kind":"constructor"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Iterable/E","name":"E"}],"name":"Iterable"},"comment":"\nCreate an [Iterable] that generates its elements dynamically.\n\nThe [Iterators] created by the [Iterable] will count from\nzero to [:count - 1:] while iterating, and call [generator]\nwith that index to create the next value.\n\nAs an [Iterable], [:new Iterable.generate(n, generator)):] is equivalent to\n[:const [0, ..., n - 1].map(generator):]\n","name":"Iterable.generate","id":"Iterable.generate2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"count","id":"count","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"generator","id":"generator","children":[{"returnType":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/int","name":"int"},"uri":"sdk/lib/core/iterable.dart","name":"index","id":"index","line":"32","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"32","kind":"constructor"},{"name":"E","id":"E","kind":"typeparam"}],"line":"19","kind":"class"}],"line":"5","kind":"library"},{"uri":"sdk/lib/_collection_dev/collection_dev.dart","name":"dart:_collection-dev","id":"dart._collection.dev","children":[{"interfaces":[{"refId":"dart._collection.dev/UnmodifiableListMixin","arguments":[{"refId":"dart._collection.dev/UnmodifiableListBase/E","name":"E"}],"name":"UnmodifiableListMixin"}],"superclass":{"refId":"dart.collection/ListBase","arguments":[{"refId":"dart._collection.dev/UnmodifiableListBase/E","name":"E"}],"name":"ListBase"},"comment":"\nAbstract implementation of an unmodifiable list.\n\nAll operations are defined in terms of `length` and `operator[]`,\nwhich need to be implemented.\n","uri":"sdk/lib/_collection_dev/list.dart","name":"UnmodifiableListBase","id":"UnmodifiableListBase","children":[{"returnType":{"refId":"void","name":"void"},"isOperator":true,"name":"[]=","id":"[]=2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"index","id":"index","kind":"param"},{"ref":{"refId":"dart._collection.dev/UnmodifiableListMixin/E","name":"E"},"name":"value","id":"value","kind":"param"}],"line":"98","kind":"method"},{"returnType":{"refId":"void","name":"void"},"isSetter":true,"name":"length=","id":"length=1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"newLength","id":"newLength","kind":"param"}],"line":"103","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"setAll","id":"setAll2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"at","id":"at","kind":"param"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart._collection.dev/UnmodifiableListMixin/E","name":"E"}],"name":"Iterable"},"name":"iterable","id":"iterable","kind":"param"}],"line":"108","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"add","id":"add1()","children":[{"ref":{"refId":"dart._collection.dev/UnmodifiableListMixin/E","name":"E"},"name":"value","id":"value","kind":"param"}],"line":"113","kind":"method"},{"returnType":{"refId":"dart._collection.dev/UnmodifiableListMixin/E","name":"E"},"name":"insert","id":"insert2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"index","id":"index","kind":"param"},{"ref":{"refId":"dart._collection.dev/UnmodifiableListMixin/E","name":"E"},"name":"value","id":"value","kind":"param"}],"line":"118","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"insertAll","id":"insertAll2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"at","id":"at","kind":"param"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart._collection.dev/UnmodifiableListMixin/E","name":"E"}],"name":"Iterable"},"name":"iterable","id":"iterable","kind":"param"}],"line":"123","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"addAll","id":"addAll1()","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart._collection.dev/UnmodifiableListMixin/E","name":"E"}],"name":"Iterable"},"name":"iterable","id":"iterable","kind":"param"}],"line":"128","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"remove","id":"remove1()","children":[{"ref":{"refId":"dart._collection.dev/UnmodifiableListMixin/E","name":"E"},"name":"element","id":"element","kind":"param"}],"line":"133","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"removeAll","id":"removeAll1()","children":[{"ref":{"refId":"dart.core/Iterable","name":"Iterable"},"name":"elements","id":"elements","kind":"param"}],"line":"138","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"retainAll","id":"retainAll1()","children":[{"ref":{"refId":"dart.core/Iterable","name":"Iterable"},"name":"elements","id":"elements","kind":"param"}],"line":"143","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"removeWhere","id":"removeWhere1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart._collection.dev/UnmodifiableListMixin/E","name":"E"},"uri":"sdk/lib/_collection_dev/list.dart","name":"element","id":"element","line":"148","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"148","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"retainWhere","id":"retainWhere1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart._collection.dev/UnmodifiableListMixin/E","name":"E"},"uri":"sdk/lib/_collection_dev/list.dart","name":"element","id":"element","line":"153","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"153","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"sort","id":"sort1()","children":[{"ref":{"refId":"dart.core/Comparator","name":"Comparator"},"isOptional":true,"name":"compare","id":"compare","kind":"param"}],"line":"158","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"clear","id":"clear0()","line":"163","kind":"method"},{"returnType":{"refId":"dart._collection.dev/UnmodifiableListMixin/E","name":"E"},"name":"removeAt","id":"removeAt1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"index","id":"index","kind":"param"}],"line":"168","kind":"method"},{"returnType":{"refId":"dart._collection.dev/UnmodifiableListMixin/E","name":"E"},"name":"removeLast","id":"removeLast0()","line":"173","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"setRange","id":"setRange4()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"start","id":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"end","id":"end","kind":"param"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart._collection.dev/UnmodifiableListMixin/E","name":"E"}],"name":"Iterable"},"name":"iterable","id":"iterable","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"0","name":"skipCount","id":"skipCount","kind":"param"}],"line":"178","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"removeRange","id":"removeRange2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"start","id":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"end","id":"end","kind":"param"}],"line":"183","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"replaceRange","id":"replaceRange3()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"start","id":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"end","id":"end","kind":"param"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart._collection.dev/UnmodifiableListMixin/E","name":"E"}],"name":"Iterable"},"name":"iterable","id":"iterable","kind":"param"}],"line":"188","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"fillRange","id":"fillRange3()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"start","id":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"end","id":"end","kind":"param"},{"ref":{"refId":"dart._collection.dev/UnmodifiableListMixin/E","name":"E"},"isOptional":true,"name":"fillValue","id":"fillValue","kind":"param"}],"line":"193","kind":"method"},{"name":"E","id":"E","kind":"typeparam"}],"line":"213","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nMixin for an unmodifiable [List] class.\n\nThis overrides all mutating methods with methods that throw.\nThis mixin is intended to be mixed in on top of [ListMixin] on\nunmodifiable lists.\n","uri":"sdk/lib/_collection_dev/list.dart","name":"UnmodifiableListMixin","id":"UnmodifiableListMixin","children":[{"returnType":{"refId":"void","name":"void"},"isOperator":true,"name":"[]=","id":"[]=2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"index","id":"index","kind":"param"},{"ref":{"refId":"dart._collection.dev/UnmodifiableListMixin/E","name":"E"},"name":"value","id":"value","kind":"param"}],"line":"98","kind":"method"},{"returnType":{"refId":"void","name":"void"},"isSetter":true,"name":"length=","id":"length=1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"newLength","id":"newLength","kind":"param"}],"line":"103","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"setAll","id":"setAll2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"at","id":"at","kind":"param"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart._collection.dev/UnmodifiableListMixin/E","name":"E"}],"name":"Iterable"},"name":"iterable","id":"iterable","kind":"param"}],"line":"108","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"add","id":"add1()","children":[{"ref":{"refId":"dart._collection.dev/UnmodifiableListMixin/E","name":"E"},"name":"value","id":"value","kind":"param"}],"line":"113","kind":"method"},{"returnType":{"refId":"dart._collection.dev/UnmodifiableListMixin/E","name":"E"},"name":"insert","id":"insert2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"index","id":"index","kind":"param"},{"ref":{"refId":"dart._collection.dev/UnmodifiableListMixin/E","name":"E"},"name":"value","id":"value","kind":"param"}],"line":"118","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"insertAll","id":"insertAll2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"at","id":"at","kind":"param"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart._collection.dev/UnmodifiableListMixin/E","name":"E"}],"name":"Iterable"},"name":"iterable","id":"iterable","kind":"param"}],"line":"123","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"addAll","id":"addAll1()","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart._collection.dev/UnmodifiableListMixin/E","name":"E"}],"name":"Iterable"},"name":"iterable","id":"iterable","kind":"param"}],"line":"128","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"remove","id":"remove1()","children":[{"ref":{"refId":"dart._collection.dev/UnmodifiableListMixin/E","name":"E"},"name":"element","id":"element","kind":"param"}],"line":"133","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"removeAll","id":"removeAll1()","children":[{"ref":{"refId":"dart.core/Iterable","name":"Iterable"},"name":"elements","id":"elements","kind":"param"}],"line":"138","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"retainAll","id":"retainAll1()","children":[{"ref":{"refId":"dart.core/Iterable","name":"Iterable"},"name":"elements","id":"elements","kind":"param"}],"line":"143","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"removeWhere","id":"removeWhere1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart._collection.dev/UnmodifiableListMixin/E","name":"E"},"uri":"sdk/lib/_collection_dev/list.dart","name":"element","id":"element","line":"148","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"148","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"retainWhere","id":"retainWhere1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart._collection.dev/UnmodifiableListMixin/E","name":"E"},"uri":"sdk/lib/_collection_dev/list.dart","name":"element","id":"element","line":"153","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"153","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"sort","id":"sort1()","children":[{"ref":{"refId":"dart.core/Comparator","name":"Comparator"},"isOptional":true,"name":"compare","id":"compare","kind":"param"}],"line":"158","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"clear","id":"clear0()","line":"163","kind":"method"},{"returnType":{"refId":"dart._collection.dev/UnmodifiableListMixin/E","name":"E"},"name":"removeAt","id":"removeAt1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"index","id":"index","kind":"param"}],"line":"168","kind":"method"},{"returnType":{"refId":"dart._collection.dev/UnmodifiableListMixin/E","name":"E"},"name":"removeLast","id":"removeLast0()","line":"173","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"setRange","id":"setRange4()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"start","id":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"end","id":"end","kind":"param"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart._collection.dev/UnmodifiableListMixin/E","name":"E"}],"name":"Iterable"},"name":"iterable","id":"iterable","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"0","name":"skipCount","id":"skipCount","kind":"param"}],"line":"178","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"removeRange","id":"removeRange2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"start","id":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"end","id":"end","kind":"param"}],"line":"183","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"replaceRange","id":"replaceRange3()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"start","id":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"end","id":"end","kind":"param"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart._collection.dev/UnmodifiableListMixin/E","name":"E"}],"name":"Iterable"},"name":"iterable","id":"iterable","kind":"param"}],"line":"188","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"fillRange","id":"fillRange3()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"start","id":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"end","id":"end","kind":"param"},{"ref":{"refId":"dart._collection.dev/UnmodifiableListMixin/E","name":"E"},"isOptional":true,"name":"fillValue","id":"fillValue","kind":"param"}],"line":"193","kind":"method"},{"name":"E","id":"E","kind":"typeparam"}],"line":"96","kind":"class"}],"line":"5","kind":"library"}],"uri":"sdk/lib/collection/collection.dart","name":"dart:collection","id":"dart.collection","children":[{"interfaces":[{"refId":"dart.core/Map","arguments":[{"refId":"dart.collection/LinkedHashMap/K","name":"K"},{"refId":"dart.collection/LinkedHashMap/V","name":"V"}],"name":"Map"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nA hash-table based implementation of [Map].\n\nKeys insertion order is remembered, and keys are iterated in insertion order.\nValues are iterated in their corresponding key's order.\n\nThe keys of a `HashMap` must have consistent [Object.operator==]\nand [Object.hashCode] implementations. This means that the `==` operator\nmust define a stable equivalence relation on the keys (reflexive,\nanti-symmetric, transitive, and consistent over time), and that `hashCode`\nmust be the same for objects that are considered equal by `==`.\n\nThe map allows `null` as a key.\n","uri":"sdk/lib/collection/linked_hash_map.dart","name":"LinkedHashMap","id":"LinkedHashMap","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"containsKey","id":"containsKey1()","children":[{"ref":{"refId":"dart.collection/LinkedHashMap/K","name":"K"},"name":"key","id":"key","kind":"param"}],"line":"28","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"containsValue","id":"containsValue1()","children":[{"ref":{"refId":"dart.collection/LinkedHashMap/V","name":"V"},"name":"value","id":"value","kind":"param"}],"line":"30","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"addAll","id":"addAll1()","children":[{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.collection/LinkedHashMap/K","name":"K"},{"refId":"dart.collection/LinkedHashMap/V","name":"V"}],"name":"Map"},"name":"other","id":"other","kind":"param"}],"line":"32","kind":"method"},{"returnType":{"refId":"dart.collection/LinkedHashMap/V","name":"V"},"isOperator":true,"name":"[]","id":"[]1()","children":[{"ref":{"refId":"dart.collection/LinkedHashMap/K","name":"K"},"name":"key","id":"key","kind":"param"}],"line":"34","kind":"method"},{"returnType":{"refId":"void","name":"void"},"isOperator":true,"name":"[]=","id":"[]=2()","children":[{"ref":{"refId":"dart.collection/LinkedHashMap/K","name":"K"},"name":"key","id":"key","kind":"param"},{"ref":{"refId":"dart.collection/LinkedHashMap/V","name":"V"},"name":"value","id":"value","kind":"param"}],"line":"36","kind":"method"},{"returnType":{"refId":"dart.collection/LinkedHashMap/V","name":"V"},"name":"putIfAbsent","id":"putIfAbsent2()","children":[{"ref":{"refId":"dart.collection/LinkedHashMap/K","name":"K"},"name":"key","id":"key","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"ifAbsent","id":"ifAbsent","children":[{"returnType":{"refId":"dart.collection/LinkedHashMap/V","name":"V"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"38","kind":"method"},{"returnType":{"refId":"dart.collection/LinkedHashMap/V","name":"V"},"name":"remove","id":"remove1()","children":[{"ref":{"refId":"dart.collection/LinkedHashMap/K","name":"K"},"name":"key","id":"key","kind":"param"}],"line":"40","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"clear","id":"clear0()","line":"42","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"forEach","id":"forEach1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"action","id":"action","children":[{"returnType":{"refId":"void","name":"void"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/LinkedHashMap/K","name":"K"},"uri":"sdk/lib/collection/linked_hash_map.dart","name":"key","id":"key","line":"44","kind":"param"},{"ref":{"refId":"dart.collection/LinkedHashMap/V","name":"V"},"uri":"sdk/lib/collection/linked_hash_map.dart","name":"value","id":"value","line":"44","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"44","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"name":"toString","id":"toString0()","line":"57","kind":"method"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/LinkedHashMap/K","name":"K"}],"name":"Iterable"},"comment":"The keys of the map, in insertion order. ","name":"keys","id":"keys","line":"47","kind":"property"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/LinkedHashMap/V","name":"V"}],"name":"Iterable"},"comment":"The values of the map, in the order of their corresponding [keys].","name":"values","id":"values","line":"49","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"length","id":"length","line":"51","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isEmpty","id":"isEmpty","line":"53","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isNotEmpty","id":"isNotEmpty","line":"55","kind":"property"},{"name":"LinkedHashMap","id":"LinkedHashMap0()","line":"22","kind":"constructor"},{"returnType":{"refId":"dart.collection/LinkedHashMap","arguments":[{"refId":"dart.collection/LinkedHashMap/K","name":"K"},{"refId":"dart.collection/LinkedHashMap/V","name":"V"}],"name":"LinkedHashMap"},"name":"LinkedHashMap.from","id":"LinkedHashMap.from1()","children":[{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.collection/LinkedHashMap/K","name":"K"},{"refId":"dart.collection/LinkedHashMap/V","name":"V"}],"name":"Map"},"name":"other","id":"other","kind":"param"}],"line":"24","kind":"constructor"},{"name":"K","id":"K","kind":"typeparam"},{"name":"V","id":"V","kind":"typeparam"}],"line":"21","kind":"class"},{"superclass":{"refId":"dart.collection/_HashSetBase","arguments":[{"refId":"dart.collection/LinkedHashSet/E","name":"E"}],"name":"_HashSetBase"},"comment":"\nA [LinkedHashSet] is a hash-table based [Set] implementation.\n\nThe `LinkedHashSet` also keep track of the order that elements were inserted\nin, and iteration happens in first-to-last insertion order.\n\nThe elements of a `LinkedHashSet` must have consistent [Object.operator==]\nand [Object.hashCode] implementations. This means that the `==` operator\nmust define a stable equivalence relation on the elements (reflexive,\nanti-symmetric, transitive, and consistent over time), and that `hashCode`\nmust be the same for objects that are considered equal by `==`.\n\nThe set allows `null` as an element.\n\nMost simple operations on `HashSet` are done in constant time: [add],\n[contains], [remove], and [length].\n","uri":"sdk/lib/collection/linked_hash_set.dart","name":"LinkedHashSet","id":"LinkedHashSet","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"contains","id":"contains1()","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"name":"object","id":"object","kind":"param"}],"line":"43","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Perform an operation on each element in insertion order. ","name":"forEach","id":"forEach1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"action","id":"action","children":[{"returnType":{"refId":"void","name":"void"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/LinkedHashSet/E","name":"E"},"uri":"sdk/lib/collection/linked_hash_set.dart","name":"element","id":"element","line":"46","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"46","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"add","id":"add1()","children":[{"ref":{"refId":"dart.collection/LinkedHashSet/E","name":"E"},"name":"element","id":"element","kind":"param"}],"line":"59","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"addAll","id":"addAll1()","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/LinkedHashSet/E","name":"E"}],"name":"Iterable"},"name":"objects","id":"objects","kind":"param"}],"line":"61","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"remove","id":"remove1()","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"name":"object","id":"object","kind":"param"}],"line":"63","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"removeAll","id":"removeAll1()","children":[{"ref":{"refId":"dart.core/Iterable","name":"Iterable"},"name":"objectsToRemove","id":"objectsToRemove","kind":"param"}],"line":"65","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"removeWhere","id":"removeWhere1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/LinkedHashSet/E","name":"E"},"uri":"sdk/lib/collection/linked_hash_set.dart","name":"element","id":"element","line":"67","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"67","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"retainWhere","id":"retainWhere1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/LinkedHashSet/E","name":"E"},"uri":"sdk/lib/collection/linked_hash_set.dart","name":"element","id":"element","line":"69","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"69","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"clear","id":"clear0()","line":"71","kind":"method"},{"returnType":{"refId":"dart.core/Set","arguments":[{"refId":"dart.collection/LinkedHashSet/E","name":"E"}],"name":"Set"},"name":"_newSet","isPrivate":true,"id":"_newSet0()","line":"74","kind":"method"},{"ref":{"refId":"dart.core/Iterator","arguments":[{"refId":"dart.collection/LinkedHashSet/E","name":"E"}],"name":"Iterator"},"comment":"Return an iterator that iterates over elements in insertion order. ","name":"iterator","id":"iterator","line":"35","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"length","id":"length","line":"37","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isEmpty","id":"isEmpty","line":"39","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isNotEmpty","id":"isNotEmpty","line":"41","kind":"property"},{"ref":{"refId":"dart.collection/LinkedHashSet/E","name":"E"},"name":"first","id":"first","line":"48","kind":"property"},{"ref":{"refId":"dart.collection/LinkedHashSet/E","name":"E"},"name":"last","id":"last","line":"50","kind":"property"},{"ref":{"refId":"dart.collection/LinkedHashSet/E","name":"E"},"name":"single","id":"single","line":"52","kind":"property"},{"name":"LinkedHashSet","id":"LinkedHashSet0()","line":"26","kind":"constructor"},{"returnType":{"refId":"dart.collection/LinkedHashSet","arguments":[{"refId":"dart.collection/LinkedHashSet/E","name":"E"}],"name":"LinkedHashSet"},"name":"LinkedHashSet.from","id":"LinkedHashSet.from1()","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/LinkedHashSet/E","name":"E"}],"name":"Iterable"},"name":"iterable","id":"iterable","kind":"param"}],"line":"28","kind":"constructor"},{"name":"E","id":"E","kind":"typeparam"}],"line":"24","kind":"class"},{"isAbstract":true,"interfaces":[{"refId":"dart.core/List","arguments":[{"refId":"dart.collection/ListMixin/E","name":"E"}],"name":"List"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nBase implementation of a [List] class.\n\nThis class can be used as a mixin.\n\nThis implements all read operations using only the `length` and\n`operator[]` members. It implements write operations using those and\n`length=` and `operator[]=`\n\nA fixed-length list should mix this class in, and the [FixedLengthListMixin]\nas well, in that order, to overwrite the methods that modify the length.\n\nAn unmodifiable list should mix [UnmodifiableListMixin] on top of this\nmixin to prevent all modifications.\n","uri":"sdk/lib/collection/list.dart","name":"ListMixin","id":"ListMixin","children":[{"returnType":{"refId":"dart.collection/ListMixin/E","name":"E"},"name":"elementAt","id":"elementAt1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"index","id":"index","kind":"param"}],"line":"34","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"forEach","id":"forEach1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"action","id":"action","children":[{"returnType":{"refId":"void","name":"void"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/ListMixin/E","name":"E"},"uri":"sdk/lib/collection/list.dart","name":"element","id":"element","line":"36","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"36","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"contains","id":"contains1()","children":[{"ref":{"refId":"dart.collection/ListMixin/E","name":"E"},"name":"element","id":"element","kind":"param"}],"line":"66","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"every","id":"every1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/ListMixin/E","name":"E"},"uri":"sdk/lib/collection/list.dart","name":"element","id":"element","line":"77","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"77","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"any","id":"any1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/ListMixin/E","name":"E"},"uri":"sdk/lib/collection/list.dart","name":"element","id":"element","line":"88","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"88","kind":"method"},{"returnType":{"refId":"dart.collection/ListMixin/E","name":"E"},"name":"firstWhere","id":"firstWhere2()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/ListMixin/E","name":"E"},"uri":"sdk/lib/collection/list.dart","name":"element","id":"element","line":"99","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"orElse","id":"orElse","children":[{"returnType":{"refId":"dart.collection/ListMixin/E","name":"E"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"99","kind":"method"},{"returnType":{"refId":"dart.collection/ListMixin/E","name":"E"},"name":"lastWhere","id":"lastWhere2()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/ListMixin/E","name":"E"},"uri":"sdk/lib/collection/list.dart","name":"element","id":"element","line":"112","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"orElse","id":"orElse","children":[{"returnType":{"refId":"dart.collection/ListMixin/E","name":"E"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"112","kind":"method"},{"returnType":{"refId":"dart.collection/ListMixin/E","name":"E"},"name":"singleWhere","id":"singleWhere1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/ListMixin/E","name":"E"},"uri":"sdk/lib/collection/list.dart","name":"element","id":"element","line":"125","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"125","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"name":"join","id":"join1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"defaultValue":"\"\"","name":"separator","id":"separator","kind":"param"}],"line":"146","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/ListMixin/E","name":"E"}],"name":"Iterable"},"name":"where","id":"where1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/ListMixin/E","name":"E"},"uri":"sdk/lib/collection/list.dart","name":"element","id":"element","line":"175","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"175","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","name":"Iterable"},"name":"map","id":"map1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/ListMixin/E","name":"E"},"uri":"sdk/lib/collection/list.dart","name":"element","id":"element","line":"177","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"177","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","name":"Iterable"},"name":"expand","id":"expand1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"returnType":{"refId":"dart.core/Iterable","name":"Iterable"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/ListMixin/E","name":"E"},"uri":"sdk/lib/collection/list.dart","name":"element","id":"element","line":"179","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"179","kind":"method"},{"returnType":{"refId":"dart.collection/ListMixin/E","name":"E"},"name":"reduce","id":"reduce1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"combine","id":"combine","children":[{"returnType":{"refId":"dart.collection/ListMixin/E","name":"E"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/ListMixin/E","name":"E"},"uri":"sdk/lib/collection/list.dart","name":"previousValue","id":"previousValue","line":"182","kind":"param"},{"ref":{"refId":"dart.collection/ListMixin/E","name":"E"},"uri":"sdk/lib/collection/list.dart","name":"element","id":"element","line":"182","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"182","kind":"method"},{"name":"fold","id":"fold2()","children":[{"name":"initialValue","id":"initialValue","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"combine","id":"combine","children":[{"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"uri":"sdk/lib/collection/list.dart","name":"previousValue","id":"previousValue","line":"191","kind":"param"},{"ref":{"refId":"dart.collection/ListMixin/E","name":"E"},"uri":"sdk/lib/collection/list.dart","name":"element","id":"element","line":"191","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"191","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/ListMixin/E","name":"E"}],"name":"Iterable"},"name":"skip","id":"skip1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"count","id":"count","kind":"param"}],"line":"203","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/ListMixin/E","name":"E"}],"name":"Iterable"},"name":"skipWhile","id":"skipWhile1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/ListMixin/E","name":"E"},"uri":"sdk/lib/collection/list.dart","name":"element","id":"element","line":"205","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"205","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/ListMixin/E","name":"E"}],"name":"Iterable"},"name":"take","id":"take1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"count","id":"count","kind":"param"}],"line":"209","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/ListMixin/E","name":"E"}],"name":"Iterable"},"name":"takeWhile","id":"takeWhile1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/ListMixin/E","name":"E"},"uri":"sdk/lib/collection/list.dart","name":"element","id":"element","line":"211","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"211","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.collection/ListMixin/E","name":"E"}],"name":"List"},"name":"toList","id":"toList1()","children":[{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"true","name":"growable","id":"growable","kind":"param"}],"line":"215","kind":"method"},{"returnType":{"refId":"dart.core/Set","arguments":[{"refId":"dart.collection/ListMixin/E","name":"E"}],"name":"Set"},"name":"toSet","id":"toSet0()","line":"228","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"add","id":"add1()","children":[{"ref":{"refId":"dart.collection/ListMixin/E","name":"E"},"name":"element","id":"element","kind":"param"}],"line":"237","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"addAll","id":"addAll1()","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/ListMixin/E","name":"E"}],"name":"Iterable"},"name":"iterable","id":"iterable","kind":"param"}],"line":"241","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"remove","id":"remove1()","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"name":"element","id":"element","kind":"param"}],"line":"247","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"removeWhere","id":"removeWhere1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/ListMixin/E","name":"E"},"uri":"sdk/lib/collection/list.dart","name":"element","id":"element","line":"258","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"258","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"retainWhere","id":"retainWhere1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/ListMixin/E","name":"E"},"uri":"sdk/lib/collection/list.dart","name":"element","id":"element","line":"262","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"262","kind":"method"},{"returnType":{"refId":"void","name":"void"},"isStatic":true,"name":"_filter","isPrivate":true,"id":"_filter3()","children":[{"ref":{"refId":"dart.core/List","name":"List"},"name":"source","id":"source","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"uri":"sdk/lib/collection/list.dart","name":"element","id":"element","line":"267","kind":"param"}],"line":"13","kind":"functiontype"}],"line":"267","kind":"param"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"retainMatching","id":"retainMatching","line":"268","kind":"param"}],"line":"266","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"clear","id":"clear0()","line":"286","kind":"method"},{"returnType":{"refId":"dart.collection/ListMixin/E","name":"E"},"name":"removeLast","id":"removeLast0()","line":"290","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"sort","id":"sort1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"compare","id":"compare","children":[{"returnType":{"refId":"dart.core/int","name":"int"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/ListMixin/E","name":"E"},"uri":"sdk/lib/collection/list.dart","name":"a","id":"a","line":"299","kind":"param"},{"ref":{"refId":"dart.collection/ListMixin/E","name":"E"},"uri":"sdk/lib/collection/list.dart","name":"b","id":"b","line":"299","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"299","kind":"method"},{"returnType":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/int","name":"int"},{"refId":"dart.collection/ListMixin/E","name":"E"}],"name":"Map"},"name":"asMap","id":"asMap0()","line":"307","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_rangeCheck","isPrivate":true,"id":"_rangeCheck2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"start","id":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"end","id":"end","kind":"param"}],"line":"311","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.collection/ListMixin/E","name":"E"}],"name":"List"},"name":"sublist","id":"sublist2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"start","id":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"name":"end","id":"end","kind":"param"}],"line":"320","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/ListMixin/E","name":"E"}],"name":"Iterable"},"name":"getRange","id":"getRange2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"start","id":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"end","id":"end","kind":"param"}],"line":"331","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"removeRange","id":"removeRange2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"start","id":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"end","id":"end","kind":"param"}],"line":"336","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"fillRange","id":"fillRange3()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"start","id":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"end","id":"end","kind":"param"},{"ref":{"refId":"dart.collection/ListMixin/E","name":"E"},"isOptional":true,"name":"fill","id":"fill","kind":"param"}],"line":"343","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"setRange","id":"setRange4()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"start","id":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"end","id":"end","kind":"param"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/ListMixin/E","name":"E"}],"name":"Iterable"},"name":"iterable","id":"iterable","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"0","name":"skipCount","id":"skipCount","kind":"param"}],"line":"350","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"replaceRange","id":"replaceRange3()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"start","id":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"end","id":"end","kind":"param"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/ListMixin/E","name":"E"}],"name":"Iterable"},"name":"newContents","id":"newContents","kind":"param"}],"line":"382","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"name":"indexOf","id":"indexOf2()","children":[{"ref":{"refId":"dart.collection/ListMixin/E","name":"E"},"name":"element","id":"element","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"0","name":"startIndex","id":"startIndex","kind":"param"}],"line":"388","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"comment":"\nReturns the last index in the list [a] of the given [element], starting\nthe search at index [startIndex] to 0.\nReturns -1 if [element] is not found.\n","name":"lastIndexOf","id":"lastIndexOf2()","children":[{"ref":{"refId":"dart.collection/ListMixin/E","name":"E"},"name":"element","id":"element","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"name":"startIndex","id":"startIndex","kind":"param"}],"line":"408","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"insert","id":"insert2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"index","id":"index","kind":"param"},{"ref":{"refId":"dart.collection/ListMixin/E","name":"E"},"name":"element","id":"element","kind":"param"}],"line":"427","kind":"method"},{"returnType":{"refId":"dart.collection/ListMixin/E","name":"E"},"name":"removeAt","id":"removeAt1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"index","id":"index","kind":"param"}],"line":"444","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"insertAll","id":"insertAll2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"index","id":"index","kind":"param"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/ListMixin/E","name":"E"}],"name":"Iterable"},"name":"iterable","id":"iterable","kind":"param"}],"line":"451","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"setAll","id":"setAll2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"index","id":"index","kind":"param"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/ListMixin/E","name":"E"}],"name":"Iterable"},"name":"iterable","id":"iterable","kind":"param"}],"line":"468","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"name":"toString","id":"toString0()","line":"480","kind":"method"},{"ref":{"refId":"dart.core/Iterator","arguments":[{"refId":"dart.collection/ListMixin/E","name":"E"}],"name":"Iterator"},"name":"iterator","id":"iterator","line":"32","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isEmpty","id":"isEmpty","line":"46","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isNotEmpty","id":"isNotEmpty","line":"48","kind":"property"},{"ref":{"refId":"dart.collection/ListMixin/E","name":"E"},"name":"first","id":"first","line":"50","kind":"property"},{"ref":{"refId":"dart.collection/ListMixin/E","name":"E"},"name":"last","id":"last","line":"55","kind":"property"},{"ref":{"refId":"dart.collection/ListMixin/E","name":"E"},"name":"single","id":"single","line":"60","kind":"property"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/ListMixin/E","name":"E"}],"name":"Iterable"},"name":"reversed","id":"reversed","line":"478","kind":"property"},{"name":"E","id":"E","kind":"typeparam"}],"line":"30","kind":"class"},{"interfaces":[{"refId":"dart.collection/ListMixin","arguments":[{"refId":"dart.collection/ListBase/E","name":"E"}],"name":"ListMixin"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nAbstract implementation of a list.\n\nAll operations are defined in terms of `length`, `operator[]`,\n`operator[]=` and `length=`, which need to be implemented.\n","uri":"sdk/lib/collection/list.dart","name":"ListBase","id":"ListBase","children":[{"returnType":{"refId":"dart.collection/ListMixin/E","name":"E"},"name":"elementAt","id":"elementAt1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"index","id":"index","kind":"param"}],"line":"34","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"forEach","id":"forEach1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"action","id":"action","children":[{"returnType":{"refId":"void","name":"void"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/ListMixin/E","name":"E"},"uri":"sdk/lib/collection/list.dart","name":"element","id":"element","line":"36","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"36","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"contains","id":"contains1()","children":[{"ref":{"refId":"dart.collection/ListMixin/E","name":"E"},"name":"element","id":"element","kind":"param"}],"line":"66","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"every","id":"every1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/ListMixin/E","name":"E"},"uri":"sdk/lib/collection/list.dart","name":"element","id":"element","line":"77","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"77","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"any","id":"any1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/ListMixin/E","name":"E"},"uri":"sdk/lib/collection/list.dart","name":"element","id":"element","line":"88","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"88","kind":"method"},{"returnType":{"refId":"dart.collection/ListMixin/E","name":"E"},"name":"firstWhere","id":"firstWhere2()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/ListMixin/E","name":"E"},"uri":"sdk/lib/collection/list.dart","name":"element","id":"element","line":"99","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"orElse","id":"orElse","children":[{"returnType":{"refId":"dart.collection/ListMixin/E","name":"E"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"99","kind":"method"},{"returnType":{"refId":"dart.collection/ListMixin/E","name":"E"},"name":"lastWhere","id":"lastWhere2()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/ListMixin/E","name":"E"},"uri":"sdk/lib/collection/list.dart","name":"element","id":"element","line":"112","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"orElse","id":"orElse","children":[{"returnType":{"refId":"dart.collection/ListMixin/E","name":"E"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"112","kind":"method"},{"returnType":{"refId":"dart.collection/ListMixin/E","name":"E"},"name":"singleWhere","id":"singleWhere1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/ListMixin/E","name":"E"},"uri":"sdk/lib/collection/list.dart","name":"element","id":"element","line":"125","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"125","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"name":"join","id":"join1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"defaultValue":"\"\"","name":"separator","id":"separator","kind":"param"}],"line":"146","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/ListMixin/E","name":"E"}],"name":"Iterable"},"name":"where","id":"where1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/ListMixin/E","name":"E"},"uri":"sdk/lib/collection/list.dart","name":"element","id":"element","line":"175","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"175","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","name":"Iterable"},"name":"map","id":"map1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/ListMixin/E","name":"E"},"uri":"sdk/lib/collection/list.dart","name":"element","id":"element","line":"177","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"177","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","name":"Iterable"},"name":"expand","id":"expand1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"returnType":{"refId":"dart.core/Iterable","name":"Iterable"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/ListMixin/E","name":"E"},"uri":"sdk/lib/collection/list.dart","name":"element","id":"element","line":"179","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"179","kind":"method"},{"returnType":{"refId":"dart.collection/ListMixin/E","name":"E"},"name":"reduce","id":"reduce1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"combine","id":"combine","children":[{"returnType":{"refId":"dart.collection/ListMixin/E","name":"E"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/ListMixin/E","name":"E"},"uri":"sdk/lib/collection/list.dart","name":"previousValue","id":"previousValue","line":"182","kind":"param"},{"ref":{"refId":"dart.collection/ListMixin/E","name":"E"},"uri":"sdk/lib/collection/list.dart","name":"element","id":"element","line":"182","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"182","kind":"method"},{"name":"fold","id":"fold2()","children":[{"name":"initialValue","id":"initialValue","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"combine","id":"combine","children":[{"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"uri":"sdk/lib/collection/list.dart","name":"previousValue","id":"previousValue","line":"191","kind":"param"},{"ref":{"refId":"dart.collection/ListMixin/E","name":"E"},"uri":"sdk/lib/collection/list.dart","name":"element","id":"element","line":"191","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"191","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/ListMixin/E","name":"E"}],"name":"Iterable"},"name":"skip","id":"skip1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"count","id":"count","kind":"param"}],"line":"203","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/ListMixin/E","name":"E"}],"name":"Iterable"},"name":"skipWhile","id":"skipWhile1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/ListMixin/E","name":"E"},"uri":"sdk/lib/collection/list.dart","name":"element","id":"element","line":"205","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"205","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/ListMixin/E","name":"E"}],"name":"Iterable"},"name":"take","id":"take1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"count","id":"count","kind":"param"}],"line":"209","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/ListMixin/E","name":"E"}],"name":"Iterable"},"name":"takeWhile","id":"takeWhile1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/ListMixin/E","name":"E"},"uri":"sdk/lib/collection/list.dart","name":"element","id":"element","line":"211","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"211","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.collection/ListMixin/E","name":"E"}],"name":"List"},"name":"toList","id":"toList1()","children":[{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"true","name":"growable","id":"growable","kind":"param"}],"line":"215","kind":"method"},{"returnType":{"refId":"dart.core/Set","arguments":[{"refId":"dart.collection/ListMixin/E","name":"E"}],"name":"Set"},"name":"toSet","id":"toSet0()","line":"228","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"add","id":"add1()","children":[{"ref":{"refId":"dart.collection/ListMixin/E","name":"E"},"name":"element","id":"element","kind":"param"}],"line":"237","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"addAll","id":"addAll1()","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/ListMixin/E","name":"E"}],"name":"Iterable"},"name":"iterable","id":"iterable","kind":"param"}],"line":"241","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"remove","id":"remove1()","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"name":"element","id":"element","kind":"param"}],"line":"247","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"removeWhere","id":"removeWhere1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/ListMixin/E","name":"E"},"uri":"sdk/lib/collection/list.dart","name":"element","id":"element","line":"258","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"258","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"retainWhere","id":"retainWhere1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/ListMixin/E","name":"E"},"uri":"sdk/lib/collection/list.dart","name":"element","id":"element","line":"262","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"262","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"clear","id":"clear0()","line":"286","kind":"method"},{"returnType":{"refId":"dart.collection/ListMixin/E","name":"E"},"name":"removeLast","id":"removeLast0()","line":"290","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"sort","id":"sort1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"compare","id":"compare","children":[{"returnType":{"refId":"dart.core/int","name":"int"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/ListMixin/E","name":"E"},"uri":"sdk/lib/collection/list.dart","name":"a","id":"a","line":"299","kind":"param"},{"ref":{"refId":"dart.collection/ListMixin/E","name":"E"},"uri":"sdk/lib/collection/list.dart","name":"b","id":"b","line":"299","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"299","kind":"method"},{"returnType":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/int","name":"int"},{"refId":"dart.collection/ListMixin/E","name":"E"}],"name":"Map"},"name":"asMap","id":"asMap0()","line":"307","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_rangeCheck","isPrivate":true,"id":"_rangeCheck2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"start","id":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"end","id":"end","kind":"param"}],"line":"311","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.collection/ListMixin/E","name":"E"}],"name":"List"},"name":"sublist","id":"sublist2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"start","id":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"name":"end","id":"end","kind":"param"}],"line":"320","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/ListMixin/E","name":"E"}],"name":"Iterable"},"name":"getRange","id":"getRange2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"start","id":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"end","id":"end","kind":"param"}],"line":"331","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"removeRange","id":"removeRange2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"start","id":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"end","id":"end","kind":"param"}],"line":"336","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"fillRange","id":"fillRange3()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"start","id":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"end","id":"end","kind":"param"},{"ref":{"refId":"dart.collection/ListMixin/E","name":"E"},"isOptional":true,"name":"fill","id":"fill","kind":"param"}],"line":"343","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"setRange","id":"setRange4()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"start","id":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"end","id":"end","kind":"param"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/ListMixin/E","name":"E"}],"name":"Iterable"},"name":"iterable","id":"iterable","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"0","name":"skipCount","id":"skipCount","kind":"param"}],"line":"350","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"replaceRange","id":"replaceRange3()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"start","id":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"end","id":"end","kind":"param"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/ListMixin/E","name":"E"}],"name":"Iterable"},"name":"newContents","id":"newContents","kind":"param"}],"line":"382","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"name":"indexOf","id":"indexOf2()","children":[{"ref":{"refId":"dart.collection/ListMixin/E","name":"E"},"name":"element","id":"element","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"0","name":"startIndex","id":"startIndex","kind":"param"}],"line":"388","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"comment":"\nReturns the last index in the list [a] of the given [element], starting\nthe search at index [startIndex] to 0.\nReturns -1 if [element] is not found.\n","name":"lastIndexOf","id":"lastIndexOf2()","children":[{"ref":{"refId":"dart.collection/ListMixin/E","name":"E"},"name":"element","id":"element","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"name":"startIndex","id":"startIndex","kind":"param"}],"line":"408","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"insert","id":"insert2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"index","id":"index","kind":"param"},{"ref":{"refId":"dart.collection/ListMixin/E","name":"E"},"name":"element","id":"element","kind":"param"}],"line":"427","kind":"method"},{"returnType":{"refId":"dart.collection/ListMixin/E","name":"E"},"name":"removeAt","id":"removeAt1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"index","id":"index","kind":"param"}],"line":"444","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"insertAll","id":"insertAll2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"index","id":"index","kind":"param"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/ListMixin/E","name":"E"}],"name":"Iterable"},"name":"iterable","id":"iterable","kind":"param"}],"line":"451","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"setAll","id":"setAll2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"index","id":"index","kind":"param"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/ListMixin/E","name":"E"}],"name":"Iterable"},"name":"iterable","id":"iterable","kind":"param"}],"line":"468","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"name":"toString","id":"toString0()","line":"480","kind":"method"},{"ref":{"refId":"dart.core/Iterator","arguments":[{"refId":"dart.collection/ListMixin/E","name":"E"}],"name":"Iterator"},"name":"iterator","id":"iterator","line":"32","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isEmpty","id":"isEmpty","line":"46","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isNotEmpty","id":"isNotEmpty","line":"48","kind":"property"},{"ref":{"refId":"dart.collection/ListMixin/E","name":"E"},"name":"first","id":"first","line":"50","kind":"property"},{"ref":{"refId":"dart.collection/ListMixin/E","name":"E"},"name":"last","id":"last","line":"55","kind":"property"},{"ref":{"refId":"dart.collection/ListMixin/E","name":"E"},"name":"single","id":"single","line":"60","kind":"property"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/ListMixin/E","name":"E"}],"name":"Iterable"},"name":"reversed","id":"reversed","line":"478","kind":"property"},{"name":"E","id":"E","kind":"typeparam"}],"line":"13","kind":"class"},{"interfaces":[{"refId":"dart.core/Map","arguments":[{"refId":"dart.collection/HashMap/K","name":"K"},{"refId":"dart.collection/HashMap/V","name":"V"}],"name":"Map"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nA hash-table based implementation of [Map].\n\nThe keys of a `HashMap` must have consistent [Object.operator==]\nand [Object.hashCode] implementations. This means that the `==` operator\nmust define a stable equivalence relation on the keys (reflexive,\nanti-symmetric, transitive, and consistent over time), and that `hashCode`\nmust be the same for objects that are considered equal by `==`.\n\nThe map allows `null` as a key.\n","uri":"sdk/lib/collection/hash_map.dart","name":"HashMap","id":"HashMap","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"containsKey","id":"containsKey1()","children":[{"ref":{"refId":"dart.collection/HashMap/K","name":"K"},"name":"key","id":"key","kind":"param"}],"line":"32","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"containsValue","id":"containsValue1()","children":[{"ref":{"refId":"dart.collection/HashMap/V","name":"V"},"name":"value","id":"value","kind":"param"}],"line":"33","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"addAll","id":"addAll1()","children":[{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.collection/HashMap/K","name":"K"},{"refId":"dart.collection/HashMap/V","name":"V"}],"name":"Map"},"name":"other","id":"other","kind":"param"}],"line":"35","kind":"method"},{"returnType":{"refId":"dart.collection/HashMap/V","name":"V"},"isOperator":true,"name":"[]","id":"[]1()","children":[{"ref":{"refId":"dart.collection/HashMap/K","name":"K"},"name":"key","id":"key","kind":"param"}],"line":"37","kind":"method"},{"returnType":{"refId":"void","name":"void"},"isOperator":true,"name":"[]=","id":"[]=2()","children":[{"ref":{"refId":"dart.collection/HashMap/K","name":"K"},"name":"key","id":"key","kind":"param"},{"ref":{"refId":"dart.collection/HashMap/V","name":"V"},"name":"value","id":"value","kind":"param"}],"line":"38","kind":"method"},{"returnType":{"refId":"dart.collection/HashMap/V","name":"V"},"name":"putIfAbsent","id":"putIfAbsent2()","children":[{"ref":{"refId":"dart.collection/HashMap/K","name":"K"},"name":"key","id":"key","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"ifAbsent","id":"ifAbsent","children":[{"returnType":{"refId":"dart.collection/HashMap/V","name":"V"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"40","kind":"method"},{"returnType":{"refId":"dart.collection/HashMap/V","name":"V"},"name":"remove","id":"remove1()","children":[{"ref":{"refId":"dart.collection/HashMap/K","name":"K"},"name":"key","id":"key","kind":"param"}],"line":"42","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"clear","id":"clear0()","line":"43","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"forEach","id":"forEach1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"action","id":"action","children":[{"returnType":{"refId":"void","name":"void"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/HashMap/K","name":"K"},"uri":"sdk/lib/collection/hash_map.dart","name":"key","id":"key","line":"45","kind":"param"},{"ref":{"refId":"dart.collection/HashMap/V","name":"V"},"uri":"sdk/lib/collection/hash_map.dart","name":"value","id":"value","line":"45","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"45","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"name":"toString","id":"toString0()","line":"47","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"length","id":"length","line":"25","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isEmpty","id":"isEmpty","line":"26","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isNotEmpty","id":"isNotEmpty","line":"27","kind":"property"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/HashMap/K","name":"K"}],"name":"Iterable"},"name":"keys","id":"keys","line":"29","kind":"property"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/HashMap/V","name":"V"}],"name":"Iterable"},"name":"values","id":"values","line":"30","kind":"property"},{"name":"HashMap","id":"HashMap0()","line":"19","kind":"constructor"},{"returnType":{"refId":"dart.collection/HashMap","arguments":[{"refId":"dart.collection/HashMap/K","name":"K"},{"refId":"dart.collection/HashMap/V","name":"V"}],"name":"HashMap"},"name":"HashMap.from","id":"HashMap.from1()","children":[{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.collection/HashMap/K","name":"K"},{"refId":"dart.collection/HashMap/V","name":"V"}],"name":"Map"},"name":"other","id":"other","kind":"param"}],"line":"21","kind":"constructor"},{"name":"K","id":"K","kind":"typeparam"},{"name":"V","id":"V","kind":"typeparam"}],"line":"18","kind":"class"},{"superclass":{"refId":"dart.collection/_HashSetBase","arguments":[{"refId":"dart.collection/HashSet/E","name":"E"}],"name":"_HashSetBase"},"comment":"\nA [HashSet] is a hash-table based [Set] implementation.\n\nThe elements of a `HashSet` must have consistent [Object.operator==]\nand [Object.hashCode] implementations. This means that the `==` operator\nmust define a stable equivalence relation on the elements (reflexive,\nanti-symmetric, transitive, and consistent over time), and that `hashCode`\nmust be the same for objects that are considered equal by `==`.\n\nThe set allows `null` as an element.\n\nMost simple operations on `HashSet` are done in constant time: [add],\n[contains], [remove], and [length].\n","uri":"sdk/lib/collection/hash_set.dart","name":"HashSet","id":"HashSet","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"contains","id":"contains1()","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"name":"object","id":"object","kind":"param"}],"line":"89","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"add","id":"add1()","children":[{"ref":{"refId":"dart.collection/HashSet/E","name":"E"},"name":"element","id":"element","kind":"param"}],"line":"92","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"addAll","id":"addAll1()","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/HashSet/E","name":"E"}],"name":"Iterable"},"name":"objects","id":"objects","kind":"param"}],"line":"94","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"remove","id":"remove1()","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"name":"object","id":"object","kind":"param"}],"line":"96","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"removeAll","id":"removeAll1()","children":[{"ref":{"refId":"dart.core/Iterable","name":"Iterable"},"name":"objectsToRemove","id":"objectsToRemove","kind":"param"}],"line":"98","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"removeWhere","id":"removeWhere1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/HashSet/E","name":"E"},"uri":"sdk/lib/collection/hash_set.dart","name":"element","id":"element","line":"100","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"100","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"retainWhere","id":"retainWhere1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/HashSet/E","name":"E"},"uri":"sdk/lib/collection/hash_set.dart","name":"element","id":"element","line":"102","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"102","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"clear","id":"clear0()","line":"104","kind":"method"},{"returnType":{"refId":"dart.core/Set","arguments":[{"refId":"dart.collection/HashSet/E","name":"E"}],"name":"Set"},"name":"_newSet","isPrivate":true,"id":"_newSet0()","line":"106","kind":"method"},{"ref":{"refId":"dart.core/Iterator","arguments":[{"refId":"dart.collection/HashSet/E","name":"E"}],"name":"Iterator"},"name":"iterator","id":"iterator","line":"81","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"length","id":"length","line":"83","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isEmpty","id":"isEmpty","line":"85","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isNotEmpty","id":"isNotEmpty","line":"87","kind":"property"},{"name":"HashSet","id":"HashSet0()","line":"74","kind":"constructor"},{"returnType":{"refId":"dart.collection/HashSet","arguments":[{"refId":"dart.collection/HashSet/E","name":"E"}],"name":"HashSet"},"name":"HashSet.from","id":"HashSet.from1()","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/HashSet/E","name":"E"}],"name":"Iterable"},"name":"iterable","id":"iterable","kind":"param"}],"line":"76","kind":"constructor"},{"name":"E","id":"E","kind":"typeparam"}],"line":"73","kind":"class"},{"isAbstract":true,"interfaces":[{"refId":"dart.core/Set","arguments":[{"refId":"dart.collection/_HashSetBase/E","name":"E"}],"name":"Set"}],"superclass":{"refId":"dart.collection/IterableBase","arguments":[{"refId":"dart.collection/_HashSetBase/E","name":"E"}],"name":"IterableBase"},"comment":"Common parts of [HashSet] and [LinkedHashSet] implementations. ","uri":"sdk/lib/collection/hash_set.dart","name":"_HashSetBase","isPrivate":true,"id":"_HashSetBase","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"containsAll","id":"containsAll1()","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/_HashSetBase/E","name":"E"}],"name":"Iterable"},"name":"other","id":"other","kind":"param"}],"line":"10","kind":"method"},{"returnType":{"refId":"dart.core/Set","name":"Set"},"comment":"Create a new Set of the same type as this. ","name":"_newSet","isPrivate":true,"id":"_newSet0()","line":"18","kind":"method"},{"returnType":{"refId":"dart.core/Set","arguments":[{"refId":"dart.collection/_HashSetBase/E","name":"E"}],"name":"Set"},"name":"intersection","id":"intersection1()","children":[{"ref":{"refId":"dart.core/Set","arguments":[{"refId":"dart.collection/_HashSetBase/E","name":"E"}],"name":"Set"},"name":"other","id":"other","kind":"param"}],"line":"20","kind":"method"},{"returnType":{"refId":"dart.core/Set","arguments":[{"refId":"dart.collection/_HashSetBase/E","name":"E"}],"name":"Set"},"name":"union","id":"union1()","children":[{"ref":{"refId":"dart.core/Set","arguments":[{"refId":"dart.collection/_HashSetBase/E","name":"E"}],"name":"Set"},"name":"other","id":"other","kind":"param"}],"line":"34","kind":"method"},{"returnType":{"refId":"dart.core/Set","arguments":[{"refId":"dart.collection/_HashSetBase/E","name":"E"}],"name":"Set"},"name":"difference","id":"difference1()","children":[{"ref":{"refId":"dart.core/Set","arguments":[{"refId":"dart.collection/_HashSetBase/E","name":"E"}],"name":"Set"},"name":"other","id":"other","kind":"param"}],"line":"38","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"retainAll","id":"retainAll1()","children":[{"ref":{"refId":"dart.core/Iterable","name":"Iterable"},"name":"objectsToRetain","id":"objectsToRetain","kind":"param"}],"line":"46","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"name":"toString","id":"toString0()","line":"56","kind":"method"},{"name":"E","id":"E","kind":"typeparam"}],"line":"8","kind":"class"},{"isAbstract":true,"interfaces":[{"refId":"dart.collection/_LinkedListLink","name":"_LinkedListLink"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nEntry element for a [LinkedList]. Any entry must extend this class.\n","uri":"sdk/lib/collection/linked_list.dart","name":"LinkedListEntry","id":"LinkedListEntry","children":[{"returnType":{"refId":"void","name":"void"},"comment":"\nUnlink the element from the list.\n","name":"unlink","id":"unlink0()","line":"199","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\ninsert an element after this.\n","name":"insertAfter","id":"insertAfter1()","children":[{"ref":{"refId":"dart.collection/LinkedListEntry/E","name":"E"},"name":"entry","id":"entry","kind":"param"}],"line":"222","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nInsert an element before this.\n","name":"insertBefore","id":"insertBefore1()","children":[{"ref":{"refId":"dart.collection/LinkedListEntry/E","name":"E"},"name":"entry","id":"entry","kind":"param"}],"line":"229","kind":"method"},{"ref":{"refId":"dart.collection/LinkedList","arguments":[{"refId":"dart.collection/LinkedListEntry/E","name":"E"}],"name":"LinkedList"},"comment":"\nGet the list containing this element.\n","name":"list","id":"list","line":"194","kind":"property"},{"ref":{"refId":"dart.collection/LinkedListEntry/E","name":"E"},"comment":"\nReturn the succeeding element in the list.\n","name":"next","id":"next","line":"206","kind":"property"},{"ref":{"refId":"dart.collection/LinkedListEntry/E","name":"E"},"comment":"\nReturn the preceeding element in the list.\n","name":"previous","id":"previous","line":"214","kind":"property"},{"ref":{"refId":"dart.collection/LinkedList","arguments":[{"refId":"dart.collection/LinkedListEntry/E","name":"E"}],"name":"LinkedList"},"name":"_list","isPrivate":true,"id":"_list","line":"187","kind":"variable"},{"ref":{"refId":"dart.collection/_LinkedListLink","name":"_LinkedListLink"},"name":"_next","isPrivate":true,"id":"_next","line":"188","kind":"variable"},{"ref":{"refId":"dart.collection/_LinkedListLink","name":"_LinkedListLink"},"name":"_previous","isPrivate":true,"id":"_previous","line":"189","kind":"variable"},{"name":"E","id":"E","kind":"typeparam"}],"line":"186","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"uri":"sdk/lib/collection/linked_list.dart","name":"_LinkedListLink","isPrivate":true,"id":"_LinkedListLink","children":[{"ref":{"refId":"dart.collection/_LinkedListLink","name":"_LinkedListLink"},"name":"_next","isPrivate":true,"id":"_next","line":"178","kind":"variable"},{"ref":{"refId":"dart.collection/_LinkedListLink","name":"_LinkedListLink"},"name":"_previous","isPrivate":true,"id":"_previous","line":"179","kind":"variable"}],"line":"177","kind":"class"},{"interfaces":[{"refId":"dart.core/Iterator","arguments":[{"refId":"dart.collection/_LinkedListIterator/E","name":"E"}],"name":"Iterator"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"uri":"sdk/lib/collection/linked_list.dart","name":"_LinkedListIterator","isPrivate":true,"id":"_LinkedListIterator","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"moveNext","id":"moveNext0()","line":"162","kind":"method"},{"ref":{"refId":"dart.collection/_LinkedListIterator/E","name":"E"},"name":"current","id":"current","line":"160","kind":"property"},{"ref":{"refId":"dart.collection/LinkedList","arguments":[{"refId":"dart.collection/_LinkedListIterator/E","name":"E"}],"name":"LinkedList"},"isFinal":true,"name":"_list","isPrivate":true,"id":"_list","line":"150","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"name":"_modificationCount","isPrivate":true,"id":"_modificationCount","line":"151","kind":"variable"},{"ref":{"refId":"dart.collection/_LinkedListIterator/E","name":"E"},"name":"_current","isPrivate":true,"id":"_current","line":"152","kind":"variable"},{"ref":{"refId":"dart.collection/_LinkedListLink","name":"_LinkedListLink"},"name":"_next","isPrivate":true,"id":"_next","line":"153","kind":"variable"},{"name":"_LinkedListIterator","id":"_LinkedListIterator1()","children":[{"ref":{"refId":"dart.collection/LinkedList","arguments":[{"refId":"dart.collection/_LinkedListIterator/E","name":"E"}],"name":"LinkedList"},"name":"list","id":"list","kind":"param"}],"line":"155","kind":"constructor"},{"upperBound":{"refId":"dart.collection/LinkedListEntry","name":"LinkedListEntry"},"name":"E","id":"E","kind":"typeparam"}],"line":"148","kind":"class"},{"interfaces":[{"refId":"dart.collection/_LinkedListLink","name":"_LinkedListLink"}],"superclass":{"refId":"dart.collection/IterableBase","arguments":[{"refId":"dart.collection/LinkedList/E","name":"E"}],"name":"IterableBase"},"comment":"\nA linked list implementation, providing O(1) removal(unlink) of elements and\nmanual traversal through [next] and [previous].\n\nThe list elements must extend [LinkedListEntry].\n","uri":"sdk/lib/collection/linked_list.dart","name":"LinkedList","id":"LinkedList","children":[{"returnType":{"refId":"void","name":"void"},"comment":"\nAdd [entry] to the beginning of the list.\n","name":"addFirst","id":"addFirst1()","children":[{"ref":{"refId":"dart.collection/LinkedList/E","name":"E"},"name":"entry","id":"entry","kind":"param"}],"line":"32","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nAdd [entry] to the end of the list.\n","name":"add","id":"add1()","children":[{"ref":{"refId":"dart.collection/LinkedList/E","name":"E"},"name":"entry","id":"entry","kind":"param"}],"line":"39","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nAdd [entries] to the end of the list.\n","name":"addAll","id":"addAll1()","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/LinkedList/E","name":"E"}],"name":"Iterable"},"name":"entries","id":"entries","kind":"param"}],"line":"46","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"\nRemove [entry] from the list. This is the same as calling `entry.unlink()`.\n\nIf [entry] is not in the list, `false` is returned.\n","name":"remove","id":"remove1()","children":[{"ref":{"refId":"dart.collection/LinkedList/E","name":"E"},"name":"entry","id":"entry","kind":"param"}],"line":"55","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"name":"toString","id":"toString0()","line":"63","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"clear","id":"clear0()","line":"67","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nCall [action] with each entry in the list.\n\nIt's an error if [action] modify the list.\n","name":"forEach","id":"forEach1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"action","id":"action","children":[{"returnType":{"refId":"void","name":"void"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/LinkedList/E","name":"E"},"uri":"sdk/lib/collection/linked_list.dart","name":"entry","id":"entry","line":"108","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"108","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_insertAfter","isPrivate":true,"id":"_insertAfter2()","children":[{"ref":{"refId":"dart.collection/_LinkedListLink","name":"_LinkedListLink"},"name":"entry","id":"entry","kind":"param"},{"ref":{"refId":"dart.collection/LinkedList/E","name":"E"},"name":"newEntry","id":"newEntry","kind":"param"}],"line":"122","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_unlink","isPrivate":true,"id":"_unlink1()","children":[{"ref":{"refId":"dart.collection/LinkedListEntry","arguments":[{"refId":"dart.collection/LinkedList/E","name":"E"}],"name":"LinkedListEntry"},"name":"entry","id":"entry","kind":"param"}],"line":"138","kind":"method"},{"ref":{"refId":"dart.core/Iterator","arguments":[{"refId":"dart.collection/LinkedList/E","name":"E"}],"name":"Iterator"},"name":"iterator","id":"iterator","line":"61","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"length","id":"length","line":"65","kind":"property"},{"ref":{"refId":"dart.collection/LinkedList/E","name":"E"},"name":"first","id":"first","line":"79","kind":"property"},{"ref":{"refId":"dart.collection/LinkedList/E","name":"E"},"name":"last","id":"last","line":"86","kind":"property"},{"ref":{"refId":"dart.collection/LinkedList/E","name":"E"},"name":"single","id":"single","line":"93","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isEmpty","id":"isEmpty","line":"120","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"_modificationCount","isPrivate":true,"id":"_modificationCount","line":"17","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"_length","isPrivate":true,"id":"_length","line":"18","kind":"variable"},{"ref":{"refId":"dart.collection/_LinkedListLink","name":"_LinkedListLink"},"name":"_next","isPrivate":true,"id":"_next","line":"19","kind":"variable"},{"ref":{"refId":"dart.collection/_LinkedListLink","name":"_LinkedListLink"},"name":"_previous","isPrivate":true,"id":"_previous","line":"20","kind":"variable"},{"comment":"\nConstruct a new empty linked list.\n","name":"LinkedList","id":"LinkedList0()","line":"25","kind":"constructor"},{"upperBound":{"refId":"dart.collection/LinkedListEntry","arguments":[{"refId":"dart.collection/LinkedList/E","name":"E"}],"name":"LinkedListEntry"},"name":"E","id":"E","kind":"typeparam"}],"line":"14","kind":"class"},{"superclass":{"refId":"dart.collection/_SplayTreeIterator","arguments":[{"refId":"dart.collection/_SplayTreeNode","arguments":[{"refId":"dart.collection/_SplayTreeNodeIterator/K","name":"K"}],"name":"_SplayTreeNode"}],"name":"_SplayTreeIterator"},"uri":"sdk/lib/collection/splay_tree.dart","name":"_SplayTreeNodeIterator","isPrivate":true,"id":"_SplayTreeNodeIterator","children":[{"returnType":{"refId":"dart.collection/_SplayTreeNode","arguments":[{"refId":"dart.collection/_SplayTreeNodeIterator/K","name":"K"}],"name":"_SplayTreeNode"},"name":"_getValue","isPrivate":true,"id":"_getValue1()","children":[{"ref":{"refId":"dart.collection/_SplayTreeNode","name":"_SplayTreeNode"},"name":"node","id":"node","kind":"param"}],"line":"544","kind":"method"},{"name":"_SplayTreeNodeIterator","id":"_SplayTreeNodeIterator1()","children":[{"ref":{"refId":"dart.collection/_SplayTree","arguments":[{"refId":"dart.collection/_SplayTreeNodeIterator/K","name":"K"}],"name":"_SplayTree"},"name":"map","id":"map","kind":"param"}],"line":"543","kind":"constructor"},{"name":"K","id":"K","kind":"typeparam"}],"line":"541","kind":"class"},{"superclass":{"refId":"dart.collection/_SplayTreeIterator","arguments":[{"refId":"dart.collection/_SplayTreeValueIterator/V","name":"V"}],"name":"_SplayTreeIterator"},"uri":"sdk/lib/collection/splay_tree.dart","name":"_SplayTreeValueIterator","isPrivate":true,"id":"_SplayTreeValueIterator","children":[{"returnType":{"refId":"dart.collection/_SplayTreeValueIterator/V","name":"V"},"name":"_getValue","isPrivate":true,"id":"_getValue1()","children":[{"ref":{"refId":"dart.collection/_SplayTreeMapNode","name":"_SplayTreeMapNode"},"name":"node","id":"node","kind":"param"}],"line":"538","kind":"method"},{"name":"_SplayTreeValueIterator","id":"_SplayTreeValueIterator1()","children":[{"ref":{"refId":"dart.collection/SplayTreeMap","arguments":[{"refId":"dart.collection/_SplayTreeValueIterator/K","name":"K"},{"refId":"dart.collection/_SplayTreeValueIterator/V","name":"V"}],"name":"SplayTreeMap"},"name":"map","id":"map","kind":"param"}],"line":"537","kind":"constructor"},{"name":"K","id":"K","kind":"typeparam"},{"name":"V","id":"V","kind":"typeparam"}],"line":"536","kind":"class"},{"superclass":{"refId":"dart.collection/_SplayTreeIterator","arguments":[{"refId":"dart.collection/_SplayTreeKeyIterator/K","name":"K"}],"name":"_SplayTreeIterator"},"uri":"sdk/lib/collection/splay_tree.dart","name":"_SplayTreeKeyIterator","isPrivate":true,"id":"_SplayTreeKeyIterator","children":[{"returnType":{"refId":"dart.collection/_SplayTreeKeyIterator/K","name":"K"},"name":"_getValue","isPrivate":true,"id":"_getValue1()","children":[{"ref":{"refId":"dart.collection/_SplayTreeNode","name":"_SplayTreeNode"},"name":"node","id":"node","kind":"param"}],"line":"533","kind":"method"},{"name":"_SplayTreeKeyIterator","id":"_SplayTreeKeyIterator1()","children":[{"ref":{"refId":"dart.collection/_SplayTree","arguments":[{"refId":"dart.collection/_SplayTreeKeyIterator/K","name":"K"}],"name":"_SplayTree"},"name":"map","id":"map","kind":"param"}],"line":"532","kind":"constructor"},{"name":"K","id":"K","kind":"typeparam"}],"line":"531","kind":"class"},{"superclass":{"refId":"dart.collection/IterableBase","arguments":[{"refId":"dart.collection/_SplayTreeValueIterable/V","name":"V"}],"name":"IterableBase"},"uri":"sdk/lib/collection/splay_tree.dart","name":"_SplayTreeValueIterable","isPrivate":true,"id":"_SplayTreeValueIterable","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"length","id":"length","line":"526","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isEmpty","id":"isEmpty","line":"527","kind":"property"},{"ref":{"refId":"dart.core/Iterator","arguments":[{"refId":"dart.collection/_SplayTreeValueIterable/V","name":"V"}],"name":"Iterator"},"name":"iterator","id":"iterator","line":"528","kind":"property"},{"ref":{"refId":"dart.collection/SplayTreeMap","arguments":[{"refId":"dart.collection/_SplayTreeValueIterable/K","name":"K"},{"refId":"dart.collection/_SplayTreeValueIterable/V","name":"V"}],"name":"SplayTreeMap"},"name":"_map","isPrivate":true,"id":"_map","line":"524","kind":"variable"},{"name":"_SplayTreeValueIterable","id":"_SplayTreeValueIterable1()","children":[{"initializedField":{"refId":"dart.collection/_SplayTreeValueIterable/_map","name":"_map"},"ref":{"refId":"dart.collection/SplayTreeMap","arguments":[{"refId":"dart.collection/_SplayTreeValueIterable/K","name":"K"},{"refId":"dart.collection/_SplayTreeValueIterable/V","name":"V"}],"name":"SplayTreeMap"},"name":"_map","isPrivate":true,"id":"_map","kind":"param"}],"line":"525","kind":"constructor"},{"name":"K","id":"K","kind":"typeparam"},{"name":"V","id":"V","kind":"typeparam"}],"line":"523","kind":"class"},{"superclass":{"refId":"dart.collection/IterableBase","arguments":[{"refId":"dart.collection/_SplayTreeKeyIterable/K","name":"K"}],"name":"IterableBase"},"uri":"sdk/lib/collection/splay_tree.dart","name":"_SplayTreeKeyIterable","isPrivate":true,"id":"_SplayTreeKeyIterable","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"length","id":"length","line":"518","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isEmpty","id":"isEmpty","line":"519","kind":"property"},{"ref":{"refId":"dart.core/Iterator","arguments":[{"refId":"dart.collection/_SplayTreeKeyIterable/K","name":"K"}],"name":"Iterator"},"name":"iterator","id":"iterator","line":"520","kind":"property"},{"ref":{"refId":"dart.collection/_SplayTree","arguments":[{"refId":"dart.collection/_SplayTreeKeyIterable/K","name":"K"}],"name":"_SplayTree"},"name":"_tree","isPrivate":true,"id":"_tree","line":"516","kind":"variable"},{"name":"_SplayTreeKeyIterable","id":"_SplayTreeKeyIterable1()","children":[{"initializedField":{"refId":"dart.collection/_SplayTreeKeyIterable/_tree","name":"_tree"},"ref":{"refId":"dart.collection/_SplayTree","arguments":[{"refId":"dart.collection/_SplayTreeKeyIterable/K","name":"K"}],"name":"_SplayTree"},"name":"_tree","isPrivate":true,"id":"_tree","kind":"param"}],"line":"517","kind":"constructor"},{"name":"K","id":"K","kind":"typeparam"}],"line":"515","kind":"class"},{"isAbstract":true,"interfaces":[{"refId":"dart.core/Iterator","arguments":[{"refId":"dart.collection/_SplayTreeIterator/T","name":"T"}],"name":"Iterator"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"uri":"sdk/lib/collection/splay_tree.dart","name":"_SplayTreeIterator","isPrivate":true,"id":"_SplayTreeIterator","children":[{"returnType":{"refId":"void","name":"void"},"name":"_findLeftMostDescendent","isPrivate":true,"id":"_findLeftMostDescendent1()","children":[{"ref":{"refId":"dart.collection/_SplayTreeNode","name":"_SplayTreeNode"},"name":"node","id":"node","kind":"param"}],"line":"464","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nCalled when the tree structure of the tree has changed.\n\nThis can be caused by a splay operation.\nIf the key-set changes, iteration is aborted before getting\nhere, so we know that the keys are the same as before, it's\nonly the tree that has been reordered.\n","name":"_rebuildWorkList","isPrivate":true,"id":"_rebuildWorkList1()","children":[{"ref":{"refId":"dart.collection/_SplayTreeNode","name":"_SplayTreeNode"},"name":"currentNode","id":"currentNode","kind":"param"}],"line":"479","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"moveNext","id":"moveNext0()","line":"491","kind":"method"},{"returnType":{"refId":"dart.collection/_SplayTreeIterator/T","name":"T"},"name":"_getValue","isPrivate":true,"id":"_getValue1()","children":[{"ref":{"refId":"dart.collection/_SplayTreeNode","name":"_SplayTreeNode"},"name":"node","id":"node","kind":"param"}],"line":"512","kind":"method"},{"ref":{"refId":"dart.collection/_SplayTreeIterator/T","name":"T"},"name":"current","id":"current","line":"459","kind":"property"},{"ref":{"refId":"dart.collection/_SplayTree","name":"_SplayTree"},"isFinal":true,"name":"_tree","isPrivate":true,"id":"_tree","line":"421","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.collection/_SplayTreeNode","name":"_SplayTreeNode"}],"name":"List"},"isFinal":true,"comment":"\nWorklist of nodes to visit.\n\nThese nodes have been passed over on the way down in a\ndepth-first left-to-right traversal. Visiting each node,\nand their right subtrees will visit the remainder of\nthe nodes of a full traversal.\n\nOnly valid as long as the original tree isn't reordered.\n","name":"_workList","isPrivate":true,"id":"_workList","line":"432","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"comment":"\nOriginal modification counter of [_tree].\n\nIncremented on [_tree] when a key is added or removed.\nIf it changes, iteration is aborted.\n","name":"_modificationCount","isPrivate":true,"id":"_modificationCount","line":"440","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nCount of splay operations on [_tree] when [_workList] was built.\n\nIf the splay count on [_tree] increases, [_workList] becomes invalid.\n","name":"_splayCount","isPrivate":true,"id":"_splayCount","line":"447","kind":"variable"},{"ref":{"refId":"dart.collection/_SplayTreeNode","name":"_SplayTreeNode"},"comment":"Current node. ","name":"_currentNode","isPrivate":true,"id":"_currentNode","line":"450","kind":"variable"},{"name":"_SplayTreeIterator","id":"_SplayTreeIterator1()","children":[{"ref":{"refId":"dart.collection/_SplayTree","name":"_SplayTree"},"name":"tree","id":"tree","kind":"param"}],"line":"452","kind":"constructor"},{"name":"T","id":"T","kind":"typeparam"}],"line":"420","kind":"class"},{"interfaces":[{"refId":"dart.core/Map","arguments":[{"refId":"dart.collection/SplayTreeMap/K","name":"K"},{"refId":"dart.collection/SplayTreeMap/V","name":"V"}],"name":"Map"}],"superclass":{"refId":"dart.collection/_SplayTree","arguments":[{"refId":"dart.collection/SplayTreeMap/K","name":"K"}],"name":"_SplayTree"},"uri":"sdk/lib/collection/splay_tree.dart","name":"SplayTreeMap","id":"SplayTreeMap","children":[{"returnType":{"refId":"dart.core/int","name":"int"},"name":"_compare","isPrivate":true,"id":"_compare2()","children":[{"ref":{"refId":"dart.collection/SplayTreeMap/K","name":"K"},"name":"key1","id":"key1","kind":"param"},{"ref":{"refId":"dart.collection/SplayTreeMap/K","name":"K"},"name":"key2","id":"key2","kind":"param"}],"line":"254","kind":"method"},{"returnType":{"refId":"dart.collection/SplayTreeMap/V","name":"V"},"isOperator":true,"name":"[]","id":"[]1()","children":[{"ref":{"refId":"dart.collection/SplayTreeMap/K","name":"K"},"name":"key","id":"key","kind":"param"}],"line":"258","kind":"method"},{"returnType":{"refId":"dart.collection/SplayTreeMap/V","name":"V"},"name":"remove","id":"remove1()","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"name":"key","id":"key","kind":"param"}],"line":"270","kind":"method"},{"returnType":{"refId":"void","name":"void"},"isOperator":true,"name":"[]=","id":"[]=2()","children":[{"ref":{"refId":"dart.collection/SplayTreeMap/K","name":"K"},"name":"key","id":"key","kind":"param"},{"ref":{"refId":"dart.collection/SplayTreeMap/V","name":"V"},"name":"value","id":"value","kind":"param"}],"line":"277","kind":"method"},{"returnType":{"refId":"dart.collection/SplayTreeMap/V","name":"V"},"name":"putIfAbsent","id":"putIfAbsent2()","children":[{"ref":{"refId":"dart.collection/SplayTreeMap/K","name":"K"},"name":"key","id":"key","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"ifAbsent","id":"ifAbsent","children":[{"returnType":{"refId":"dart.collection/SplayTreeMap/V","name":"V"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"291","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"addAll","id":"addAll1()","children":[{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.collection/SplayTreeMap/K","name":"K"},{"refId":"dart.collection/SplayTreeMap/V","name":"V"}],"name":"Map"},"name":"other","id":"other","kind":"param"}],"line":"313","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"forEach","id":"forEach1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"returnType":{"refId":"void","name":"void"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/SplayTreeMap/K","name":"K"},"uri":"sdk/lib/collection/splay_tree.dart","name":"key","id":"key","line":"323","kind":"param"},{"ref":{"refId":"dart.collection/SplayTreeMap/V","name":"V"},"uri":"sdk/lib/collection/splay_tree.dart","name":"value","id":"value","line":"323","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"323","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"clear","id":"clear0()","line":"336","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"containsKey","id":"containsKey1()","children":[{"ref":{"refId":"dart.collection/SplayTreeMap/K","name":"K"},"name":"key","id":"key","kind":"param"}],"line":"340","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"containsValue","id":"containsValue1()","children":[{"ref":{"refId":"dart.collection/SplayTreeMap/V","name":"V"},"name":"value","id":"value","kind":"param"}],"line":"344","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"name":"toString","id":"toString0()","line":"365","kind":"method"},{"returnType":{"refId":"dart.collection/SplayTreeMap/K","name":"K"},"comment":"\nGet the first key in the map. Returns [null] if the map is empty.\n","name":"firstKey","id":"firstKey0()","line":"372","kind":"method"},{"returnType":{"refId":"dart.collection/SplayTreeMap/K","name":"K"},"comment":"\nGet the last key in the map. Returns [null] if the map is empty.\n","name":"lastKey","id":"lastKey0()","line":"380","kind":"method"},{"returnType":{"refId":"dart.collection/SplayTreeMap/K","name":"K"},"comment":"\nGet the last key in the map that is strictly smaller than [key]. Returns\n[null] if no key was not found.\n","name":"lastKeyBefore","id":"lastKeyBefore1()","children":[{"ref":{"refId":"dart.collection/SplayTreeMap/K","name":"K"},"name":"key","id":"key","kind":"param"}],"line":"389","kind":"method"},{"returnType":{"refId":"dart.collection/SplayTreeMap/K","name":"K"},"comment":"\nGet the first key in the map that is strictly larger than [key]. Returns\n[null] if no key was not found.\n","name":"firstKeyAfter","id":"firstKeyAfter1()","children":[{"ref":{"refId":"dart.collection/SplayTreeMap/K","name":"K"},"name":"key","id":"key","kind":"param"}],"line":"406","kind":"method"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isEmpty","id":"isEmpty","line":"317","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isNotEmpty","id":"isNotEmpty","line":"321","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"length","id":"length","line":"332","kind":"property"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/SplayTreeMap/K","name":"K"}],"name":"Iterable"},"name":"keys","id":"keys","line":"361","kind":"property"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/SplayTreeMap/V","name":"V"}],"name":"Iterable"},"name":"values","id":"values","line":"363","kind":"property"},{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"_comparator","isPrivate":true,"id":"_comparator","line":"246","kind":"variable"},{"name":"SplayTreeMap","id":"SplayTreeMap1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"compare","id":"compare","children":[{"returnType":{"refId":"dart.core/int","name":"int"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/SplayTreeMap/K","name":"K"},"uri":"sdk/lib/collection/splay_tree.dart","name":"key1","id":"key1","line":"248","kind":"param"},{"ref":{"refId":"dart.collection/SplayTreeMap/K","name":"K"},"uri":"sdk/lib/collection/splay_tree.dart","name":"key2","id":"key2","line":"248","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"248","kind":"constructor"},{"returnType":{"refId":"dart.collection/SplayTreeMap","arguments":[{"refId":"dart.collection/SplayTreeMap/K","name":"K"},{"refId":"dart.collection/SplayTreeMap/V","name":"V"}],"name":"SplayTreeMap"},"name":"SplayTreeMap.from","id":"SplayTreeMap.from2()","children":[{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.collection/SplayTreeMap/K","name":"K"},{"refId":"dart.collection/SplayTreeMap/V","name":"V"}],"name":"Map"},"name":"other","id":"other","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"compare","id":"compare","children":[{"returnType":{"refId":"dart.core/int","name":"int"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/SplayTreeMap/K","name":"K"},"uri":"sdk/lib/collection/splay_tree.dart","name":"key1","id":"key1","line":"251","kind":"param"},{"ref":{"refId":"dart.collection/SplayTreeMap/K","name":"K"},"uri":"sdk/lib/collection/splay_tree.dart","name":"key2","id":"key2","line":"251","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"251","kind":"constructor"},{"name":"SplayTreeMap._internal","isPrivate":true,"id":"SplayTreeMap._internal0()","line":"256","kind":"constructor"},{"name":"K","id":"K","kind":"typeparam"},{"name":"V","id":"V","kind":"typeparam"}],"line":"243","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nA splay tree is a self-balancing binary search tree.\n\nIt has the additional property that recently accessed elements\nare quick to access again.\nIt performs basic operations such as insertion, look-up and\nremoval, in O(log(n)) amortized time.\n","uri":"sdk/lib/collection/splay_tree.dart","name":"_SplayTree","isPrivate":true,"id":"_SplayTree","children":[{"returnType":{"refId":"dart.core/int","name":"int"},"comment":"Comparison used to compare keys. ","name":"_compare","isPrivate":true,"id":"_compare2()","children":[{"ref":{"refId":"dart.collection/_SplayTree/K","name":"K"},"name":"key1","id":"key1","kind":"param"},{"ref":{"refId":"dart.collection/_SplayTree/K","name":"K"},"name":"key2","id":"key2","kind":"param"}],"line":"65","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"comment":"\nPerform the splay operation for the given key. Moves the node with\nthe given key to the top of the tree.  If no node has the given\nkey, the last node on the search path is moved to the top of the\ntree. This is the simplified top-down splaying algorithm from:\n\"Self-adjusting Binary Search Trees\" by Sleator and Tarjan.\n\nReturns the result of comparing the new root of the tree to [key].\nReturns -1 if the table is empty.\n","name":"_splay","isPrivate":true,"id":"_splay1()","children":[{"ref":{"refId":"dart.collection/_SplayTree/K","name":"K"},"name":"key","id":"key","kind":"param"}],"line":"77","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_splayMin","isPrivate":true,"id":"_splayMin0()","line":"139","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_splayMax","isPrivate":true,"id":"_splayMax0()","line":"153","kind":"method"},{"returnType":{"refId":"dart.collection/_SplayTreeNode","name":"_SplayTreeNode"},"name":"_remove","isPrivate":true,"id":"_remove1()","children":[{"ref":{"refId":"dart.collection/_SplayTree/K","name":"K"},"name":"key","id":"key","kind":"param"}],"line":"165","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nAdds a new root node with the given [key] or [value].\n\nThe [comp] value is the result of comparing the existing root's key\nwith key.\n","name":"_addNewRoot","isPrivate":true,"id":"_addNewRoot2()","children":[{"ref":{"refId":"dart.collection/_SplayTreeNode","arguments":[{"refId":"dart.collection/_SplayTree/K","name":"K"}],"name":"_SplayTreeNode"},"name":"node","id":"node","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"comp","id":"comp","kind":"param"}],"line":"193","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_clear","isPrivate":true,"id":"_clear0()","line":"225","kind":"method"},{"ref":{"refId":"dart.collection/_SplayTreeNode","name":"_SplayTreeNode"},"name":"_first","isPrivate":true,"id":"_first","line":"213","kind":"property"},{"ref":{"refId":"dart.collection/_SplayTreeNode","name":"_SplayTreeNode"},"name":"_last","isPrivate":true,"id":"_last","line":"219","kind":"property"},{"ref":{"refId":"dart.collection/_SplayTreeNode","arguments":[{"refId":"dart.collection/_SplayTree/K","name":"K"}],"name":"_SplayTreeNode"},"name":"_root","isPrivate":true,"id":"_root","line":"40","kind":"variable"},{"ref":{"refId":"dart.collection/_SplayTreeNode","arguments":[{"refId":"dart.collection/_SplayTree/K","name":"K"}],"name":"_SplayTreeNode"},"name":"_dummy","isPrivate":true,"id":"_dummy","line":"44","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"_count","isPrivate":true,"id":"_count","line":"47","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nCounter incremented whenever the keys in the map changes.\n\nUsed to detect concurrent modifications.\n","name":"_modificationCount","isPrivate":true,"id":"_modificationCount","line":"54","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nCounter incremented whenever the tree structure changes.\n\nUsed to detect that an in-place traversal cannot use\ncached information that relies on the tree structure.\n","name":"_splayCount","isPrivate":true,"id":"_splayCount","line":"62","kind":"variable"},{"name":"K","id":"K","kind":"typeparam"}],"line":"37","kind":"class"},{"superclass":{"refId":"dart.collection/_SplayTreeNode","arguments":[{"refId":"dart.collection/_SplayTreeMapNode/K","name":"K"}],"name":"_SplayTreeNode"},"comment":"\nA node in a splay tree based map.\n\nA [_SplayTreeNode] that also contains a value\n","uri":"sdk/lib/collection/splay_tree.dart","name":"_SplayTreeMapNode","isPrivate":true,"id":"_SplayTreeMapNode","children":[{"ref":{"refId":"dart.collection/_SplayTreeMapNode/V","name":"V"},"name":"value","id":"value","line":"25","kind":"variable"},{"name":"_SplayTreeMapNode","id":"_SplayTreeMapNode2()","children":[{"ref":{"refId":"dart.collection/_SplayTreeMapNode/K","name":"K"},"name":"key","id":"key","kind":"param"},{"initializedField":{"refId":"dart.collection/_SplayTreeMapNode/value","name":"value"},"ref":{"refId":"dart.collection/_SplayTreeMapNode/V","name":"V"},"name":"value","id":"value","kind":"param"}],"line":"26","kind":"constructor"},{"name":"K","id":"K","kind":"typeparam"},{"name":"V","id":"V","kind":"typeparam"}],"line":"24","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nA node in a splay tree. It holds the sorting key and the left\nand right children in the tree.\n","uri":"sdk/lib/collection/splay_tree.dart","name":"_SplayTreeNode","isPrivate":true,"id":"_SplayTreeNode","children":[{"ref":{"refId":"dart.collection/_SplayTreeNode/K","name":"K"},"isFinal":true,"name":"key","id":"key","line":"12","kind":"variable"},{"ref":{"refId":"dart.collection/_SplayTreeNode","arguments":[{"refId":"dart.collection/_SplayTreeNode/K","name":"K"}],"name":"_SplayTreeNode"},"name":"left","id":"left","line":"13","kind":"variable"},{"ref":{"refId":"dart.collection/_SplayTreeNode","arguments":[{"refId":"dart.collection/_SplayTreeNode/K","name":"K"}],"name":"_SplayTreeNode"},"name":"right","id":"right","line":"14","kind":"variable"},{"name":"_SplayTreeNode","id":"_SplayTreeNode1()","children":[{"initializedField":{"refId":"dart.collection/_SplayTreeNode/key","name":"key"},"ref":{"refId":"dart.collection/_SplayTreeNode/K","name":"K"},"name":"key","id":"key","kind":"param"}],"line":"16","kind":"constructor"},{"name":"K","id":"K","kind":"typeparam"}],"line":"11","kind":"class"},{"interfaces":[{"refId":"dart.core/Iterator","arguments":[{"refId":"dart.collection/_ListQueueIterator/E","name":"E"}],"name":"Iterator"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nIterator for a [ListQueue].\n\nConsiders any add or remove operation a concurrent modification.\n","uri":"sdk/lib/collection/queue.dart","name":"_ListQueueIterator","isPrivate":true,"id":"_ListQueueIterator","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"moveNext","id":"moveNext0()","line":"700","kind":"method"},{"ref":{"refId":"dart.collection/_ListQueueIterator/E","name":"E"},"name":"current","id":"current","line":"698","kind":"property"},{"ref":{"refId":"dart.collection/ListQueue","name":"ListQueue"},"isFinal":true,"name":"_queue","isPrivate":true,"id":"_queue","line":"686","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"name":"_end","isPrivate":true,"id":"_end","line":"687","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"name":"_modificationCount","isPrivate":true,"id":"_modificationCount","line":"688","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"_position","isPrivate":true,"id":"_position","line":"689","kind":"variable"},{"ref":{"refId":"dart.collection/_ListQueueIterator/E","name":"E"},"name":"_current","isPrivate":true,"id":"_current","line":"690","kind":"variable"},{"name":"_ListQueueIterator","id":"_ListQueueIterator1()","children":[{"ref":{"refId":"dart.collection/ListQueue","name":"ListQueue"},"name":"queue","id":"queue","kind":"param"}],"line":"692","kind":"constructor"},{"name":"E","id":"E","kind":"typeparam"}],"line":"685","kind":"class"},{"interfaces":[{"refId":"dart.collection/Queue","arguments":[{"refId":"dart.collection/ListQueue/E","name":"E"}],"name":"Queue"}],"superclass":{"refId":"dart.collection/IterableBase","arguments":[{"refId":"dart.collection/ListQueue/E","name":"E"}],"name":"IterableBase"},"comment":"\nList based [Queue].\n\nKeeps a cyclic buffer of elements, and grows to a larger buffer when\nit fills up. This guarantees constant time peek and remove operations, and\namortized constant time add operations.\n\nThe structure is efficient for any queue or stack usage.\n\nOperations like [removeAll] and [removeWhere] are very\ninefficient. If those are needed, use a [DoubleLinkedQueue] instead.\n","uri":"sdk/lib/collection/queue.dart","name":"ListQueue","id":"ListQueue","children":[{"returnType":{"refId":"void","name":"void"},"name":"forEach","id":"forEach1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"action","id":"action","children":[{"returnType":{"refId":"void","name":"void"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/ListQueue/E","name":"E"},"uri":"sdk/lib/collection/queue.dart","name":"element","id":"element","line":"393","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"393","kind":"method"},{"returnType":{"refId":"dart.collection/ListQueue/E","name":"E"},"name":"elementAt","id":"elementAt1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"index","id":"index","kind":"param"}],"line":"421","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.collection/ListQueue/E","name":"E"}],"name":"List"},"name":"toList","id":"toList1()","children":[{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"true","name":"growable","id":"growable","kind":"param"}],"line":"428","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"add","id":"add1()","children":[{"ref":{"refId":"dart.collection/ListQueue/E","name":"E"},"name":"element","id":"element","kind":"param"}],"line":"441","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"addAll","id":"addAll1()","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/ListQueue/E","name":"E"}],"name":"Iterable"},"name":"elements","id":"elements","kind":"param"}],"line":"445","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"remove","id":"remove1()","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"name":"object","id":"object","kind":"param"}],"line":"474","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_filterWhere","isPrivate":true,"id":"_filterWhere2()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/ListQueue/E","name":"E"},"uri":"sdk/lib/collection/queue.dart","name":"element","id":"element","line":"486","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"removeMatching","id":"removeMatching","kind":"param"}],"line":"486","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nRemove all elements matched by [test].\n\nThis method is inefficient since it works by repeatedly removing single\nelements, each of which can take linear time.\n","name":"removeWhere","id":"removeWhere1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/ListQueue/E","name":"E"},"uri":"sdk/lib/collection/queue.dart","name":"element","id":"element","line":"509","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"509","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nRemove all elements not matched by [test].\n\nThis method is inefficient since it works by repeatedly removing single\nelements, each of which can take linear time.\n","name":"retainWhere","id":"retainWhere1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/ListQueue/E","name":"E"},"uri":"sdk/lib/collection/queue.dart","name":"element","id":"element","line":"519","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"519","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"clear","id":"clear0()","line":"523","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"name":"toString","id":"toString0()","line":"533","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"addLast","id":"addLast1()","children":[{"ref":{"refId":"dart.collection/ListQueue/E","name":"E"},"name":"element","id":"element","kind":"param"}],"line":"539","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"addFirst","id":"addFirst1()","children":[{"ref":{"refId":"dart.collection/ListQueue/E","name":"E"},"name":"element","id":"element","kind":"param"}],"line":"541","kind":"method"},{"returnType":{"refId":"dart.collection/ListQueue/E","name":"E"},"name":"removeFirst","id":"removeFirst0()","line":"548","kind":"method"},{"returnType":{"refId":"dart.collection/ListQueue/E","name":"E"},"name":"removeLast","id":"removeLast0()","line":"556","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isStatic":true,"comment":"\nWhether [number] is a power of two.\n\nOnly works for positive numbers.\n","name":"_isPowerOf2","isPrivate":true,"id":"_isPowerOf21()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"number","id":"number","kind":"param"}],"line":"570","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"\nRounds [number] up to the nearest power of 2.\n\nIf [number] is a power of 2 already, it is returned.\n\nOnly works for positive numbers.\n","name":"_nextPowerOf2","isPrivate":true,"id":"_nextPowerOf21()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"number","id":"number","kind":"param"}],"line":"579","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Check if the queue has been modified during iteration. ","name":"_checkModification","isPrivate":true,"id":"_checkModification1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"expectedModificationCount","id":"expectedModificationCount","kind":"param"}],"line":"590","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Adds element at end of queue. Used by both [add] and [addAll]. ","name":"_add","isPrivate":true,"id":"_add1()","children":[{"ref":{"refId":"dart.collection/ListQueue/E","name":"E"},"name":"element","id":"element","kind":"param"}],"line":"597","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"comment":"\nRemoves the element at [offset] into [_table].\n\nRemoval is performed by linerarly moving elements either before or after\n[offset] by one position.\n\nReturns the new offset of the following element. This may be the same\noffset or the following offset depending on how elements are moved\nto fill the hole.\n","name":"_remove","isPrivate":true,"id":"_remove1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"offset","id":"offset","kind":"param"}],"line":"614","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nGrow the table when full.\n","name":"_grow","isPrivate":true,"id":"_grow0()","line":"645","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"name":"_writeToList","isPrivate":true,"id":"_writeToList1()","children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.collection/ListQueue/E","name":"E"}],"name":"List"},"name":"target","id":"target","kind":"param"}],"line":"655","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Grows the table even if it is not full. ","name":"_preGrow","isPrivate":true,"id":"_preGrow1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"newElementCount","id":"newElementCount","kind":"param"}],"line":"670","kind":"method"},{"ref":{"refId":"dart.core/Iterator","arguments":[{"refId":"dart.collection/ListQueue/E","name":"E"}],"name":"Iterator"},"name":"iterator","id":"iterator","line":"391","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isEmpty","id":"isEmpty","line":"401","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"length","id":"length","line":"403","kind":"property"},{"ref":{"refId":"dart.collection/ListQueue/E","name":"E"},"name":"first","id":"first","line":"405","kind":"property"},{"ref":{"refId":"dart.collection/ListQueue/E","name":"E"},"name":"last","id":"last","line":"410","kind":"property"},{"ref":{"refId":"dart.collection/ListQueue/E","name":"E"},"name":"single","id":"single","line":"415","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"_INITIAL_CAPACITY","isPrivate":true,"id":"_INITIAL_CAPACITY","line":"350","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.collection/ListQueue/E","name":"E"}],"name":"List"},"name":"_table","isPrivate":true,"id":"_table","line":"351","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"_head","isPrivate":true,"id":"_head","line":"352","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"_tail","isPrivate":true,"id":"_tail","line":"353","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"_modificationCount","isPrivate":true,"id":"_modificationCount","line":"354","kind":"variable"},{"comment":"\nCreate an empty queue.\n\nIf [initialCapacity] is given, prepare the queue for at least that many\nelements.\n","name":"ListQueue","id":"ListQueue1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"name":"initialCapacity","id":"initialCapacity","kind":"param"}],"line":"362","kind":"constructor"},{"returnType":{"refId":"dart.collection/ListQueue","arguments":[{"refId":"dart.collection/ListQueue/E","name":"E"}],"name":"ListQueue"},"comment":"\nCreate a queue initially containing the elements of [source].\n","name":"ListQueue.from","id":"ListQueue.from1()","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/ListQueue/E","name":"E"}],"name":"Iterable"},"name":"source","id":"source","kind":"param"}],"line":"375","kind":"constructor"},{"name":"E","id":"E","kind":"typeparam"}],"line":"349","kind":"class"},{"interfaces":[{"refId":"dart.core/Iterator","arguments":[{"refId":"dart.collection/_DoubleLinkedQueueIterator/E","name":"E"}],"name":"Iterator"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"uri":"sdk/lib/collection/queue.dart","name":"_DoubleLinkedQueueIterator","isPrivate":true,"id":"_DoubleLinkedQueueIterator","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"moveNext","id":"moveNext0()","line":"317","kind":"method"},{"ref":{"refId":"dart.collection/_DoubleLinkedQueueIterator/E","name":"E"},"name":"current","id":"current","line":"334","kind":"property"},{"ref":{"refId":"dart.collection/_DoubleLinkedQueueEntrySentinel","arguments":[{"refId":"dart.collection/_DoubleLinkedQueueIterator/E","name":"E"}],"name":"_DoubleLinkedQueueEntrySentinel"},"name":"_sentinel","isPrivate":true,"id":"_sentinel","line":"310","kind":"variable"},{"ref":{"refId":"dart.collection/DoubleLinkedQueueEntry","arguments":[{"refId":"dart.collection/_DoubleLinkedQueueIterator/E","name":"E"}],"name":"DoubleLinkedQueueEntry"},"name":"_currentEntry","isPrivate":true,"id":"_currentEntry","line":"311","kind":"variable"},{"ref":{"refId":"dart.collection/_DoubleLinkedQueueIterator/E","name":"E"},"name":"_current","isPrivate":true,"id":"_current","line":"312","kind":"variable"},{"name":"_DoubleLinkedQueueIterator","id":"_DoubleLinkedQueueIterator1()","children":[{"ref":{"refId":"dart.collection/_DoubleLinkedQueueEntrySentinel","arguments":[{"refId":"dart.collection/_DoubleLinkedQueueIterator/E","name":"E"}],"name":"_DoubleLinkedQueueEntrySentinel"},"name":"sentinel","id":"sentinel","kind":"param"}],"line":"314","kind":"constructor"},{"name":"E","id":"E","kind":"typeparam"}],"line":"309","kind":"class"},{"interfaces":[{"refId":"dart.collection/Queue","arguments":[{"refId":"dart.collection/DoubleLinkedQueue/E","name":"E"}],"name":"Queue"}],"superclass":{"refId":"dart.collection/IterableBase","arguments":[{"refId":"dart.collection/DoubleLinkedQueue/E","name":"E"}],"name":"IterableBase"},"comment":"\nA [Queue] implementation based on a double-linked list.\n\nAllows constant time add, remove-at-ends and peek operations.\n\nCan do [removeAll] and [retainAll] in linear time.\n","uri":"sdk/lib/collection/queue.dart","name":"DoubleLinkedQueue","id":"DoubleLinkedQueue","children":[{"returnType":{"refId":"void","name":"void"},"name":"addLast","id":"addLast1()","children":[{"ref":{"refId":"dart.collection/DoubleLinkedQueue/E","name":"E"},"name":"value","id":"value","kind":"param"}],"line":"190","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"addFirst","id":"addFirst1()","children":[{"ref":{"refId":"dart.collection/DoubleLinkedQueue/E","name":"E"},"name":"value","id":"value","kind":"param"}],"line":"195","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"add","id":"add1()","children":[{"ref":{"refId":"dart.collection/DoubleLinkedQueue/E","name":"E"},"name":"value","id":"value","kind":"param"}],"line":"200","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"addAll","id":"addAll1()","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/DoubleLinkedQueue/E","name":"E"}],"name":"Iterable"},"name":"iterable","id":"iterable","kind":"param"}],"line":"205","kind":"method"},{"returnType":{"refId":"dart.collection/DoubleLinkedQueue/E","name":"E"},"name":"removeLast","id":"removeLast0()","line":"212","kind":"method"},{"returnType":{"refId":"dart.collection/DoubleLinkedQueue/E","name":"E"},"name":"removeFirst","id":"removeFirst0()","line":"218","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"remove","id":"remove1()","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"name":"o","id":"o","kind":"param"}],"line":"224","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_filter","isPrivate":true,"id":"_filter2()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/DoubleLinkedQueue/E","name":"E"},"uri":"sdk/lib/collection/queue.dart","name":"element","id":"element","line":"237","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"removeMatching","id":"removeMatching","kind":"param"}],"line":"237","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"removeWhere","id":"removeWhere1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/DoubleLinkedQueue/E","name":"E"},"uri":"sdk/lib/collection/queue.dart","name":"element","id":"element","line":"249","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"249","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"retainWhere","id":"retainWhere1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/DoubleLinkedQueue/E","name":"E"},"uri":"sdk/lib/collection/queue.dart","name":"element","id":"element","line":"253","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"253","kind":"method"},{"returnType":{"refId":"dart.collection/DoubleLinkedQueueEntry","arguments":[{"refId":"dart.collection/DoubleLinkedQueue/E","name":"E"}],"name":"DoubleLinkedQueueEntry"},"name":"lastEntry","id":"lastEntry0()","line":"273","kind":"method"},{"returnType":{"refId":"dart.collection/DoubleLinkedQueueEntry","arguments":[{"refId":"dart.collection/DoubleLinkedQueue/E","name":"E"}],"name":"DoubleLinkedQueueEntry"},"name":"firstEntry","id":"firstEntry0()","line":"277","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"clear","id":"clear0()","line":"285","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"forEachEntry","id":"forEachEntry1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"returnType":{"refId":"void","name":"void"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/DoubleLinkedQueueEntry","arguments":[{"refId":"dart.collection/DoubleLinkedQueue/E","name":"E"}],"name":"DoubleLinkedQueueEntry"},"uri":"sdk/lib/collection/queue.dart","name":"element","id":"element","line":"291","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"291","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"name":"toString","id":"toString0()","line":"304","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"length","id":"length","line":"188","kind":"property"},{"ref":{"refId":"dart.collection/DoubleLinkedQueue/E","name":"E"},"name":"first","id":"first","line":"257","kind":"property"},{"ref":{"refId":"dart.collection/DoubleLinkedQueue/E","name":"E"},"name":"last","id":"last","line":"261","kind":"property"},{"ref":{"refId":"dart.collection/DoubleLinkedQueue/E","name":"E"},"name":"single","id":"single","line":"265","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isEmpty","id":"isEmpty","line":"281","kind":"property"},{"ref":{"refId":"dart.collection/_DoubleLinkedQueueIterator","arguments":[{"refId":"dart.collection/DoubleLinkedQueue/E","name":"E"}],"name":"_DoubleLinkedQueueIterator"},"name":"iterator","id":"iterator","line":"300","kind":"property"},{"ref":{"refId":"dart.collection/_DoubleLinkedQueueEntrySentinel","arguments":[{"refId":"dart.collection/DoubleLinkedQueue/E","name":"E"}],"name":"_DoubleLinkedQueueEntrySentinel"},"name":"_sentinel","isPrivate":true,"id":"_sentinel","line":"173","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"_elementCount","isPrivate":true,"id":"_elementCount","line":"174","kind":"variable"},{"name":"DoubleLinkedQueue","id":"DoubleLinkedQueue0()","line":"176","kind":"constructor"},{"returnType":{"refId":"dart.collection/DoubleLinkedQueue","arguments":[{"refId":"dart.collection/DoubleLinkedQueue/E","name":"E"}],"name":"DoubleLinkedQueue"},"name":"DoubleLinkedQueue.from","id":"DoubleLinkedQueue.from1()","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/DoubleLinkedQueue/E","name":"E"}],"name":"Iterable"},"name":"other","id":"other","kind":"param"}],"line":"180","kind":"constructor"},{"name":"E","id":"E","kind":"typeparam"}],"line":"172","kind":"class"},{"superclass":{"refId":"dart.collection/DoubleLinkedQueueEntry","arguments":[{"refId":"dart.collection/_DoubleLinkedQueueEntrySentinel/E","name":"E"}],"name":"DoubleLinkedQueueEntry"},"comment":"\nA sentinel in a double linked list is used to manipulate the list\nat both ends. A double linked list has exactly one sentinel, which\nis the only entry when the list is constructed. Initially, a\nsentinel has its next and previous entry point to itself. A\nsentinel does not box any user element.\n","uri":"sdk/lib/collection/queue.dart","name":"_DoubleLinkedQueueEntrySentinel","isPrivate":true,"id":"_DoubleLinkedQueueEntrySentinel","children":[{"returnType":{"refId":"dart.collection/_DoubleLinkedQueueEntrySentinel/E","name":"E"},"name":"remove","id":"remove0()","line":"147","kind":"method"},{"returnType":{"refId":"dart.collection/DoubleLinkedQueueEntry","arguments":[{"refId":"dart.collection/_DoubleLinkedQueueEntrySentinel/E","name":"E"}],"name":"DoubleLinkedQueueEntry"},"name":"_asNonSentinelEntry","isPrivate":true,"id":"_asNonSentinelEntry0()","line":"151","kind":"method"},{"returnType":{"refId":"void","name":"void"},"isSetter":true,"name":"element=","id":"element=1()","children":[{"ref":{"refId":"dart.collection/_DoubleLinkedQueueEntrySentinel/E","name":"E"},"name":"e","id":"e","kind":"param"}],"line":"155","kind":"method"},{"ref":{"refId":"dart.collection/_DoubleLinkedQueueEntrySentinel/E","name":"E"},"name":"element","id":"element","line":"160","kind":"property"},{"name":"_DoubleLinkedQueueEntrySentinel","id":"_DoubleLinkedQueueEntrySentinel0()","line":"143","kind":"constructor"},{"name":"E","id":"E","kind":"typeparam"}],"line":"142","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nAn entry in a doubly linked list. It contains a pointer to the next\nentry, the previous entry, and the boxed element.\n\nWARNING: This class is temporary located in dart:core. It'll be removed\nat some point in the near future.\n","uri":"sdk/lib/collection/queue.dart","name":"DoubleLinkedQueueEntry","id":"DoubleLinkedQueueEntry","children":[{"returnType":{"refId":"void","name":"void"},"name":"_link","isPrivate":true,"id":"_link2()","children":[{"ref":{"refId":"dart.collection/DoubleLinkedQueueEntry","arguments":[{"refId":"dart.collection/DoubleLinkedQueueEntry/E","name":"E"}],"name":"DoubleLinkedQueueEntry"},"name":"p","id":"p","kind":"param"},{"ref":{"refId":"dart.collection/DoubleLinkedQueueEntry","arguments":[{"refId":"dart.collection/DoubleLinkedQueueEntry/E","name":"E"}],"name":"DoubleLinkedQueueEntry"},"name":"n","id":"n","line":"91","kind":"param"}],"line":"90","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"append","id":"append1()","children":[{"ref":{"refId":"dart.collection/DoubleLinkedQueueEntry/E","name":"E"},"name":"e","id":"e","kind":"param"}],"line":"98","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"prepend","id":"prepend1()","children":[{"ref":{"refId":"dart.collection/DoubleLinkedQueueEntry/E","name":"E"},"name":"e","id":"e","kind":"param"}],"line":"102","kind":"method"},{"returnType":{"refId":"dart.collection/DoubleLinkedQueueEntry/E","name":"E"},"name":"remove","id":"remove0()","line":"106","kind":"method"},{"returnType":{"refId":"dart.collection/DoubleLinkedQueueEntry","arguments":[{"refId":"dart.collection/DoubleLinkedQueueEntry/E","name":"E"}],"name":"DoubleLinkedQueueEntry"},"name":"_asNonSentinelEntry","isPrivate":true,"id":"_asNonSentinelEntry0()","line":"114","kind":"method"},{"returnType":{"refId":"dart.collection/DoubleLinkedQueueEntry","arguments":[{"refId":"dart.collection/DoubleLinkedQueueEntry/E","name":"E"}],"name":"DoubleLinkedQueueEntry"},"name":"previousEntry","id":"previousEntry0()","line":"118","kind":"method"},{"returnType":{"refId":"dart.collection/DoubleLinkedQueueEntry","arguments":[{"refId":"dart.collection/DoubleLinkedQueueEntry/E","name":"E"}],"name":"DoubleLinkedQueueEntry"},"name":"nextEntry","id":"nextEntry0()","line":"122","kind":"method"},{"returnType":{"refId":"void","name":"void"},"isSetter":true,"name":"element=","id":"element=1()","children":[{"ref":{"refId":"dart.collection/DoubleLinkedQueueEntry/E","name":"E"},"name":"e","id":"e","kind":"param"}],"line":"130","kind":"method"},{"ref":{"refId":"dart.collection/DoubleLinkedQueueEntry/E","name":"E"},"name":"element","id":"element","line":"126","kind":"property"},{"ref":{"refId":"dart.collection/DoubleLinkedQueueEntry","arguments":[{"refId":"dart.collection/DoubleLinkedQueueEntry/E","name":"E"}],"name":"DoubleLinkedQueueEntry"},"name":"_previous","isPrivate":true,"id":"_previous","line":"82","kind":"variable"},{"ref":{"refId":"dart.collection/DoubleLinkedQueueEntry","arguments":[{"refId":"dart.collection/DoubleLinkedQueueEntry/E","name":"E"}],"name":"DoubleLinkedQueueEntry"},"name":"_next","isPrivate":true,"id":"_next","line":"83","kind":"variable"},{"ref":{"refId":"dart.collection/DoubleLinkedQueueEntry/E","name":"E"},"name":"_element","isPrivate":true,"id":"_element","line":"84","kind":"variable"},{"name":"DoubleLinkedQueueEntry","id":"DoubleLinkedQueueEntry1()","children":[{"ref":{"refId":"dart.collection/DoubleLinkedQueueEntry/E","name":"E"},"name":"e","id":"e","kind":"param"}],"line":"86","kind":"constructor"},{"name":"E","id":"E","kind":"typeparam"}],"line":"81","kind":"class"},{"isAbstract":true,"interfaces":[{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/Queue/E","name":"E"}],"name":"Iterable"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nA [Queue] is a collection that can be manipulated at both ends. One\ncan iterate over the elements of a queue through [forEach] or with\nan [Iterator].\n","uri":"sdk/lib/collection/queue.dart","name":"Queue","id":"Queue","children":[{"returnType":{"refId":"dart.collection/Queue/E","name":"E"},"comment":"\nRemoves and returns the first element of this queue. Throws an\n[StateError] exception if this queue is empty.\n","name":"removeFirst","id":"removeFirst0()","line":"29","kind":"method"},{"returnType":{"refId":"dart.collection/Queue/E","name":"E"},"comment":"\nRemoves and returns the last element of the queue. Throws an\n[StateError] exception if this queue is empty.\n","name":"removeLast","id":"removeLast0()","line":"35","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nAdds [value] at the beginning of the queue.\n","name":"addFirst","id":"addFirst1()","children":[{"ref":{"refId":"dart.collection/Queue/E","name":"E"},"name":"value","id":"value","kind":"param"}],"line":"40","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nAdds [value] at the end of the queue.\n","name":"addLast","id":"addLast1()","children":[{"ref":{"refId":"dart.collection/Queue/E","name":"E"},"name":"value","id":"value","kind":"param"}],"line":"45","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nAdds [value] at the end of the queue.\n","name":"add","id":"add1()","children":[{"ref":{"refId":"dart.collection/Queue/E","name":"E"},"name":"value","id":"value","kind":"param"}],"line":"50","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"\nRemove a single instance of [value] from the queue.\n\nReturns `true` if a value was removed, or `false` if the queue\ncontained no element equal to [value].\n","name":"remove","id":"remove1()","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"name":"object","id":"object","kind":"param"}],"line":"58","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nAdds all elements of [iterable] at the end of the queue. The\nlength of the queue is extended by the length of [iterable].\n","name":"addAll","id":"addAll1()","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/Queue/E","name":"E"}],"name":"Iterable"},"name":"iterable","id":"iterable","kind":"param"}],"line":"65","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nRemoves all elements in the queue. The size of the queue becomes zero.\n","name":"clear","id":"clear0()","line":"70","kind":"method"},{"returnType":{"refId":"dart.collection/Queue","arguments":[{"refId":"dart.collection/Queue/E","name":"E"}],"name":"Queue"},"comment":"\nCreates a queue.\n","name":"Queue","id":"Queue0()","line":"17","kind":"constructor"},{"returnType":{"refId":"dart.collection/Queue","arguments":[{"refId":"dart.collection/Queue/E","name":"E"}],"name":"Queue"},"comment":"\nCreates a queue with the elements of [other]. The order in\nthe queue will be the order provided by the iterator of [other].\n","name":"Queue.from","id":"Queue.from1()","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/Queue/E","name":"E"}],"name":"Iterable"},"name":"other","id":"other","kind":"param"}],"line":"23","kind":"constructor"},{"name":"E","id":"E","kind":"typeparam"}],"line":"12","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"uri":"sdk/lib/collection/maps.dart","name":"Maps","id":"Maps","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"isStatic":true,"name":"containsValue","id":"containsValue2()","children":[{"ref":{"refId":"dart.core/Map","name":"Map"},"name":"map","id":"map","kind":"param"},{"name":"value","id":"value","kind":"param"}],"line":"14","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isStatic":true,"name":"containsKey","id":"containsKey2()","children":[{"ref":{"refId":"dart.core/Map","name":"Map"},"name":"map","id":"map","kind":"param"},{"name":"key","id":"key","kind":"param"}],"line":"23","kind":"method"},{"isStatic":true,"name":"putIfAbsent","id":"putIfAbsent3()","children":[{"ref":{"refId":"dart.core/Map","name":"Map"},"name":"map","id":"map","kind":"param"},{"name":"key","id":"key","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"ifAbsent","id":"ifAbsent","children":[{"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"32","kind":"method"},{"isStatic":true,"name":"clear","id":"clear1()","children":[{"ref":{"refId":"dart.core/Map","name":"Map"},"name":"map","id":"map","kind":"param"}],"line":"41","kind":"method"},{"isStatic":true,"name":"forEach","id":"forEach2()","children":[{"ref":{"refId":"dart.core/Map","name":"Map"},"name":"map","id":"map","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"returnType":{"refId":"void","name":"void"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"uri":"sdk/lib/collection/maps.dart","name":"key","id":"key","line":"47","kind":"param"},{"uri":"sdk/lib/collection/maps.dart","name":"value","id":"value","line":"47","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"47","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","name":"Iterable"},"isStatic":true,"name":"getValues","id":"getValues1()","children":[{"ref":{"refId":"dart.core/Map","name":"Map"},"name":"map","id":"map","kind":"param"}],"line":"53","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"length","id":"length1()","children":[{"ref":{"refId":"dart.core/Map","name":"Map"},"name":"map","id":"map","kind":"param"}],"line":"57","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isStatic":true,"name":"isEmpty","id":"isEmpty1()","children":[{"ref":{"refId":"dart.core/Map","name":"Map"},"name":"map","id":"map","kind":"param"}],"line":"59","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isStatic":true,"name":"isNotEmpty","id":"isNotEmpty1()","children":[{"ref":{"refId":"dart.core/Map","name":"Map"},"name":"map","id":"map","kind":"param"}],"line":"61","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"\nReturns a string representing the specified map. The returned string\nlooks like this: [:'{key0: value0, key1: value1, ... keyN: valueN}':].\nThe value returned by its [toString] method is used to represent each\nkey or value.\n\nIf the map collection contains a reference to itself, either\ndirectly as a key or value, or indirectly through other collections\nor maps, the contained reference is rendered as [:'{...}':]. This\nprevents the infinite regress that would otherwise occur. So, for example,\ncalling this method on a map whose sole entry maps the string key 'me'\nto a reference to the map would return [:'{me: {...}}':].\n\nA typical implementation of a map's [toString] method will\nsimply return the results of this method applied to the collection.\n","name":"mapToString","id":"mapToString1()","children":[{"ref":{"refId":"dart.core/Map","name":"Map"},"name":"m","id":"m","kind":"param"}],"line":"79","kind":"method"}],"line":"13","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nThe [HasNextIterator] class wraps an [Iterator] and provides methods to\niterate over an object using `hasNext` and `next`.\n\nAn [HasNextIterator] does not implement the [Iterator] interface.\n","uri":"sdk/lib/collection/iterator.dart","name":"HasNextIterator","id":"HasNextIterator","children":[{"returnType":{"refId":"dart.collection/HasNextIterator/E","name":"E"},"name":"next","id":"next0()","line":"28","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_move","isPrivate":true,"id":"_move0()","line":"38","kind":"method"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"hasNext","id":"hasNext","line":"23","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"_HAS_NEXT_AND_NEXT_IN_CURRENT","isPrivate":true,"id":"_HAS_NEXT_AND_NEXT_IN_CURRENT","line":"14","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"_NO_NEXT","isPrivate":true,"id":"_NO_NEXT","line":"15","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"_NOT_MOVED_YET","isPrivate":true,"id":"_NOT_MOVED_YET","line":"16","kind":"variable"},{"ref":{"refId":"dart.core/Iterator","name":"Iterator"},"name":"_iterator","isPrivate":true,"id":"_iterator","line":"18","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"_state","isPrivate":true,"id":"_state","line":"19","kind":"variable"},{"name":"HasNextIterator","id":"HasNextIterator1()","children":[{"initializedField":{"refId":"dart.collection/HasNextIterator/_iterator","name":"_iterator"},"ref":{"refId":"dart.core/Iterator","name":"Iterator"},"name":"_iterator","isPrivate":true,"id":"_iterator","kind":"param"}],"line":"21","kind":"constructor"},{"name":"E","id":"E","kind":"typeparam"}],"line":"13","kind":"class"},{"isAbstract":true,"interfaces":[{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/IterableBase/E","name":"E"}],"name":"Iterable"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nBase class for implementing [Iterable].\n\nThis class implements all methods of [Iterable] except [Iterable.iterator]\nin terms of `iterator`.\n","uri":"sdk/lib/collection/iterable.dart","name":"IterableBase","id":"IterableBase","children":[{"returnType":{"refId":"dart.core/Iterable","name":"Iterable"},"name":"map","id":"map1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"uri":"sdk/lib/collection/iterable.dart","name":"element","id":"element","line":"207","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"207","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/IterableBase/E","name":"E"}],"name":"Iterable"},"name":"where","id":"where1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"uri":"sdk/lib/collection/iterable.dart","name":"element","id":"element","line":"209","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"209","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","name":"Iterable"},"name":"expand","id":"expand1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"returnType":{"refId":"dart.core/Iterable","name":"Iterable"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"uri":"sdk/lib/collection/iterable.dart","name":"element","id":"element","line":"211","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"211","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"contains","id":"contains1()","children":[{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"name":"element","id":"element","kind":"param"}],"line":"214","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"forEach","id":"forEach1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"returnType":{"refId":"void","name":"void"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"uri":"sdk/lib/collection/iterable.dart","name":"element","id":"element","line":"221","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"221","kind":"method"},{"returnType":{"refId":"dart.collection/IterableBase/E","name":"E"},"name":"reduce","id":"reduce1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"combine","id":"combine","children":[{"returnType":{"refId":"dart.collection/IterableBase/E","name":"E"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"uri":"sdk/lib/collection/iterable.dart","name":"value","id":"value","line":"225","kind":"param"},{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"uri":"sdk/lib/collection/iterable.dart","name":"element","id":"element","line":"225","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"225","kind":"method"},{"name":"fold","id":"fold2()","children":[{"name":"initialValue","id":"initialValue","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"combine","id":"combine","children":[{"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"uri":"sdk/lib/collection/iterable.dart","name":"previousValue","id":"previousValue","line":"238","kind":"param"},{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"uri":"sdk/lib/collection/iterable.dart","name":"element","id":"element","line":"238","kind":"param"}],"line":"13","kind":"functiontype"}],"line":"238","kind":"param"}],"line":"237","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"every","id":"every1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"uri":"sdk/lib/collection/iterable.dart","name":"element","id":"element","line":"244","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"244","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"name":"join","id":"join1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"separator","id":"separator","kind":"param"}],"line":"251","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"any","id":"any1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"uri":"sdk/lib/collection/iterable.dart","name":"element","id":"element","line":"269","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"269","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.collection/IterableBase/E","name":"E"}],"name":"List"},"name":"toList","id":"toList1()","children":[{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"true","name":"growable","id":"growable","kind":"param"}],"line":"276","kind":"method"},{"returnType":{"refId":"dart.core/Set","arguments":[{"refId":"dart.collection/IterableBase/E","name":"E"}],"name":"Set"},"name":"toSet","id":"toSet0()","line":"279","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/IterableBase/E","name":"E"}],"name":"Iterable"},"name":"take","id":"take1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"n","id":"n","kind":"param"}],"line":"294","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/IterableBase/E","name":"E"}],"name":"Iterable"},"name":"takeWhile","id":"takeWhile1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"uri":"sdk/lib/collection/iterable.dart","name":"value","id":"value","line":"298","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"298","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/IterableBase/E","name":"E"}],"name":"Iterable"},"name":"skip","id":"skip1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"n","id":"n","kind":"param"}],"line":"302","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/IterableBase/E","name":"E"}],"name":"Iterable"},"name":"skipWhile","id":"skipWhile1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"uri":"sdk/lib/collection/iterable.dart","name":"value","id":"value","line":"306","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"306","kind":"method"},{"returnType":{"refId":"dart.collection/IterableBase/E","name":"E"},"name":"firstWhere","id":"firstWhere2()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"uri":"sdk/lib/collection/iterable.dart","name":"value","id":"value","line":"338","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"orElse","id":"orElse","children":[{"returnType":{"refId":"dart.collection/IterableBase/E","name":"E"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"338","kind":"method"},{"returnType":{"refId":"dart.collection/IterableBase/E","name":"E"},"name":"lastWhere","id":"lastWhere2()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"uri":"sdk/lib/collection/iterable.dart","name":"value","id":"value","line":"347","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"orElse","id":"orElse","children":[{"returnType":{"refId":"dart.collection/IterableBase/E","name":"E"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"347","kind":"method"},{"returnType":{"refId":"dart.collection/IterableBase/E","name":"E"},"name":"singleWhere","id":"singleWhere1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"uri":"sdk/lib/collection/iterable.dart","name":"value","id":"value","line":"362","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"362","kind":"method"},{"returnType":{"refId":"dart.collection/IterableBase/E","name":"E"},"name":"elementAt","id":"elementAt1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"index","id":"index","kind":"param"}],"line":"379","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"length","id":"length","line":"281","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isEmpty","id":"isEmpty","line":"290","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isNotEmpty","id":"isNotEmpty","line":"292","kind":"property"},{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"name":"first","id":"first","line":"310","kind":"property"},{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"name":"last","id":"last","line":"318","kind":"property"},{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"name":"single","id":"single","line":"330","kind":"property"},{"name":"IterableBase","id":"IterableBase0()","line":"205","kind":"constructor"},{"name":"E","id":"E","kind":"typeparam"}],"line":"202","kind":"class"},{"isAbstract":true,"interfaces":[{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/IterableMixin/E","name":"E"}],"name":"Iterable"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nThis [Iterable] mixin implements all [Iterable] members except `iterator`.\n\nAll other methods are implemented in terms of `iterator`.\n","uri":"sdk/lib/collection/iterable.dart","name":"IterableMixin","id":"IterableMixin","children":[{"returnType":{"refId":"dart.core/Iterable","name":"Iterable"},"name":"map","id":"map1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableMixin/E","name":"E"},"uri":"sdk/lib/collection/iterable.dart","name":"element","id":"element","kind":"param"}],"kind":"functiontype"}],"kind":"param"}],"line":"13","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/IterableMixin/E","name":"E"}],"name":"Iterable"},"name":"where","id":"where1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableMixin/E","name":"E"},"uri":"sdk/lib/collection/iterable.dart","name":"element","id":"element","line":"15","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"15","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","name":"Iterable"},"name":"expand","id":"expand1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"returnType":{"refId":"dart.core/Iterable","name":"Iterable"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableMixin/E","name":"E"},"uri":"sdk/lib/collection/iterable.dart","name":"element","id":"element","line":"17","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"17","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"contains","id":"contains1()","children":[{"ref":{"refId":"dart.collection/IterableMixin/E","name":"E"},"name":"element","id":"element","kind":"param"}],"line":"20","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"forEach","id":"forEach1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"returnType":{"refId":"void","name":"void"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableMixin/E","name":"E"},"uri":"sdk/lib/collection/iterable.dart","name":"element","id":"element","line":"27","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"27","kind":"method"},{"returnType":{"refId":"dart.collection/IterableMixin/E","name":"E"},"name":"reduce","id":"reduce1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"combine","id":"combine","children":[{"returnType":{"refId":"dart.collection/IterableMixin/E","name":"E"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableMixin/E","name":"E"},"uri":"sdk/lib/collection/iterable.dart","name":"value","id":"value","line":"31","kind":"param"},{"ref":{"refId":"dart.collection/IterableMixin/E","name":"E"},"uri":"sdk/lib/collection/iterable.dart","name":"element","id":"element","line":"31","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"31","kind":"method"},{"name":"fold","id":"fold2()","children":[{"name":"initialValue","id":"initialValue","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"combine","id":"combine","children":[{"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"uri":"sdk/lib/collection/iterable.dart","name":"previousValue","id":"previousValue","line":"44","kind":"param"},{"ref":{"refId":"dart.collection/IterableMixin/E","name":"E"},"uri":"sdk/lib/collection/iterable.dart","name":"element","id":"element","line":"44","kind":"param"}],"line":"13","kind":"functiontype"}],"line":"44","kind":"param"}],"line":"43","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"every","id":"every1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableMixin/E","name":"E"},"uri":"sdk/lib/collection/iterable.dart","name":"element","id":"element","line":"50","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"50","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"name":"join","id":"join1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"separator","id":"separator","kind":"param"}],"line":"57","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"any","id":"any1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableMixin/E","name":"E"},"uri":"sdk/lib/collection/iterable.dart","name":"element","id":"element","line":"75","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"75","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.collection/IterableMixin/E","name":"E"}],"name":"List"},"name":"toList","id":"toList1()","children":[{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"true","name":"growable","id":"growable","kind":"param"}],"line":"82","kind":"method"},{"returnType":{"refId":"dart.core/Set","arguments":[{"refId":"dart.collection/IterableMixin/E","name":"E"}],"name":"Set"},"name":"toSet","id":"toSet0()","line":"85","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/IterableMixin/E","name":"E"}],"name":"Iterable"},"name":"take","id":"take1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"n","id":"n","kind":"param"}],"line":"100","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/IterableMixin/E","name":"E"}],"name":"Iterable"},"name":"takeWhile","id":"takeWhile1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableMixin/E","name":"E"},"uri":"sdk/lib/collection/iterable.dart","name":"value","id":"value","line":"104","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"104","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/IterableMixin/E","name":"E"}],"name":"Iterable"},"name":"skip","id":"skip1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"n","id":"n","kind":"param"}],"line":"108","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/IterableMixin/E","name":"E"}],"name":"Iterable"},"name":"skipWhile","id":"skipWhile1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableMixin/E","name":"E"},"uri":"sdk/lib/collection/iterable.dart","name":"value","id":"value","line":"112","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"112","kind":"method"},{"returnType":{"refId":"dart.collection/IterableMixin/E","name":"E"},"name":"firstWhere","id":"firstWhere2()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableMixin/E","name":"E"},"uri":"sdk/lib/collection/iterable.dart","name":"value","id":"value","line":"144","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"orElse","id":"orElse","children":[{"returnType":{"refId":"dart.collection/IterableMixin/E","name":"E"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"144","kind":"method"},{"returnType":{"refId":"dart.collection/IterableMixin/E","name":"E"},"name":"lastWhere","id":"lastWhere2()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableMixin/E","name":"E"},"uri":"sdk/lib/collection/iterable.dart","name":"value","id":"value","line":"153","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"orElse","id":"orElse","children":[{"returnType":{"refId":"dart.collection/IterableMixin/E","name":"E"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"153","kind":"method"},{"returnType":{"refId":"dart.collection/IterableMixin/E","name":"E"},"name":"singleWhere","id":"singleWhere1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableMixin/E","name":"E"},"uri":"sdk/lib/collection/iterable.dart","name":"value","id":"value","line":"168","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"168","kind":"method"},{"returnType":{"refId":"dart.collection/IterableMixin/E","name":"E"},"name":"elementAt","id":"elementAt1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"index","id":"index","kind":"param"}],"line":"185","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"length","id":"length","line":"87","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isEmpty","id":"isEmpty","line":"96","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isNotEmpty","id":"isNotEmpty","line":"98","kind":"property"},{"ref":{"refId":"dart.collection/IterableMixin/E","name":"E"},"name":"first","id":"first","line":"116","kind":"property"},{"ref":{"refId":"dart.collection/IterableMixin/E","name":"E"},"name":"last","id":"last","line":"124","kind":"property"},{"ref":{"refId":"dart.collection/IterableMixin/E","name":"E"},"name":"single","id":"single","line":"136","kind":"property"},{"name":"E","id":"E","kind":"typeparam"}],"line":"12","kind":"class"},{"superclass":{"refId":"dart._collection.dev/UnmodifiableListBase","arguments":[{"refId":"dart.collection/UnmodifiableListView/E","name":"E"}],"name":"UnmodifiableListBase"},"comment":"\nAn unmodifiable [List] view of another List.\n\nThe source of the elements may be a [List] or any [Iterable] with\nefficient [Iterable.length] and [Iterable.elementAt].\n","uri":"sdk/lib/collection/collections.dart","name":"UnmodifiableListView","id":"UnmodifiableListView","children":[{"returnType":{"refId":"dart.collection/UnmodifiableListView/E","name":"E"},"isOperator":true,"name":"[]","id":"[]1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"index","id":"index","kind":"param"}],"line":"18","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"length","id":"length","line":"17","kind":"property"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/UnmodifiableListView/E","name":"E"}],"name":"Iterable"},"isFinal":true,"name":"_source","isPrivate":true,"id":"_source","line":"14","kind":"variable"},{"comment":"Create an unmodifiable list backed by [source]. ","name":"UnmodifiableListView","id":"UnmodifiableListView1()","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/UnmodifiableListView/E","name":"E"}],"name":"Iterable"},"name":"source","id":"source","kind":"param"}],"line":"16","kind":"constructor"},{"name":"E","id":"E","kind":"typeparam"}],"line":"13","kind":"class"}],"line":"5","kind":"library"}